#ifndef __MODULE1_2_H__
#define __MODULE1_2_H__


// 什么是字节对齐
//   计算机中内存大小的基本单位是字节（byte），理论上来讲，可以从任意地址访问某种基本数据类型，
//   但是实际上，计算机并非逐字节大小读写内存，而是以2,4,或8的 倍数的字节块来读写内存，
//   如此一来就会对基本数据类型的合法地址作出一些限制，即它的地址必须是2，4或8的倍数。
//   那么就要求各种数据类型按照一定的规则在空间上排列，这就是对齐。

// 总的来说，字节对齐有以下准则：
//   结构体变量的首地址能够被其对齐字节数大小所整除。
//   构体每个成员相对结构体首地址的偏移都是成员大小的 数倍，如不满足，对前一个成员填充字节以满足。
//   结构体的总大小为结构体对最大成员大小的整数倍，如不满足，最后填充字节以满足

// 伪指令#pragma pack(n)（n为字节对齐数）来使得结构间一字节对齐
// #pragma pack()/*还原默认对齐*/
// 对于单个结构体
// __attribute__((aligned (n)))，让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。
// __attribute__ ((packed))，取消结构在编译过程中的优化对齐，也可以认为是1字节对齐。

#pragma pack(1)
struct stdataA
{
    // int a;
    char b;
    short c;
};
#pragma pack()

struct stdataB
{
    // int a;
    char b;
    short c;
}__attribute__ ((aligned(8)));

#endif