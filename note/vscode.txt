
https://code.visualstudio.com/          官网
https://code.visualstudio.com/updates   官方历史版本以及更新记录

vscode一旦连接服务器之后，怎样切换回本地
  在vscode界面，左上角“文件”-->"打开文件夹"（注意：此处只能是打开文件夹，如果是打开文件，则还是在服务器端）
    -->从本地选择一个文件夹，打开即可切换到本地。
列编辑功能说明
  Shift键+Alt键+鼠标左键
自由多行选择
  Alt键+鼠标左键拖动选择各行的部分内容
trim行尾空格
  file->preferences->settings->搜索trim->选定 Trim Trailing Whitespace

配置pthread编译条件
task.json中args栏增加 “-pthread” 如下
"args":
            "-pthread",

windows本地 vscode+MinGW配置
  1 下载安装vscode：https://code.visualstudio.com/Download
  2 安装cpptools工具
  3 下载MinGW
    下载地址：https://sourceforge.net/projects/mingw-w64/files/
    下载的文件：进入网站后不要点击 "Download Lasted Version"，往下滑，找到最新版的 "x86_64-posix-seh"。
    安装MinGW：下载后是一个7z的压缩包，解压后移动到你想安装的位置即可。我的安装位置是：D:\2Software\mingw64
  4 配置环境变量
    配置环境变量：Path环境变量增加D:\2Software\mingw64\bin。
    验证一下环境变量是否配置成功
      按下 win + R，输入cmd，回车键之后输入g++，再回车，如果提示以下信息[1]，则环境变量配置成功。如果提示以下信息[2]，则环境变量配置失败。
      [1]：g++: fatal error: no input files
      [2]：'g++' 不是内部或外部命令，也不是可运行的程序或批处理文件。
  5 使用简单的.cpp文件配置C++环境
      新建空文件夹Code
      打开VScode --> 打开文件夹 --> 选择刚刚创建的文件夹Cozde
      新建test.cpp文件(以最简单的 HelloWorld.cpp 为例)
      进入调试界面添加配置环境，选择 C++(GDB/LLDB)，再选择 g++.exe，之后会自动生成 launch.json 配置文件
      编辑 launch.json 配置文件
      返回.cpp文件，按F5进行调试，会弹出找不到任务"task g++"，选择 "配置任务"，会自动生成 tasks.json 文件
      编辑 tasks.json 文件
  6 运行
      返回 HelloWorld.cpp 文件，按F5调试，发现完全OK了！

vscode连接远程Linux服务器
  1 在vscode的扩展商店中搜索ssh 安装 Romote-SSH
  2 安装完成后 左侧多一个小图标 RemoteExplorer
  3 点击SSH栏 右上方+号
  4 然后在此输入<用户名>@<服务器ip地址>然后回车
  5 点击第一项即可 即xxx\.ssh\config
  6 打开配置文件，这里可以修改显示的名称
  Host 标签名字
    HostName 远程ip地址
    User 登录用户名
    Port 22       默认是22 可以没有这行
    IdentityFile C:\Users\wangjingang202_55893\.ssh\id_rsa  指定私钥 免密登录 同时需要将公钥拷贝至服务器~/.ssh/authorized_keys
  7 这里右击，选择在当前窗口中连接
  8 此时会让你输入密码，输入刚才的用户名对应的密码即可
  9 连接上后，点击左侧的蓝色按钮选择一个你想打开的文件夹即可
  10 断开连接，在菜单栏点击file，选择断开远程连接即可

vscode无法远程连接服务器的解决办法
  1 用mobaXterm、putty等工具都可以正常连接服务器，用vscode突然不行了
    打开C盘下的/user/<user_name>/.ssh文件夹，找到known_hosts文件，用记事本打开该文件
    10.248.14.215 XXX  (ip就是我的服务器ip)有3行 这三行全都删掉
    重启vscode连接服务器，就一切正常了。
  2 在服务器端删除.vscode-server文件夹(一般在用户目录下)   (这个方法没有试)
    打开服务器网络(一般自动打开)
    再用VS Code 重新连接服务器就好了
    


[wjg]vscode--------------------------------------------------------------------------------
乱码问题
  问题一：打开文件后，中文显示出现乱码
    注意：当打开文件，其内容中文乱码时，不要Ctrl+S保存文件。因为那样会保存乱码，使其无法恢复。
    解决方法一：点击右下角中的“UTF-8”，选择“通过编码重新打开”，输入“GB 2312”，选择“Simplified Chinese(GB 2312)”即可。
      点击UTF-8 > 通过编码重新打开 > Simplified Chinese(GB 2312) > 中文正确显示
    解决方法二：打开“查看”>“命令面板”，输入“setting”， 选择“首选项：打开设置(json)”，输入如下语句并保存即可。
      打开控制面板 > 首选项：打开设置(json) > 输入语句："files.autoGuessEncoding": true > 成功显示
    提示：设置完成后，若文件还是中文乱码，关闭文件重新打开即可。
  
  问题二： 终端命令行运行时出现中文乱码
    g++ 1.cpp -o 1.exe; ./1.exe
    终端中文乱码
    原因：在终端使用使用命令行运行程序时，文件为UTF-8编码，而非GB2312编码。
    解决方法一：在命令行前面添加chcp 65001用于换码。
      chcp 65001; g++ 1.cpp -o 1.exe; ./1.exe  >  命令行运行结果
    解决方法二：点击右下角的"UTF-8"，选择”通过编码保存“，输入”GB 2312“，选择“Simplified Chinese(GB 2312)”，将UTF-8转换成GB 2312。
      通过编码保存 > 填写：Simplified Chinese(GB 2312) > 中文字符成功显示
  
  问题三：点击运行键运行程序出现中文乱码
    原因：从终端可发现，点击运行键运行程序与直接用命令行运行程序相类似，其中文乱码也是因为使用UTF-8编码。
    解决方法一：打开“查看”>“命令面板”，输入“setting”， 选择“首选项：打开设置(json)”，在"code-runner.executorMap"中的“cpp”添加“chcp 65001”。
    首选项：打开设置(json)；
    修改前："cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
    修改后："cpp": "cd $dir && chcp 65001 && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
    成功显示。
    解决方法二：点击右下角的"UTF-8"，选择”通过编码保存“，输入”GB 2312“，选择“Simplified Chinese(GB 2312)”，将UTF-8转换成GB 2312。
    填写：Simplified Chinese(GB 2312) > 成功显示。
  
  问题四： 调试时，终端出现中文乱码或无法输出中文
    原因：文件使用GB2312编码，而非UTF-8编码。
    解决方法：点击右下角的"GB2312"，选择”通过编码保存“，输入”utf-8“，选择”UTF-8 utf8“即可。
    填写：GB2312 > 通过编码保存 > 选择UTF-8 > 成功调试
  
  总结
  打开文件时，设置"files.autoGuessEncoding": true，令VS Code自动选择合适编码方式；
  通过命令行或运行键运行程序时，若是UTF-8编码会造成中文乱码，需要在运行命令中添加“chcp 65001”，或者将UTF-8编码转换成GB2312编码；
  VS Code默认编码是UTF-8，调试时也是使用UTF-8，可以输出中文。

配置vscode 远程开发 免密登录
  总结：
    1.本机安装ssh，check ssh是否安装成功： ssh 或者 ssh-V
    2.vscode安装remote development 插件
    3.配置密钥
      1.在本地机器生成密钥对(公钥+私钥)：ssh-keygen
      2.私钥放本机，公钥放远程(~/.ssh路径下)
      3.在远程机器用公钥生成authorized_keys：
        进入home目录下的.ssh文件夹：cd ~/.ssh
        cat id_rsa.pub >> authorized_keys
      4.vscode config文件加入本机私钥路径

  细节如下：
    1.本地机器安装ssh（windows系统）
      SSH全称Secure Sheel，是一个远程连接的协议，需要在本机上安装ssh才能够远程连接到server。
      check ssh是否安装成功：
        在terminal中输入ssh ，出现如下信息表明安装成功
        或者输入ssh -V，出现已安装的ssh版本，代表安装成功
    2.vscode安装remote development 插件
      点击： Extensions （vscode界面左侧）
      在搜索框中搜索 remote development，点击安装
      Enable 该插件
    3.配置密钥
      用 ssh-keygen 命令来生成密钥对：
        id_rsa.pub是公钥，id_rsa是私钥。
        如果多平台都要使用ssh，则需要修改密钥文件名，避免冲突
        注：ssh-keygen 回车后第一个输入的为文件名  第二个是密码短语(可为空 用于登录服务器时使用) 并将公钥私钥存储在当前文件夹
      公钥放server(远程主机)上，私钥放本机上。
        进入刚才密钥对保存的folder（C:\Users\10747/.ssh），把.pub后缀的公钥传输到server上（可以用scp命令）
        公钥放在server的~/.ssh文件夹中
      进入server 的~/.ssh 文件夹，使用 cat 命令，用公钥文件来生成 authorized_keys。
        cat id_rsa.pub >> authorized_keys
        生成完之后输入 ls 可看到当前路径多了一个authorized_keys文件。
      修改vscode的config file，加入 IdentityFile 和对应的本机私钥路径
        打开.ssh/config文件
        修改.ssh/config文件：加入IdentityFile的路径（也就是私钥在本机的所在位置）
        如：IdentityFile C:\Users\wangjingang\.ssh\id_rsa_95
    
  这时候再用vscode登录server就不用输入密码了！

    
    
    