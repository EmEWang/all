
https://ubuntu.com/                    # 官网
https://ubuntu.com/download/desktop    # 官网 下载
https://cn.ubuntu.com/download/desktop # 官网中文
https://forum.ubuntu.org.cn/index.php?sid=73efafc6109bfd8b17b53bec37cc1622  # 中文论坛

https://www.debian.org/doc/user-manuals    # Debian 用户手册
https://www.debian.org/doc/manuals/debian-handbook/apt.zh-cn.html  # Debian 管理员手册

http://mirrors.163.com/    # 网易开源镜像
https://developer.aliyun.com/mirror/ # 阿里云开源镜像


Ubuntu 20.4版本镜像下载国内地址 http://mirrors.aliyun.com/ubuntu-releases/20.04/
       其他版本                http://mirrors.aliyun.com/ubuntu-releases/

ubuntu/debian    apt-get   #软件包管理工具


怎么禁止/开启Ubuntu自动更新升级
system setting齿轮->Software & Updates->Update->自动检查更新下拉框->从不


Ubuntu 16.04 /mnt/hgfs/下不显示共享文件夹的处理办法
  1.apt-get install open-vm-tools
  2.vmhgfs-fuse .host:/ /mnt/hgfs
    sudo chmod o+w /mnt/hgfs  若失败 添加权限
    sudo mkdir /mnt/hgfs      若没有这个文件夹
但重启之后会失效，需要重新执行vmhgfs-fuse .host:/ /mnt/hgfs

解决重启后共享文件夹失效
vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other -o uid=1000 -o gid=1000 -o umask=022   # sudo vi /etc/rc.local 文件尾部插入
                                                                                    sudo chmod +x /etc/rc.local 加上权限
.host:/ /mnt/hgfs  fuse.vmhgfs-fuse allow_other 0 2     # sudo vi /etc/fstab 文件尾部插入


ubuntu关闭和开启图形界面
图像界面的关闭和开启是安装显卡驱动的条件之一
关闭图形界面
sudo systemctl set-default multi-user.target
sudo reboot

开启图形界面
sudo systemctl set-default graphical.target
sudo reboot


ubuntu上安装http-server
sudo apt install npm             # 1安装npm包管理器
sudo npm install http-server -g  # 2 -g表示全局安装，这样它就可以从终端运行，否则在终端输入http-server将提示找不到此命令
http-server                      # 启动http-server    Hit CTRL-C to stop the server

sudo apt-getinstall gcov         # 安装 gcov
sudo apt-getinstall lcov         # 安装 lcov


addr2line: getting error "DWARF error: section .debug_str is larger than its filesize  错误
https://bugs.launchpad.net/ubuntu/+source/binutils/+bug/1977958
https://stackoverflow.com/questions/71410361/what-to-do-with-dwarf-error-section-debug-info-is-larger-than-its-filesize


向日葵
https://sunlogin.oray.com/download/linux?type=personal&ici=sunlogin-navigation
sudo dpkg -i 文件名.deb   # 安装
sudo dpkg -r sunloginclient  # 卸载
/usr/local/sunlogin/bin/sunloginclient # 启动命令
966 690 042 123456        # 账户





gcc for arm几个版本区别
区别无外乎几个：大端 or 小端、ARMv7 or ARMv8、32位 or 64位、裸机 or 嵌入式Linux
multiarch name             syscall ABI  instruction set  endian-ness  word size  description             spec documents
aarch64-linux-gnu          linux        ARMv8            little       64         aarch64 Linux Platform  AAPCS64 (ARM IHI 005A)1ELF for the ARM 64-bit Architecture2
aarch64_be-linux-gnu       linux        ARMv8            big          64         aarch64 Linux Platform  AAPCS64 (ARM IHI 005A)1ELF for the ARM 64-bit Architecture2
aarch64-linux-gnu_ilp32    linux        ARMv8            little       32         aarch64 Linux Platform
aarch64_be-linux-gnu_ilp32 linux        ARMv8            big          32         aarch64 Linux Platform
arm-linux-gnu              linux        ARMv7            little       32         Old ARM ABI             APCS (ARM DUI 0041 chapter 9)4
arm-linux-gnueabi          linux        ARMv7            little       32         ARM EABI, soft-float    AAPCS (ARM IHI 0042D)5ARM GNU/Linux ABI Supplement6
arm-linux-gnueabihf        linux        ARMv7            little       32         ARM EABI, hard-float    AAPCS (ARM IHI 0042D)5 andXXXXX (TBD)
armeb-linux-gnueabi        linux        ARMv7            big          32         ARM EABI, soft-float    AAPCS (ARM IHI 0042D)5ARM GNU/Linux ABI Supplement6
armeb-linux-gnueabihf      linux        ARMv7            big          32         ARM EABI, hard-float    AAPCS (ARM IHI 0042D)5 andXXXXX (TBD)
armv8l-linux-gnueabihf     linux        ARMv8            little       32         ARMv8 EABI, hard-float
arm-eabi                   Bare-Metal   ARMv7            little       32         ARM EABI, soft-float
armeb-eabi                 Bare-Metal   ARMv7            big          32         ARM EABI, soft-float
aarch64-elf                Bare-Metal   ARMv8            little       64         ARMv8 EABI, hard-float
aarch64_be-elf             Bare-Metal   ARMv8            big          64         ARMv8 EABI, hard-float
————————————————

Ubuntu 20.04安装arm-linux-gcc交叉编译器
https://blog.csdn.net/wu10188/article/details/86542418
https://blog.csdn.net/weixin_45866346/article/details/121765262  Ubuntu20.04配置交叉编译环境arm-linux-gcc
https://blog.csdn.net/lile777/article/details/81389098
https://github.com/riscvarchive/riscv-fesvr/blob/68c12d06ebbdfe20856b886570822fe66804fd26/scripts/config.sub#L244
在线安装
sudo apt-get install gcc-arm-linux-gnueabihf    # arm-linux-gcc的安装 编译的台架上不能运行
sudo apt-get install g++-arm-linux-gnueabihf    # arm-linux-g++的安装 安装的是 arm-linux-gnueabihf 系列
sudo apt-get remove gcc-arm-linux-gnueabihf     # arm-linux-gcc的卸载
sudo apt-get remove g++-arm-linux-gnueabihf     # arm-linux-g++的卸载

apt-cache search aarch64
sudo apt install gcc-8-aarch64-linux-gnu        # 找到合适的版本安装，带版本号的
sudo apt install g++-8-aarch64-linux-gnu

sudo apt install gcc-aarch64-linux-gnu          # 编译的台架上能运行  安装一个不带版本号的
sudo apt install g++-aarch64-linux-gnu          # 安装的是 aarch64-linux-gnu 系列

aarch64-linux-gnu-gcc -v                        # 测试是否安装成功
aarch64-linux-gnu-g++ -v

手动安装
arm-linux-gcc-4.4.3.tar.gz  32位 https://pan.baidu.com/s/1rAIBASIRZAXl-P1UOW9JVg mgrb
arm-linux-gcc-4.6.4-arm-x86_64.tar.bz2  64位  https://pan.baidu.com/s/1xuh8M8bQHfZt_w6h4vRKeg uk85
1 下载好的安装包移动到 /tmp
2 sudo tar -xjvf /tmp/arm-linux-gcc-4.6.4-arm-x86_64.tar.bz2 -C /opt/tool   # 解压
  /opt/tool/arm-arm1176jzfssf-linux-gnueabi # gcc-4.6.4所在的位置
3 sudo mkdir /usr/local/arm # 创建一个新目录
  sudo chmod 777 /usr/local/arm # 解放全部权限
4 sudo cp -r /opt/tool/arm-arm1176jzfssf-linux-gnueabi/gcc-4.6.4 /usr/local/arm  # gcc-4.6.4目录复制到arm
5 /etc/profile 最后添加两行 配置环境变量和库变量，目的是以后可以在任何位置使用该交叉编译器
  export PATH=$PATH:/usr/local/arm/gcc-4.6.4/bin # 添加执行程序的环境变量
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/arm/gcc-4.6.4/lib # 库文件的路径
6 source /etc/profile # source命令重新加载生效该配置文件
7 arm-linux-gcc -v # 检验是否安装成功

arm-linux-gcc 1.c -o pp   # 能编译成功说明已经完美安装
file pp                   # 查看编译后的是不是arm的可执行文件

若做完上述步骤还是不能用arm-linux-gcc的话，出现如下所示错误
  error while loading shared libraries: libmpfe.so.4 cannot open shared object file:No such file or directory
/home/用户名/.bashrc" 添加 /etc/profile 中一样的两行



machine `aarch64' not recognized
https://github.com/li3tuo4/rc-fpga-zcu/issues/6
A quick fix is to insert a newline "| aarch64 \ " after this line in config.sub


configure交叉编译 说明
https://blog.csdn.net/u010871058/article/details/71173501
交叉编译某个应用程序时，通常需要 ./configure 来生成对应的 Makefile
./configure 最关键的三个选项是：
--host=HOST      # 指定软件运行的系统平台.没指定则运行`config.guess'来检测.
--build=BUILD    # 指定软件包安装的系统平台.没指定则默认使用'--host'值.
--target=GARGET  # 指定软件面向的系统平台.主要在程序语言工具如编译器和汇编器上下文中起作用.没指定则默认使用'--host'值.

--prefix=/work/gaoht/gsoap/target  # 指定软件安装的位置
LDFLAGS="-L/usr/non-standard-path/python/lib"  # 指定动态库的路径

一般而言，只要指定 --host 就可以了  记住： --host 指定的是交叉编译工具链的前缀
aarch64-linux-gnu-g++ demo.cpp -o xxx  # 手动命令方式编译
./configure --host=aarch64-linux-gnu   # configure方式编译 编译器为aarch64-linux-gnu-g++  host中为前缀
  确保交叉编译工具链的bin文件在PATH环境变量里 echo $PATH 没有路径则添加

如在 i686 开发机上交叉编译出 ethtool，让其在powerpc开发板上运行
http://blog.chinaunix.net/uid-24148050-id-2213969.html
1 下载源代码并解压
#cd /home/wanghui/
#tar xvfz ethtool-6.tar.gz
#cd ethtool-6

2 交叉编译
#echo $PATH     # 确保交叉编译工具链的bin文件在PATH环境变量里
/usr/local/bin:/bin:/usr/bin: /opt/montavista41/montavista/cge/devkit/ppc/85xx/bin/ :/home/wanghui/bin
#./configure --host= ppc-linux
#make

3 查看生成文件
#file ethtool
ethtool: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.2.5, dynamically linked (uses shared libs), not stripped
#交叉编译失败，还是X86的bin文件，肯定是configure出了问题，导致Makefile用的不是交叉编译工具链的gcc

4 查看config.log
有这么一句：
configure:1790: checking for ppc-linux-gcc
configure:1819: result: no                 <-- 没找到ppc-linux-gcc
configure:1828: checking for gcc
configure:1844: found /usr/bin/gcc

cd /opt/montavista41/montavista/cge/devkit/ppc/85xx/bin  # 原来是 ppc_85xx-gcc,所有bin文件前缀是 ppc_85xx

5 重新交叉编译
#./configure --host= ppc_85xx
#make

6 查看生成文件
#file ethtool
ethtool: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (SYSV), for GNU/Linux 2.4.17, dynamically linked (uses shared libs), not stripped

查看config.log
configure:1662: checking for ppc_85xx-strip
configure:1678: found /opt/montavista41/montavista/cge/devkit/ppc/85xx/bin//ppc_85xx-strip
configure:1688: result: ppc_85xx-strip
configure:1757: checking whether to enable maintainer-specific portions of Makefiles
configure:1766: result: no
configure:1790: checking for ppc_85xx-gcc
configure:1806: found /opt/montavista41/montavista/cge/devkit/ppc/85xx/bin//ppc_85xx-gcc
configure:1816: result: ppc_85xx-gcc

原因：
以前交叉编译器的前缀基本都是arm-Linux-,configure中的host参数设置为--host arm-linux
而新环境是arm-none-linux-gnueabi-，改为--host arm-none-linux-gnueabi就可以了。




ubuntu 源更新 sources.list
https://cizixs.com/2014/04/10/ubuntu_repository_format_explained/
1 源格式
  deb uri distribution [component1] [component2] […]   # 基本格式 举例如下
  deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse
  deb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse

  deb/deb-src                    # 软件包格式  分别表示 二进制包/源码包
  http://mirrors.163.com/ubuntu/ # 软件包url  ARCHIVE_ROOT
  focal/focal-updates/focal-focal/focal-backports/focal-proposed  # 发行版 DISCTRIBUTION  在dists下的子文件夹
    严格来说不算是发行版版本代号，应该是Ubuntu系统发布之后，在此基础上进行的安全性更新的分类。
  main/restricted/universe/multiverse  # ubuntu组件 软件包自由度分类目录  debian组件：main/contrib/non-free/non-us

  main:ubuntu官方支持免费软件包  包括了自由软件、可以被自由发布的软件和被Ubuntu团队完全支持的软件。
    其中包括了大多数流行的和稳定的开源软件，当您安装Ubuntu时默认安装的就是这些软件。
  restricted:有限所有权  不免费，但是正规支持的,是专供普遍用途，而且没有自由软件版权，但依然被Ubuntu团队支持的软件。
    请注意，因为不能直接修改软件，因而我们可能不能提供完全的技术支持，即便如此，我们还能向实际作者反馈Bug报告。
  universe: 社区提供支持自由软件 免费，但不是正规支持的, 是整个自由、开源Linux世界的缩影。在“universe”组件中，
    你可以找到大多数开源软件，以及在开源版权下的软件，所有这些都是在公共源的基础上建立的。
    这些软件都是使用“main”中的组件编写的，它们能与“main”组件相安无事地共同运行，但它们没有安全升级的保障。
    “universe”组件包含了数以千计的软件。虽然是公共的，用户必须明白它们与稳定的Ubuntu核心的软件的差异和不稳定。
  multiverse:版权限制  不免费，不支持,包含了“不自由”的软件，这意味着这些软件不满足 Ubuntu相对于“main”组件的各种版权政策。
    当您使用这些软件时，如何调整各种权力以及遵重版权所有者的问题，就完全依靠您自己把握了。 这些软件不被我们支持，
    而且通常不能被修改和更新，您将自己承担任何风险。 现在，作为以上位置的新增功能，实际上新的软件包都存储在pool目录中

  main: Debian 里最基本及主要且符合自由软件规范的软件 ( packages )。
  contrib: 软件本身免费，但依赖的软件包不免费。
  non-free: 非自由软件
  non-us: 非美国地区，可能有加密、专利等

  访问http://mirrors.163.com/ubuntu 会发现一个资源目录,重要的文件(夹)和解释
  dists:发行版目录（distributions），此处是获得 Ubuntu 发布版本（releases）和已发布版本（pre-releases）的软件包的正规途径。文件夹里存储的是关于软件包的信息数据，包括：文件名称、大小、位置、校验码等。有些旧软件包及 Contens-*.gz Packages.gz 等文件仍在其中。存在于dists目录下的物理目录名，例如focal-updates和focal-security，就是“附加的仓库”。当某个Ubuntu发行版处于维护阶段。将包的必要升级和安全更新放在附加的仓库里。其附加仓库通常有“版本代号-updates”、“版本代号-security”、“版本代号-proposed”等等。dists目录包含的全是Ubuntu发行版目录及其附加仓库目录（如：focal、focal-update、focal-security、focal-backports就是Ubuntu focal发行版目录及其附加仓库目录）。

  pool:具体的软件包存放目录，单独把文件放在pool文件夹里是为了防止文件的重复。所有 Ubuntu 发布版及已发布版的软件包的物理地址。软件包均放进一个巨大的“池子（pool）”，按照源码包名称分类存放。为了方便管理，pool目录下按属性再分类（main、restricted、 universe和multiverse），分类下面再按源码包名称的首字母归档。这些目录包含的文件有：运行于各种系统架构的二进制软件包，生成这些二进制软件包的源码包。

  通常一个源应包括focal/focal-updates/focal-security/focal-backports/focal-proposed多条语句,相应处替换即可.如果需要源码,在重复一边deb-src即可
  我们知道Ubuntu还有其他的附加仓库，Ubuntu附加仓库的命名格式是“版本代号-限定词”，限定词是这update、security、proposed、backports四个词中的一个，比方说版本代号focal和限定词update组合就是focal-update附加仓库，focal和security组合就是focal-security附加仓库，以此类推可以自行写出Ubuntu所有的附加仓库的目录名称。
  在sources.list文件里只有一条包含发行版仓库focal的软件源还不够，我们还要写出包含其他4个附加仓库的软件源，只要把已经写好的软件源中的focal依次替换成focal-update、focal-security、focal-proposed、focal-backports即可，下面是完整的包含所有附加仓库的软件源

  Release/InRelease
  文件位于$ARCHIVE_ROOT/dists/$DISCTRIBUTION 文件夹内，InRelease文件是内部自认证的，而Release文件需要伴随Release.gpg文件出现。这个文件包含该发布版（所在的文件夹）的索引文件和对应的hash。内部所列文件的位置是相对该文件的。比如上面的的source.list内容，为了获取main组件，apt会扫描http://mirrors.163.com/ubuntu/dists/precise/Release 文件得到main/binary-amd64/Packages.gz组合成最终的地址http://mirrors.163.com/ubuntu/dists/precise/main/binary-amd64/Packages.gz。这里面就是precise发布版里main组件的所有软件索引。

  以binary-$arch命名的文件夹里是二进制文件的目录，源文件的目录在source文件夹。
  Package列出的文件是相对于$ARCHIVE_ROOT的。
  Packages 和 Sources目录是是控制文件，包括索引、翻译和差异等。

  .deb文件是debian的包文件
  .dsc是debian的源码描述文件
  .tar是打包的文件
  .gz和.bz2是压缩的文件

2 更新/etc/apt/sources.list文件
  sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup #备份源列表
  sudo vim /etc/apt/sources.list   #用vim或其他编辑器打开

Ubuntu 官方更新服务器
deb http://archive.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse

Ubuntu官方提供的其他软件（第三方闭源软件等）：
deb http://archive.canonical.com/ubuntu/ trusty partner
deb http://extras.ubuntu.com/ubuntu/ trusty main

网易163更新服务器 http://mirrors.163.com/ubuntu/
阿里云更新服务器  http://mirrors.aliyun.com/ubuntu/
LupaWorld 更新服务器  http://mirror.lupaworld.com/ubuntu        X
Linux Story 更新服务器  http://mirrors.linuxstory.org/ubuntu/   X
贝特康姆软件技术有限公司  http://centos.bitcomm.cn/ubuntu
中国科学技术大学更新服务器  http://debian.ustc.edu.cn/ubuntu/    X
清华大学更新服务器  http://mirrors.tuna.tsinghua.edu.cn/ubuntu/
北京交通大学更新服务器  http://mirror.bjtu.edu.cn/ubuntu/
北京理工大学更新服务器  http://mirror.bit.edu.cn/ubuntu/         X
大连理工大学更新服务器  http://mirror.dlut.edu.cn/ubuntu/        X
上海交通大学更新服务器  http://ftp.sjtu.edu.cn/ubuntu/
华中科技大学更新服务器  http://mirrors.hust.edu.cn/ubuntu/       X
香港中文大学更新服务器  http://ftp.cuhk.edu.hk/pub/Linux/ubuntu  X
注 只需要替换掉 官方更新服务器中的 url即可 其他相同   X表示测试不通



apt和apt-get区别
https://itlanyan.com/apt-vs-apt-get-difference/
https://www.debian.org/doc/manuals/debian-faq/pkgtools.zh-cn.html#dpkg
apt 工具整合了 apt-get 和 apt-cache 的功能，并且默认具有更漂亮的彩色输出格式；
apt-get没有过时，如果要用于脚本或者需要使用高级用法，则仍然建议或必须使用 apt-get。

apt command       the command it replaces    function of the command
apt install 软件包 apt-get install 软件包      Installs a package and its all depends
apt remove 软件包  apt-get remove 软件包       Removes a package
apt purge         apt-get purge              Removes package with configuration
apt autoremove    apt-get autoremove         Removes unwanted packages
apt update        apt-get update             Refreshes repository index
apt upgrade       apt-get upgrade            Upgrades all upgradable packages 但不安装额外的软件包或卸载软件包
apt full-upgrade  apt-get dist-upgrade       Upgrades packages with auto-handling of dependencies 在必要的时候安装额外的软件包或卸载软件包
apt search 软件包  apt-cache search 软件包    Searches for the program
apt show 软件包    apt-cache show  软件包      Shows package details
apt depends       apt-cache depends          Shows package depends
apt show -a 软件包 apt-cache showpkg 软件包    打印软件包的详细信息
apt list -a 软件包 apt-cache policy 软件包
apt list --upgradable                         列出所有可以更新到新版本的软件包
                   apt-cache showpkg 软件包    打印软件包各可用版本的详细信息，以及反向依赖它的软件包

apt has a few commands of its own as well.
new apt command   function of the command
apt list          Lists packages with criteria (installed, upgradable etc)
apt edit-sources  Edits sources list


apt update                  # 更新软件包列表
apt install cmake           # Ubuntu中安装Cmake
apt install g++             # 安装 g++    g++ --version  验证是否安装完成
apt install gcc             # 安装 gcc    gcc --version
apt-get install build-essential  # gcc,g++,make的安装。build-essential是一整套工具,gcc,libc等 未测
  注:Ubuntu缺省情况下，没有提供C/C++的编译环境，需要手动安装。但如果单独安装gcc以及g++比较麻烦，故提供了build-essential
  apt-cache depends build-essential   # build-essential软件包。查看该软件包的依赖关系：
    build-essential
     |Depends: libc6-dev
      Depends: <libc-dev>
        libc6-dev
      Depends: gcc
      Depends: g++
      Depends: make
        make-guile
      Depends: dpkg-dev
  也就是说，安装了该软件包，编译c/c++所需要的软件包也都会被安装。因此如果想在Ubuntu中编译c/c++程序,只需要安装该软件包就可以了。

apt list --upgradable      # 查看可升级软件包列表
sudo apt upgrade           # 升级所有的软件
sudo apt install --only-upgrade package_name1 package_name2  # 只升级指定的软件包
sudo apt install --download-only package_name                # 只下载包以及依赖包 不安装
sudo rm -rf /var/cache/apt/archives               # 清空当前 APT 缓存
sudo vi /etc/apt/apt.conf.d/02nocache 写入下2行    # 关闭 APT 缓存，下载的软件包不保留
  Dir::Cache "";
  Dir::Cache::archives "";
apt-get clean              # 清除 /var/cache/apt/archives/ 和 /var/cache/apt/archives/partial/ 下所有deb文件
apt-get autoclean          # 类似 clean  它只会删除不会再下载且几乎无用的文件。它有助于防止缓存过大。
apt-get remove XX          # 删除指定的软件XX
apt-get autoremove XX      # 除了删除指定软件XX 还将删除所有不在使用的依赖项
apt --fix-broken install   # 出现依赖错误时修复


sudo apt install apt-rdepends         # 安装 apt-rdepends
sudo apt-cache depends postgresql-client-common  # 获取所有依赖

sudo dpkg --print-architecture        # 显示本机的architecture
sudo dpkg --add-architecture amd64    # 设置系统架构  可以是arm64  armhf   amd64等
sudo dpkg --print-foreign-architectures #
sudo dpkg --remove-architecture architecture # 去除architecture
# 下载所有依赖
for i in $(apt-cache depends postgresql-client-common:amd64 | grep -E 'Depends|Recommends|Suggests' | cut -d ':' -f 2,3 | sed -e s/'<'/''/ -e s/'>'/''/); do sudo apt-get download $i 2>>errors.txt; done
dpkg -i *.deb                          # 安装包
dpkg -r package.deb                    # 删除包
dpkg -l                                # 列出当前已安装的包
dpkg -c package.deb                    # 列出deb包的内容
dpkg --configure package               # 配置
dpkg -P package                        # 到移除软件包时，清除掉配置文件
dpkg-query -s packagecpu-name          # 查询已安装的软件包的状态


dpkg介绍
https://segmentfault.com/a/1190000011463440
1 dpkg  # package manager for Debian (debian系统的包管理工具)
dpkg is a tool to install, build, remove and manage Debian packages，dpkg，对已下载到本地和已安装的软件包进行管理。
dpkg 是Debian的一个底层包管理工具。上层的工具，如APT，被用于从远程获取软件包以及处理复杂的软件包关系。

2 deb软件包名规则
Package_Version-Build_Architecture.deb  # 格式
nano_1.3.10-2_i386.deb  # 例子
nano                    # 软件包名称(Package Name)
1.3.10                  # 版本(Version Number)
2                       # 修订号(Build Number)
i386                    # 平台(Architecture)  all 平台无关 适用于所有平台.如文本 网页 图片 媒体 pdf

3 dpkg软件包相关文件介绍
/etc/dpkg/dpkg.cfg      # dpkg包管理的配置文件 Configuration file with default options
/var/log/dpkg.log       # dpkg包管理的默认日志文件 (see /etc/dpkg/dpkg.cfg(5) and option --log)
/var/lib/dpkg/available # 存放系统所有安装过的软件包信息 List of available packages
/var/lib/dpkg/status    # 存放系统现在所有安装软件的状态信息
/var/lib/dpkg/info/     # 记安装软件包控制目录的控制信息文件

4 dpkg数据库
dpkg 用文本文件作为数据库来维护系统中软件，包括文件清单,依赖关系,软件状态 等等,在 /var/lib/dpkg/ 下
status中存储软件状态和控制信息;info/下备份控制文件，其下.list中记录安装文件清单，.mdasums保存文件的MD5编码。
dpkg -l       # 查询dpkg数据库（显示所有已安装的Deb包） 如下

名称                     版本                          体系结构     描述
+++-===================-=============================-============-===============>
ii  accountsservice     0.6.55-0ubuntu12~20.04.5      amd64        query and manip>

每条记录对应一个软件包，每条第1 2 3个字符，是软件包的状态标识，后边依此是软件包名称、版本号和简单描述。
第1个字符为期望值(Desired=Unknown/Install/Remove/Purge/Hold)
  u # Unknown状态未知,这意味着软件包未安装,并且用户也未发出安装请求.
  i # Install用户请求安装软件包.
  r # Remove用户请求卸载软件包.
  p # Purge用户请求清除软件包.
  h # Hold用户请求保持软件包版本锁定.
第2个字符是软件包的当前状态(Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend)
  n # Not软件包未安装.
  i # Inst软件包安装并完成配置.
  c # Conf-files软件包以前安装过,现在删除了,但是它的配置文件还留在系统中.
  u # Unpacked软件包被解包,但还未配置.
  f # halF-conf试图配置软件包,但是失败了.
  h # Half-inst软件包安装,但是但是没有成功.
  w # trig-aWait触发器等待
  t # Trig-pend触发器未决
第3个字符是标识错误状态,状态标识没有问题则为空. (Err?=(none)/Reinst-required (Status,Err: uppercase=bad))
  h # 软件包被强制保持,因为有其它软件包依赖需求,无法升级.
  r # Reinst-required，软件包被破坏,可能需要重新安装才能正常使用(包括删除).
  x # 软包件被破坏,并且被强制保持.
案例说明：
  ii # 表示系统正常安装了该软件
  pn # 表示安装了该软件，后来又清除了
  un # 表示从未安装过该软件
  iu # 表示安装了该软件，但是未配置
  rc # 该软件已被删除，但配置文件仍在

dpkg -l nano*
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Installed/Config-files/Unpacked/Failed-config/Half-installed
|/ Err?=(none)/Hold/Reinst-required/X=both-problems (Status,Err: uppercase=bad)
||/ Name           Version        Description
+++-==============-==============-============================================
ii  nano           1.3.10-2       free Pico clone with some new features
pn  nano-tiny               (no description available)
un  nanoblogger             (no description available)
系统中安装了 nano 版本为 1.3.10-2;安装过 nano-tiny, 后来又清除了; 从未安装过nanoblogger.


5 dpkg子命令
dpkg-deb、dpkg-divert、dpkg-query、dpkg-split、dpkg-statoverride、start-stop-daemon

dpkg可用作dpkg-deb的前端，处理本地包. 可以提取从.deb文件中提取软件包信息和数据.以下是dpkg-deb操作方式
  -b, --build    # dpkg-deb -b nano nano_1.3.10-2_ill.deb  重新打包
  -c, --contents # dpkg-deb -c nano_1.3.10-2_i386.deb  |more  列出软件包的内容
  -I, --info     # dpkg-deb -I nano_1.3.10-2_i386.deb  查看软件包的信息
  -f, --field    # 重新构建软件包,如nano(1.3.10)要满足以下依赖关系:dpkg-deb -f nano_1.3.10-2_i386.deb depends  depends 为对应查询段
  -e, --control  # dpkg-deb -e ./nano_1.3.10-2_i386.deb ./nano/DEBIAN  解压控制文件
  -x, --extract  # dpkg-deb -x ./nano_1.3.10-2_i386.deb ./nano   解压程序文件
  -X, --vextract, and --fsystarfile. # dpkg-deb -X ./nano_1.3.10-2_i386.deb ./nano   解压程序文件并列出软件包内容。

6安装
6.1 安装相关命令
dpkg -i package-name.deb          # 同--install  安装软件包 可被拆分为 解包和配置 两个对立的过程
dpkg --unpack package-name.deb    # 解包  解开软件包到系统目录但不配置,-R 参数可以是一个目录
dpkg --configure package-name.deb # 配置软件包
dpkg -c package-name.deb          # 列出包的内容
6.2 安装相关选项
-R, --recursive Recursively handle all regular files matching pattern *.deb found at specified directories and all of its
  如果指定--recursive 或 -R 选项，必须指定一个目录代替包文件
  1 This can be used with -i, -A, --install, --unpack
  2 --avail actions(递归地指向特定目录的所有安装包，可以结合-i, -A, --install, --unpack 与--avail一起使用)

安装步骤 dpkg -i ./nano_1.3.10-2_i386.deb
  1 导出新包的控制文件。
  2 如果相同包的另一个版本在新包安装前已经被安装，执行旧包的prerm脚本程序。
  3 如果由包提供，运行postinst脚本。
  4 解压新文件同时备份旧文件，如果遇到问题以便修复。
  5 如果另一个版本的同一个包在新包安装前已经安装，执行旧包的postrm脚本。
    注意：执行postrm 脚本后执行新文件的preint脚本，因为写新文件的同时移除旧文件。
  6 配置软件包。

dpkg 安装软件包时,主要分为两个阶段:首先解包; 然后运行postinst控制脚本(如果有的话),这就是所谓的配置阶段.
当完成软件包当解包后, dpkg 的--install选项自动调用配置阶段.

dpkg --unpack nano_1.3.10-2_i386.deb  # 解包

dpkg -l nano
  iU  nano           1.3.10-2       free Pico clone with some new features
说明此时系统中安装了nano 包, 但是未经配置.

解包可能包括包以下步骤:
  将控制文件解压到临时目录.
  运行 preinst(如果有的话). 通常为停止相关服务.
  解压配置文件到 /etc 目录, 并添加.dpkg-new 后缀, 以防止冲突.
  解压 data.tar.gz 到系统根目录,(--root=dir).
  将控制文件解压到 /var/lib/dpkg/info 目录并添加软件名前缀. 对数据库进行更新.
  数据库中将软件包的状态设置为"unpacked".
仅仅解包, 并不能确保软件可以正常运行.

dpkg --configure nano      # 配置

dpkg -l nano
  ii  nano           1.3.10-2       free Pico clone with some new features
如输出所示, nano 已经正常安装.

软件解包后, 还需要对其进行调整, 比如根据实际情况对配置文件进行修改. 这一步通常是在安装过程中自动进行的,
  当然可以手动调用, 这次用到的是软件名, 而不是deb文件名.
通过命令“ dpkg -L nano "可以得以验证
这一过程可能包括以下步骤:
  询问对配置文件的处理方法, 覆盖当前版本, 还是不做处理.(当软件升级时会碰到这种情况)
  运行 postinst 脚本
  将软件包标记为 "installed"
如果想再次修改配置选项, 可以运行:dpkg-reconfigure nano


7 移除软件包
dpkg -r package-name # 同--remove  移除软件包，但保留其配置文件
dpkg -P package-name # 同--purge   清除软件包的所有文件(removes everything,including conffiles)

dpkg -r nano
  首先运行 prerm 脚本(如果有的话).
  然后, 保留配置文件, 其他文件全部删除.
  删除 /var/lib/dpkg/info 目录下软件包的所有配置文件, 保留postrm和list文件.
  最后, dpkg 在数据库中将软件状态修改为删除.
dpkg -l nano
  rc  nano    1.3.10-2     free Pico clone with some new features

-P or --purge 删除所有的包括配置文件。主要删除的是/var/lib/dpkg/status中指定文件。
  给出的是-a或者--pending而不是包的名字，所有的包都被打开(解压缩)，但是在/var/bin/dpkg/status文件中标记被移除或清除的，
  将会分别被移除或清除(但是在 /var/bin/dpkg/status文件中标记“要”移除)
dpkg -P nano
  删除所有的文件. 所有的文件都被解除了（从系统中删除了）.
  运行postrm脚本.如果还存在,运行postrm脚本.
  删除 postrm 和 list 文件.保留的两个文件,从系统中解除postfix.postrm和postfix.files.
  在dpkg的数据库中将软件包标记为未安装
dpkg -l nano
  pn  nano                                          (no description available)
pn 这意味着软件包实际上是被清除了,但是在数据库中还有这个软件包的记录.
因此,pn 明确指出以前安装过 nano, 在软件包数据库中出现过,并且现在已被完全清除.


dpkg-reconfigure
重新配制一个已经安装的包裹,如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面).
你能够重新配制 debconf 它本身,如你想改变它的前端或提问的优先权.如重新配制 debconf ,使用一个 dialog 前端,简单运行:
dpkg-reconfigure --frontend=dialog debconf (如果你安装时选错了,这里可以改回来哟
echo " hold" | dpkg --set-selections
设置  的状态为 hlod (命令行方式)
dpkg --get-selections ""
取的  的当前状态 (命令行方式)
支持通配符,如:

Debian:~# dpkg --get-selections *wine*
libwine hold
libwine-alsa hold
libwine-arts hold
libwine-dev hold
libwine-nas hold
libwine-print hold
libwine-twain hold
wine hold
wine+ hold
wine-doc hold
wine-utils hold
dpkg-source -x
如果你手工下载了一个程序的源码包，其中包含了几个类似 .orig.tar.gz , .dsc ,
以及 .diff.gz 之类的文件，
那么你就可以对 .dsc 文件使用这个命令来 unpack 源码包。
dpkg-buildpackage
从 Debian 源码树建立一个deb包。你必须在source tree的主目录才能生效。例如：
dpkg-buildpackage -rfakeroot -uc -b
这里 '-rfakeroot' 指定命令使用 fakeroot 程序来模仿 root 权限 (来实现所有者(ownership)目的)，
'-uc' 表示 "Don't cryptographically sign the changelog", '-b' 代表只建立二进制包.
debuild
一个快速打包脚本类似 dpkg-buildpackage ,能自动的识别是否使用 fakeroot,
同时为你运行 lintian 和 gpg
修正倚赖关系
dpkg --configure --pending
如果dpkg在apt-get install upgrade dist-uptradeing 的时候出错退出，
尝试使用此命令来配置已经unpack的包。
然后再用 apt-get install ，upgrade, or dist-upgrade -f ，
然后再用 apt-get install, upgrade, or dist-upgrade.
可能会重复多次，这样通常可以解决大多数的依赖性问题。
(同时,如果提示由于某种原因需要某个特定的包裹,你可以常识安装或卸载这个包)
apt-get install -f
apt-get upgrade -f
apt-get dist-upgrade -f
尝试修正上述过程中出现依赖性关系
注意 apt-get install -f 不需要  作为参数。



8 查询
dpkg --info package-name # 查看指定包的详细信息
dpkg -l package-name-pattern # --list, 查看系统中软件包名符合pattern模式的软件包
dpkg -L package-name # --listfiles, 查看package-name对应的软件包安装的文件及目录
dpkg -p package-name # --print-avail, 显示包的具体信息
dpkg -s package-name # --status, 查看package-name（已安装）对应的软件包信息
dpkg -S filename-search-pattern # --search,从已经安装的软件包中查找包含filename的软件包名称

dpkg -l           # 查看系统中软件包状态, 支持模糊查询 同 dpkg-query -l
  dpkg -l *nano*  # 列出系统上安装的与nano相关的软件包
dpkg -L nano      # 查看nano安装到系统中的文件 即 查询系统中属于nano的文件
  dpkg --listfiles nano 同上  dpkg-query -L nano 同上
dpkg -s nano      # 查看软件nano的详细信息 同 dpkg-query -s nano
dpkg -S nano      # 查看某个文件的归属包 同 dpkg-query -S nano
dpkg --help       # 更多dpkg的使用方法  或man dpkg
dpkg --info package-name | grep Depends # 查看包的依赖关系
  dpkg -i package-name # 安装 当有依赖不满足时 也会列出来



1 apt简介
当依赖关系不满足时，dpkg需要手动解决；而apt解决了这个问题，
  linux distribution 将软件放置到对应的服务器中，分析软件的依赖关系，并记录下来，
  当客户端安装软件时，通过清单列表与本地dpkg已存在的软件数据相比，就能从网络端获取所需的具有依赖属性的软件。

2 工作原理
Ubuntu采用集中式的软件仓库机制，将软件包分门别类地存放在软件仓库中，进行有效地组织和管理。
  并将软件仓库置于镜像服务器中，这样用户能随时获得最新版本的安装软件包。
  对于用户，镜像服务器就是软件源(Reposity)，用/etc/apt/sources.list文件配置源。
  为了效率，为这些软件资源列个清单(建索引文件)，以便本地主机查询。
apt-get update 刷新软件源，更新软件包列表。扫描每一个源服务器，并为该服务器所具有软件包资源建立索引文件，
  存放在本地的/var/lib/apt/lists/中。apt-get安装、更新时，都将依据这些索引文件，向软件源服务器申请资源。

apt-get的更新过程
  1 执行apt-get update
  2 分析/etc/apt/sources.list
  3 寻找list中对应的Packages/Sources/Release列表文件，有则更新之，存入/var/lib/apt/lists/
  4 apt-get install 相应的包 ，下载并安装。

apt-get install原理
  1 扫描本地存放的软件更新列表(/var/lib/apt/lists/)，找到最新版本的软件包
  2 进行软件包依赖关系检查，找到支持该软件正常运行的所有软件包
  3 从软件源所指的镜像站点下载相关的软件包
  4 解压软件包，并自动完成应用程序的安装和配置

3 apt相关文件
/var/lib/dpkg/available # 包描述信息  当前系统所用源中的所有包,包括已安装和未安装的包
/etc/apt/sources.list   # 源配置  apt-get install 时，去这些站点下载软件包到本地并安装
/var/cache/apt/archives # 包存放目录  apt-get install 时，包的临时存放路径
/var/lib/apt/lists/     # 源对应的包索引  apt-get update下载软件列表，并保存到该目录

4 apt-get
apt-get [opt] cmd    # 格式
  -h                 # 帮助
  -q                 # 静默安装 输出到日志 无进展指示
  -qq                # 不输出信息，错误除外
  -d                 # 仅下载 不安装或解压归档文件
  -s                 # 不实际安装。模拟执行命令
  -y                 # 对所有的询问选是，不提示
  -f                 # 尝试修复损坏的系统关系
  -m                 # 如果归档无法定位，尝试继续
  -u                 # 同时显示更新软件包的列表
  -b                 # 获取源码包后编译
  -V                 # 显示详细的版本号
  -c=?               # 阅读此配置文件
  -o=?               # 设置自定的配置选项，如 -o dir::cache=/tmp
  --reinstall        # 重新安装已安装但可能存在问题的软件包
  --install-suggests # 同时安装apt给出的建议安装包

常用命令：
1）apt-get update          # 更新源 也就是源的软件包列表
2）apt-get upgrade         # 更新所有已经安装的软件包 但存在依赖问题的不升级
   apt-get dist-upgrade    # 更新所有已经安装的软件包 解决依赖并升级
3）apt-get install packagename         # 安装软件包(加上 --reinstall重新安装)
   apt-get install packagename=version # 安装指定版本的软件包
4）apt-get remove packagename          # 卸载一个已安装的软件包（保留配置文件）同时卸载有依赖的软件包
   apt-get autoremove                  # 删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包
   apt-get purge packagename           # 完全移除软件包（删除配置信息）
   或apt-get --purge remove packagename
5）apt-get check      # 检查是否有损坏的依赖
6）apt-get clean      # 移除/var/cache/apt/archives/ 和 /var/cache/apt/archives/partial/ 下.deb文件 除已经被锁定的文件
   apt-get autoclean  # 只会删除不会再下载且几乎无用的文件 删除已删除的软件包的.deb安装文件

5 apt-cache
apt-cache # query the APT cach.
apt-cache performs a variety of operations on APT's package cache. apt-cache does not manipulate
  the state of the system but does provide operations to search and generate interesting output
  from the package metadata.
1）apt-cache depends packagename   # 了解使用依赖
2）apt-cache rdepends packagename  # 是查看该包被哪些包依赖
3）apt-cache search packagename    # 搜索包 【aptitude search packagename】
4）apt-cache show packagename      # 获取包的相关信息，如说明、大小、版本等 【aptitude show packagename】
5）apt-cache showpkg packagename   # 显示软件包的大致信息
（注：中括号【】内的aptitude也是类似于apt-*的一个包管理上层工具）



Ubuntu下安装和卸载软件的3种方式
1、apt-get
apt-get update       # 更新索引
apt-get install xxx  # 安装  xxx指代待安装包名
apt-get remove       # 删除已安装的软件包（保留配置文件），不会删除依赖软件包，且保留配置文件。
apt-get purge xxx    # 卸载  xxx指代安装时的包名
apt-get --purge remove  # 同上 删除已安装包（不保留配置文件)。如软件包a，依赖软件包b，则执行该命令会删除a，且不保留配置文件
apt-get autoremove   # 删除为了满足依赖而安装的，但现在不再需要的软件包（包括已安装包），保留配置文件。
apt-get clean        # 将 /var/cache/apt/archives/ 的 所有 deb 删掉，rm /var/cache/apt/archives/*.deb。
apt-get autoclean    # 只会删除 /var/cache/apt/archives/ 已经过期的deb。
  apt的底层包是dpkg, 而dpkg安装包时,会将 *.deb 放在 /var/cache/apt/archives/中
2、dpkg
dpkg -i xxx.deb      # 安装
apt-get -f install   # 可能一些依赖包并未安装，自动安装
dpkg-query -W "*chrome*"     # 安装后的dpkg包名与安装时的deb包名不同，卸载时先找到相应的dpkg包名
dpkg -P google-chrome-stable # 上步中找到的dpkg包名
apt-get autoremove           # 很有可能一些依赖包从此不再需要，自动删除
3、从源码编译安装
./configure   # 安装3步曲
make
make install
make uninstall # 卸载时的源码目录所在路径与安装时的源码目录所在路径不同，不影响最终结果


主要包管理工具
dpkg          # debian包安装工具
apt-get       # apt命令行前端
aptitude      # apt的高级字符和命令行前端 全新菜单操作包管理工具 针对apt设计 可兼容apt-get
synaptic      # 图形界面apt前端
dselect       # 使用菜单界面的包管理工具
tasksel       # task安装工具
各工具并非取代对方 如dselect同时使用apt和dpkg apt使用/var/lib/apt/lists/来追踪软件包 dpkg使用/var/lib/dpkg/

ubuntu内核自动升级后 若进不去系统 应在系统进入界面选择"ubuntu高级选项"进入地内核版本 然后删除已经升级的高内核
dpkg --list | grep linux-image        # 列出当前系统内核的image和extra文件
dpkg --list | grep linux-header       # 查看安装内核的headers文件
sudo apt-get purge linux-image-4.4.0.97  # 删除某版本的内核
sudo apt-get autoremove               #



PPA (Personal Package Archives) 个人软件源
https://launchpad.net/ubuntu/+ppas  #launchpad平台

sudo add-apt-repository ppa:wiznote-team  # 添加源  如在launchpad平台 搜索 知笔记(wiznote)
sudo apt-get update                       # 更新源
sudo apt-get install xxx                  # 安装

sudo add-apt-repository -r ppa:wiznote-team   # 删除源
  /etc/apt/sources.list.d/                  # 进入这个文件夹删除对应的源文件
sudo apt-get install software-properties-common   # add-apt-repository command not found 解决方法

sudo add-apt-repository ppa:pee-developers/stable  # 录屏软件
sudo apt-get update
sudo apt-get install peek
peek



ubuntu防火墙
ufw 即uncomplicated firewall的简称,一些复杂的设定还是要去iptables
由于linux原始的防火墙工具iptables过于繁琐，所以ubuntu默认提供了一个基于iptable之上的防火墙工具ufw。
sudo apt-get install ufw        # 安装  ubuntu 系统默认已安装ufw
sudo ufw version                # 防火墙版本
sudo ufw status                 # 显示防火墙和端口的侦听状态，见 /var/lib/ufw/maps。括号中的数字将不会被显示出来
sudo ufw enable|disable         # 开启/关闭ubuntu防火墙 默认设置是 disable
sudo ufw default allow|deny     # 外来访问默认允许/拒绝
sudo ufw logging on|off         # 转换日志状态
sudo ufw allow|deny [service]   # 开启/禁用 可以用“协议：端口”的方式指定一个存在于/etc/services中的服务名称，
  也可以通过包的meta-data。 ‘allow’ 参数将把条目加入 /etc/ufw/maps ，而 ‘deny’ 则相反。
  ufw allow/deny 20             # 允许/拒绝 访问20端口,20后可跟/tcp或/udp，表示tcp或udp封包。
  ufw delete allow/deny 20      # 删除以前定义的"允许/拒绝访问20端口"的规则
  sudo ufw allow 22/tcp         # 允许所有的外部IP访问本机的22/tcp (ssh)端口
  sudo ufw delete allow 22/tcp  # 禁用 22 端口
  ufw allow/deny servicename    # ufw从/etc/services中找到对应service的端口，进行过滤。
  sudo ufw allow smtp           # 允许 smtp 端口 允许所有的外部IP访问本机的25/tcp (smtp)端口
  sudo ufw deny smtp            # 禁止外部访问smtp服务
  sudo ufw delete allow smtp    # 删除 smtp 端口的许可 删除上面建立的某条规则
  sudo ufw allow from 192.168.254.254          # 允许某特定 IP 允许此IP访问所有的本机端口
  sudo ufw delete allow from 192.168.254.254   # 删除上面的规则
  ufw allow proto tcp from 10.0.1.0/10 to      # 本机ip port 25:允许自10.0.1.0/10的tcp封包访问本机的25端口。


Ubuntu安装 x-terminal-emulator
https://blog.csdn.net/weixin_44497198/article/details/109990606
sudo apt-get install terminator    # 安装 terminalx
Ctrl+ Alt + t                      # 默认启动的终端
sudo apt-get install dconf-tools   # 安装dconf-tools，这个是设置默认终端的必须
dconf-editor                       # 搜索
org > gnome > desktop > terminal   # 打开dconf-tools,就像Windows的注册表一样  更改结果为
或者 在 org > gnome > desktop > applications > terminal
  exec gnome-terminal
  exec-arg -x
  默认快捷键的终端为系统终端

  exec x-terminal-emulator
  exec-arg -e
  默认为Terminator

右键窗口 > 配置文件首选项 > 配置 > 滚动 > 无限回滚   # 缓存行数无限  默认500

Alt+A           #广播到所有终端
Alt+O           #停止广播到所有终端

第一部份：关于在同一个标签内的操作
Alt+Up                          # 移动到上面的终端
Alt+Down                        # 移动到下面的终端
Alt+Left                        # 移动到左边的终端
Alt+Right                       # 移动到右边的终端
Ctrl+Shift+O                    # 水平分割终端
Ctrl+Shift+E                    # 垂直分割终端
Ctrl+Shift+Right                # 在垂直分割的终端中将分割条向右移动
Ctrl+Shift+Left                 # 在垂直分割的终端中将分割条向左移动
Ctrl+Shift+Up                   # 在水平分割的终端中将分割条向上移动
Ctrl+Shift+Down                 # 在水平分割的终端中将分割条向下移动
Ctrl+Shift+S                    # 隐藏/显示滚动条
Ctrl+Shift+F                    # 搜索
Ctrl+Shift+C                    # 复制选中的内容到剪贴板
Ctrl+Shift+V                    # 粘贴剪贴板的内容到此处
Ctrl+Shift+W                    # 关闭当前终端
Ctrl+Shift+Q                    # 退出当前窗口，当前窗口的所有终端都将被关闭
Ctrl+Shift+X                    # 最大化显示当前终端
Ctrl+Shift+Z                    # 最大化显示当前终端并使字体放大
Ctrl+Shift+N or Ctrl+Tab        # 移动到下一个终端
Ctrl+Shift+P or Ctrl+Shift+Tab  # Crtl+Shift+Tab 移动到之前的一个终端

第二部份：有关各个标签之间的操作
F11                             # 全屏开关
Ctrl+Shift+T                    # 打开一个新的标签
Ctrl+PageDown                   # 移动到下一个标签
Ctrl+PageUp                     # 移动到上一个标签
Ctrl+Shift+PageDown             # 将当前标签与其后一个标签交换位置
Ctrl+Shift+PageUp               # 将当前标签与其前一个标签交换位置
Ctrl+Plus (+)                   # 增大字体
Ctrl+Minus (-)                  # 减小字体
Ctrl+Zero (0)                   # 恢复字体到原始大小
Ctrl+Shift+R                    # 重置终端状态
Ctrl+Shift+G                    # 重置终端状态并clear屏幕
Super+g                         # 绑定所有的终端，以便向一个输入能够输入到所有的终端
Super+Shift+G                   # 解除绑定
Super+t                         # 绑定当前标签的所有终端，向一个终端输入的内容会自动输入到其他终端
Super+Shift+T                   # 解除绑定
Ctrl+Shift+I                    # 打开一个窗口，新窗口与原来的窗口使用同一个进程
Super+i                         # 打开一个新窗口，新窗口与原来的窗口使用不同的进程

所有快捷键，都可以通过"man terminator"找到对应的英文帮助说明。



标准大页和透明大页
https://www.kernel.org/doc/html/next/admin-guide/mm/transhuge.html
https://www.cnblogs.com/my-show-time/p/14237757.html
在 Linux 中大页分为两种： Huge pages ( 标准大页 ) 和 Transparent Huge pages( 透明大页 ) 。
内存是以块即页的方式进行管理的，当前大部分系统默认的页大小为4K。1MB 内存等于 256 页；1GB 内存等于 256000 页。
CPU 拥有内置的内存管理单元，包含这些页面的列表，每个页面通过页表条目引用。
当内存越来越大的时候，CPU 需要管理这些内存页的成本也就越高，这样会对操作系统的性能产生影响。

Huge Pages
Huge pages 是从 Linux Kernel 2.6 后被引入的，目的是通过使用大页内存来取代传统的 4kb 内存页面，
以适应越来越大的系统内存，让操作系统可以支持现代硬件架构的大页面容量功能。

Huge pages 有两种页块格式大小：2MB 和1GB ，2MB 适用于 GB 大小的内存， 1GB 适用于 TB 级别的内存；2MB 是默认的页大小。

Transparent Huge Pages
Transparent Huge Pages 缩写 THP ，这个是 RHEL 6 开始引入的一个功能，在 Linux6 上透明大页是默认启用的。

由于 Huge pages 很难手动管理，而且通常需要对代码进行重大的更改才能有效的使用，
因此 RHEL 6 开始引入了 Transparent Huge Pages ，THP 是一个抽象层，能够自动创建、管理和使用传统大页。

THP 减少了使用传统大页的复杂性,THP 的默认设置改进大多数系统配置性能。但是，不建议对数据库工作负载使用 THP 。

这两者最大的区别在于: 标准大页管理是预分配的方式，而透明大页管理则是动态分配的方式。


grep Hugepagesize /proc/meminfo    # 标准大页的页面大小
grep Huge /proc/meminfo
  AnonHugePages: 7956480 kB        # 不为0，表示开启了THP
  HugePages_Total: 0               # 表示禁用标准大页

cat /proc/sys/vm/nr_hugepages      # 0 也意味着传统大页禁用了（传统大页和透明大页）

cat /sys/kernel/mm/transparent_hugepage/enabled #[always] madvise never 检查当前的transparent_hugepage状态
cat /sys/kernel/mm/transparent_hugepage/defrag  #[always] madvise never 这个应该是内存碎片整理
never 关闭 不使用透明内存;alway 尽量使用透明内存，扫描内存，有512个4k页面可整合，整合成一个2M页面;madvise 避免改变内存占用

echo never > /sys/kernel/mm/transparent_hugepage/enabled    # 手动临时关闭
echo never > /sys/kernel/mm/transparent_hugepage/defrag

/sys/kernel/mm/transparent_hugepage/khugepaged/    # 使用情况监控
  pages_to_scan (默认 4096 = 16MB)            # 一个扫描周期被扫描的内存页数
  scan_sleep_millisecs (默认 10000 = 10sec)   # 多长时间扫描一次
  alloc_sleep_millisecs (默认 60000 = 60sec)  # 多长时间整理一次碎片






perf(Performance Event)
https://goodcommand.readthedocs.io/zh_CN/latest/command/perf.html
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance
https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/profiling-memory-accesses-with-perf-mem_monitoring-and-managing-system-status-and-performance#the-purpose-of-perf-mem_profiling-memory-accesses-with-perf-mem
https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/profiling-cpu-usage-with-perf-top_profiling-cpu-usage-in-real-time-with-top
https://www.cnblogs.com/conscience-remain/p/16142279.html
https://wiki.csie.ncku.edu.tw/embedded/perf-tutorial
https://zhuanlan.zhihu.com/p/664546779 # 学会使用perf性能分析工具--这一篇就够了
https://zhuanlan.zhihu.com/p/664396453 # 从小白到精通：揭秘perf工具的全部功能与操作技巧
https://goodcommand.readthedocs.io/zh-cn/latest/command/perf.html

Linux kernel 2.6.31后自带系统性能优化工具，原理是对目标进行取样，记录特定条件下所侦测的事件是否发生以及发生的次数。
通过它，程序利用PMU(Performance Monitor Unit)，tracepoint和内核中的特殊计数器来进行性能统计。
它可分析应用程序的性能问题(per thread)，内核的性能问题，从而全面理解应用程序中的性能瓶颈。

cat "/boot/config-`uname -r`" | grep "PERF_EVENT" # 查看目前的 Kernel config 有没启用 Perf
cat /proc/sys/kernel/perf_event_paranoid  # root使用perf能取得哪些event data   perf record可查看
  -1 权限全开
  0  不允许 raw tracepoint access。但可以使用 perf stat、perf record 並取得 CPU events data。
  1  不允许 CPU events data。但可以使用 perf stat、perf record 並取得 Kernel profiling data。
  2  不允许任何量測。但部份用來查看或分析已存在的紀錄的指令仍可使用，如 perf ls、perf report、perf timechart、 perf trace。
sudo sh -c " echo 0 > /proc/sys/kernel/kptr_restrict"  # 检测cache miss event，先取消kernel pointer的禁用

gcc – o test1 – g test.c　　# 一定要加-g选项，加入调试和符号表信息。
sudo perf stat ./a.out

perf安装
  1 https://blog.csdn.net/qq_44158431/article/details/125199825
  基于Ubuntu 20.04 安装perf性能分析工具            # 安装指定版本
  sudo apt install linux-tools-common
  sudo apt install linux-tools-5.13.0-40-generic
  sudo apt install linux-cloud-tools-5.13.0-40-generic

  2 https://blog.csdn.net/z1026544682/article/details/115329534
  Perf软件包默认在Ubuntu 20.04默认存储库中不可用。  # 根据系统版本自动选择版本 这个好用
   sudo apt-get install linux-tools-$(uname -r) linux-tools-generic -y # 安装命令

  3 yum install perf    # 红帽 centos

命令大部分需要root权限  如 sudo perf xxx
perf -v                  # 查看安装的perf版本  =perf version
perf --help              # 可用的所有选项      =perf -h
perf list                # 列出所有的采样事件 event
perf list sw             # 性能清单 显示软件预定义事件的列表
perf list stat           # 性能清单 打印所有strace事件

perf top                 # 实时显示系统的性能统计信息。可查看最耗时的内核函数或某个用户进程 -a默认
  perf top -p $pid         # 指定进程
  perf top -e cpu-clock    # 显示与CPU时钟相关的事件，请使用-e选项
  perf top -e cache-misses -c 5000 # -c取样频率 默认4000

perf stat                # 有要优化的目标，对目标进行特定或一些列的 event 检查
  perf stat -p pid         # 收集性能统计信息 指定进程,ctrl+c 杀死进程之后，就可以看到相应的数据了
  perf stat ls -ld /etc/   # 性能统计 获取ls -ld / etc命令的性能统计信息
  perf stat free -m        # 运行“ free -m”命令时系统中会发生什么
  perf stat --repeat 5 -e cache-misses,cache-references,instructions,cycles ./perf_stat_cache_miss #
    --repeat n或-r n 重复执行 n 次该程序，并显示每个 event 的变化区间

perf record/report       # 有別于 stat，record 可以针对函数级别进行 event 统计，方便对程序 热点 作更精細的分析和优化
  -g 额外记录函数的调用关系 即 调用栈
  -e cpu-clock 指perf record监控的指标为cpu周期
  -p 指定需要record的进程pid
  -F <frequcncy>调整取样频率  cat /proc/sys/kernel/perf_event_max_sample_rate 取样频率最大值
  --call-graph dwarf 记录调用链和堆栈 包含-g  如--call-graph dwarf,4096 其中数字为用户堆栈可省 默认为8192B
  -- sleep n  持续n秒 如果不加则一直采样到手动中断(CRTL+C)为止
  perf record -e branch-misses:u,branch-instructions:u ./perf_record_example # :u只统计 user space 的 event
  perf record df -h        # 性能记录 运行df -h命令，并使用以下命令将其概要文件记录到当前工作目录perf.data中
  perf record –e cpu-clock ./test1  # 查找时间上的热点函数
  perf record -e cpu-clock -g -p 2548 # 程序运行完(或Ctrl+c结束),生成perf.data文件，若之前已有，覆盖之前的

perf report              # 性能报告 用于分析由perf记录生成的文件，并生成平面或图形轮廓
  perf report -i perf.data # -i 指定要查看的文件
  perf script -i perf.data &> perf.unfold  # 用perf script工具对perf.data进行解析

perf bench mem all       # 性能基准 在系统上执行多个基准测试。如检查所有内存速度测试
perf diff perf.data perf.data.old  # 进行两次record对比

perf应用
1 cpu分析  基于linux perf dump程序数据 并生成火焰图查看
2 perf top函数性能分析  perf top -p `pidof server_name_xxx`
3 函数调用链的性能占比  perf record -F 99 -p ${pid} --call-graph dwarf sleep ${采样时间}  在执行perf report


火焰图 Flame Graph
https://www.brendangregg.com/flamegraphs.html
https://www.cnblogs.com/happyliu/p/6142929.html
https://github.com/brendangregg/FlameGraph     # GitHub
https://github.com/brendangregg/FlameGraph.git # git仓库
https://perf.wiki.kernel.org/index.php/Main_Page
https://www.zhihu.com/question/561942682/answer/3318075623 # linux 的性能工具需要 BPF 技术

sudo perf record -e cpu-clock -g -p 28591          # 1 Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data
sudo perf record -F 10000 -p pid -g -- sleep 30    # 1 sleep持续采样时间 -p 进程id 用的这个 -F 采样频率
sudo perf script -i perf.data &> perf.unfold       # 2 用perf script工具对perf.data进行解析
~/FlameGraph/stackcollapse-perf.pl perf.unfold &> perf.folded # 3 将perf.unfold中的符号进行折叠
~/FlameGraph/flamegraph.pl perf.folded > perf.svg             # 4 最后生成svg图

perf.sh -p pid  # 导出火焰图 下边为shell脚本
exec() {
    echo "$1"
    sudo perf record -F 10000 -p "$1" -g -- sleep 30                # 采样30秒
    sudo perf script > out.unfold                                   # 用perf script工具对perf.data进行解析
    ~code/FlameGraph/stackcollapse-perf.pl out.unfold > out.folded  # .unfold中的符号进行折叠
    ~code/FlameGraph/flamegraph.pl out.folded > out.svg             # 最后生成svg图
}

parse_arg() {
    while [ $# -gt 0 ]; do
        case "$1" in
            -p|--pid)
                shift 1
                if [ -n "$1" ]; then
                    exec "$1"
                fi
                shift 1
                ;;

            *)
                shift 1
                ;;

        esac
    done
}

parse_arg "$@"


LD_LIBRARY_PATH=${ID_LIBRARY_PATH}:./heaptrack_x64/x64/lib ./heaptrack_x64/x64/bin/heaptrack_gui
https://forum.qt.io/topic/93247/qt-qpa-plugin-could-not-load-the-qt-platform-plugin-xcb-in-even-though-it-was-found/3
1 问题
qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "" even though it was found.
This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.
Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland, wayland-xcomposite-egl, wayland-xcomposite-glx, xcb.
已放弃 (核心已转储)
2 结论
so版本不一致到导致
当时在编译hotspot时 连接出错，导致编译不过去，将qt5.15.5版本冒充5.12.8
即将/usr/lib/x86_64-linux-gnu/libQt5DBus.so.5.12.8 替换为 /opt/qt515/lib/libQt5DBus.so.5.15.4 且名字依然为5.12.8
替换回来则解决 且需要下/etc/ld/so.conf中用#注掉或删掉/opt/qt515/lib 且 ldconfig 执行一次
3 定位过程
  3.1 QT_DEBUG_PLUGINS=1 DISPLAY=:0 LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./lib ./bin/heaptrack_gui  # QT_DEBUG_PLUGINS=1 显示QT加载详细过程 其最后如下错误 (https://github.com/NVlabs/instant-ngp/discussions/300说DISPLAY=:0能解决 本人测试没用)
    Got keys from plugin meta data ("xcb")
    QFactoryLoader::QFactoryLoader() checking directory path "/home/lixiang/heaptrack_x64/x64/bin/platforms" ...
    Cannot load library /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so: (./lib/libQt5Core.so.5: version `Qt_5.  15' not found (required by /opt/qt515/lib/libQt5XcbQpa.so.5))
    QLibraryPrivate::loadPlugin failed on "/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so" : "Cannot load   library /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so: (./lib/libQt5Core.so.5: version `Qt_5.15' not found   (required by /opt/qt515/lib/libQt5XcbQpa.so.5))"
    qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "" even though it was found.
    This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may   fix this problem.

    Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland,   wayland-xcomposite-egl, wayland-xcomposite-glx, xcb.

    已放弃 (核心已转储)
  3.2 ldd ./heaptrack_x64/x64/bin/heaptrack_gui
    ./heaptrack_x64/x64/bin/heaptrack_gui: /lib/x86_64-linux-gnu/libQt5Core.so.5: version `Qt_5.15' not found (required by /lib/x86_64-linux-gnu/libQt5DBus.so.5)
    libKChart.so.2 => not found
    等之类的错误 由此得知时动态库不一致



GPG(GnuPG GNU Privacy Guard)  加密和解密工具
https://gnupg.org/
https://linux.cn/article-14082-1.html
https://www.ruanyifeng.com/blog/2013/07/gpg.html
GPG密钥工作原理是使用私钥和公钥。私钥加密的只能用相应的公钥解密。用公钥加密的只能用相应的私钥解密。
sudo apt install gnupg         # 安装      或 sudo apt install gpg
gpg --full-generate-key      # 生成密钥  大多数问题使用默认值
gpg --list-secret-keys       # 检查 GPG 密钥
gpg --list-public-keys       # 分别看到私钥和公钥都是通过 ID 相互绑定的
gpg --encrypt --output xxx.gpg --recipient user@example.com xxx  # 加密文件
  —encrypt 加密  --output 指定输出文件  --recipient 指定一个相应的 GPG 密钥的电子邮件
gpg --decrypt --output xxx xxx.gpg   # 解密
gpg --list-public-keys        # 显示公钥
gpg --output key.gpg --export id_xxx     # 导出一个公钥
gpg --import key.gpg          # 导入公钥
gpg --edit-key id             # 验证该密钥
  gpg> fpr                    # 显示密钥的指纹
  gpg> sign                   # 符合

安装bazel
https://bazel.build/install/ubuntu?hl=zh-cn#install-on-ubuntu
1 将 Bazel 分发 URI 添加为软件包来源 注意：此步骤只需执行一次。
sudo apt install apt-transport-https curl gnupg -y
curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg
sudo mv bazel-archive-keyring.gpg /usr/share/keyrings
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
组件名称“jdk1.8”仅出于旧版原因保留，与受支持或包含的 JDK 版本无关。Bazel 版本与 Java 版本无关。更改“jdk1.8”组件名称将破坏代码库的现有用户。

2 安装和更新 Bazel
sudo apt update && sudo apt install bazel
sudo apt install bazel-1.0.0              # 安装特定的旧版 Bazel  可选

解决 E: Could not get lock /var/lib/apt/lists/lock
参考：Unable to lock the administration directory (/var/lib/dpkg/) is another process using it?
在更换软件源时遇到了如下问题：

sudo apt-get update
E: Could not get lock /var/lib/apt/lists/lock - open (11: Resource temporarily unavailable)
E: Unable to lock directory /var/lib/apt/lists/
表明当前有某个进程正在apt-get，然而我并没有使用任何命令，于是需要kill掉进程。

解决方法是：
sudo rm /var/lib/apt/lists/lock

3 安装 JDK(可选)
Bazel 包含一个捆绑的私有 JRE 作为其运行时，并且不需要您安装任何特定版本的 Java。
但是，如果要使用 Bazel 构建 Java 代码，必须安装 JDK。
sudo apt install default-jdk
sudo apt install openjdk-8-jdk    # Ubuntu 16.04 (LTS) uses OpenJDK 8 by default
sudo apt install openjdk-11-jdk   # Ubuntu 18.04 (LTS) uses OpenJDK 11 by default


bazel参考
https://blog.csdn.net/elaine_bao/article/details/78668657
https://zhulao.gitee.io/blog/2019/04/05/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-bazel/index.html

bazel编译tcmalloc
$ cd ~/code/tcmalloc
$ git clone https://github.com/google/tcmalloc.git  ./
$ bazel test //tcmalloc/...                             # 编译
$ bazel build tcmalloc/testing:hello_main       # 验证 编译hello_main 运行
$ bazel run tcmalloc/testing:hello_main


lixiang@lixiang-ThinkCentre-M730e-N010:~$ sudo apt install apt-transport-https curl gnupg -y
[sudo] lixiang 的密码：
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
curl 已经是最新版 (7.68.0-1ubuntu2.18)。
gnupg 已经是最新版 (2.2.19-3ubuntu2.2)。
下列【新】软件包将被安装：
  apt-transport-https
升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 141 个软件包未被升级。
需要下载 1,704 B 的归档。
解压缩后会消耗 162 kB 的额外空间。
获取:1 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 apt-transport-https all 2.0.9 [1,704 B]
已下载 1,704 B，耗时 1秒 (1,851 B/s)
正在选中未选择的软件包 apt-transport-https。
(正在读取数据库 ... 系统当前共安装有 260018 个文件和目录。)
准备解压 .../apt-transport-https_2.0.9_all.deb  ...
正在解压 apt-transport-https (2.0.9) ...
正在设置 apt-transport-https (2.0.9) ...

lixiang@lixiang-ThinkCentre-M730e-N010:~$ curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg
lixiang@lixiang-ThinkCentre-M730e-N010:~$ sudo mv bazel-archive-keyring.gpg /usr/share/keyrings
lixiang@lixiang-ThinkCentre-M730e-N010:~$ echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8
lixiang@lixiang-ThinkCentre-M730e-N010:~$ sudo apt update && sudo apt install bazel
命中:1 https://dl.google.com/linux/chrome/deb stable InRelease
获取:2 https://storage.googleapis.com/bazel-apt stable InRelease [2,259 B]
命中:3 https://download.docker.com/linux/ubuntu focal InRelease
获取:4 https://storage.googleapis.com/bazel-apt stable/jdk1.8 amd64 Packages [10.2 kB]
获取:5 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]
命中:6 http://cn.archive.ubuntu.com/ubuntu focal InRelease
命中:7 http://lenovo.archive.canonical.com focal InRelease
获取:8 http://cn.archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]
获取:12 http://security.ubuntu.com/ubuntu focal-security/main amd64 DEP-11 Metadata [59.8 kB]
命中:9 https://apt.llvm.org/focal llvm-toolchain-focal InRelease
获取:13 http://security.ubuntu.com/ubuntu focal-security/universe amd64 DEP-11 Metadata [95.7 kB]
命中:10 https://apt.llvm.org/focal llvm-toolchain-focal-12 InRelease
获取:14 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 DEP-11 Metadata [940 B]
命中:11 https://apt.llvm.org/focal llvm-toolchain-focal-13 InRelease
获取:15 http://cn.archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]
获取:16 http://cn.archive.ubuntu.com/ubuntu focal-updates/main amd64 DEP-11 Metadata [275 kB]
忽略:16 http://cn.archive.ubuntu.com/ubuntu focal-updates/main amd64 DEP-11 Metadata
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:17 http://cn.archive.ubuntu.com/ubuntu focal-updates/universe amd64 DEP-11 Metadata [409 kB]
获取:18 http://cn.archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 DEP-11 Metadata [940 B]
获取:19 http://cn.archive.ubuntu.com/ubuntu focal-backports/main amd64 DEP-11 Metadata [7,980 B]
获取:20 http://cn.archive.ubuntu.com/ubuntu focal-backports/universe amd64 DEP-11 Metadata [30.5 kB]
获取:16 http://cn.archive.ubuntu.com/ubuntu focal-updates/main amd64 DEP-11 Metadata [275 kB]
已下载 665 kB，耗时 5分 31秒 (2,007 B/s)
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
有 141 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
将会同时安装下列软件：
  zlib1g-dev
建议安装：
  google-jdk | java8-sdk-headless | java8-jdk | java8-sdk | oracle-java8-installer
下列【新】软件包将被安装：
  bazel zlib1g-dev
升级了 0 个软件包，新安装了 2 个软件包，要卸载 0 个软件包，有 141 个软件包未被升级。
需要下载 50.9 MB 的归档。
解压缩后会消耗 607 kB 的额外空间。
您希望继续执行吗？ [Y/n] y
获取:1 https://storage.googleapis.com/bazel-apt stable/jdk1.8 amd64 bazel amd64 6.2.0 [50.7 MB]
获取:2 http://cn.archive.ubuntu.com/ubuntu focal-updates/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2ubuntu1.5 [155 kB]
已下载 50.9 MB，耗时 3分 39秒 (233 kB/s)
正在选中未选择的软件包 zlib1g-dev:amd64。
(正在读取数据库 ... 系统当前共安装有 260022 个文件和目录。)
准备解压 .../zlib1g-dev_1%3a1.2.11.dfsg-2ubuntu1.5_amd64.deb  ...
正在解压 zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu1.5) ...
正在选中未选择的软件包 bazel。
准备解压 .../archives/bazel_6.2.0_amd64.deb  ...
正在解压 bazel (6.2.0) ...
正在设置 zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu1.5) ...
正在设置 bazel (6.2.0) ...
正在处理用于 man-db (2.9.1-1) 的触发器 ...
lixiang@lixiang-ThinkCentre-M730e-N010:~$
lixiang@lixiang-ThinkCentre-M730e-N010:~$
lixiang@lixiang-ThinkCentre-M730e-N010:~$ bazel
bazel       bazel-real


lixiang@lixiang-ThinkCentre-M730e-N010:~/code$ cd code/tcmalloc/
lixiang@lixiang-ThinkCentre-M730e-N010:~/code/tcmalloc$ ls
ci  CONTRIBUTING.md  docs  LICENSE  README.md  tcmalloc  WORKSPACE
lixiang@lixiang-ThinkCentre-M730e-N010:~/code/tcmalloc$ bazel test //tcmalloc/...
Extracting Bazel installation...
Starting local Bazel server and connecting to it...
DEBUG: /home/lixiang/.cache/bazel/_bazel_lixiang/7019b445a0b1ff55bfbc59e169b8ae99/external/rules_python/python/repositories.bzl:32:10: py_repositories is a no-op and is deprecated. You can remove this from your WORKSPACE file
INFO: Analyzed 831 targets (81 packages loaded, 3339 targets configured).
INFO: Found 132 targets and 699 test targets...
FAIL: //tcmalloc/testing:releasing_test_small_but_slow (see /home/lixiang/.cache/bazel/_bazel_lixiang/7019b445a0b1ff55bfbc59e169b8ae99/execroot/com_google_tcmalloc/bazel-out/k8-fastbuild/testlogs/tcmalloc/testing/releasing_test_small_but_slow/test.log)
INFO: Elapsed time: 686.688s, Critical Path: 75.96s
INFO: 6043 processes: 2414 internal, 3629 linux-sandbox.
INFO: Build completed, 1 test FAILED, 6043 total actions
//tcmalloc:allocation_sample_test_256k_pages                             PASSED in 0.0s
//tcmalloc:allocation_sample_test_256k_pages_pow2                        PASSED in 0.1s
//tcmalloc:allocation_sample_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.1s
//tcmalloc:allocation_sample_test_256k_pages_sharded_transfer_cache      PASSED in 0.0s
//tcmalloc:allocation_sample_test_32k_pages                              PASSED in 0.1s
//tcmalloc:allocation_sample_test_8k_pages                               PASSED in 0.0s
//tcmalloc:allocation_sample_test_deprecated_perthread                   PASSED in 0.0s
//tcmalloc:allocation_sample_test_flat_cpu_caches                        PASSED in 0.0s
//tcmalloc:allocation_sample_test_hpaa                                   PASSED in 0.1s
//tcmalloc:allocation_sample_test_legacy_size_classes                    PASSED in 0.3s
//tcmalloc:allocation_sample_test_no_hpaa                                PASSED in 0.4s
//tcmalloc:allocation_sample_test_numa_aware                             PASSED in 0.0s
//tcmalloc:allocation_sample_test_real_cpu_caches                        PASSED in 0.0s
//tcmalloc:allocation_sample_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc:allocation_sample_test_small_but_slow                         PASSED in 0.1s
//tcmalloc:allocation_sample_test_use_huge_region_more_often             PASSED in 0.0s
//tcmalloc:arena_test_256k_pages                                         PASSED in 0.3s
//tcmalloc:arena_test_256k_pages_pow2                                    PASSED in 0.0s
//tcmalloc:arena_test_256k_pages_pow2_sharded_transfer_cache             PASSED in 0.0s
//tcmalloc:arena_test_256k_pages_sharded_transfer_cache                  PASSED in 0.0s
//tcmalloc:arena_test_32k_pages                                          PASSED in 0.0s
//tcmalloc:arena_test_8k_pages                                           PASSED in 0.0s
//tcmalloc:arena_test_deprecated_perthread                               PASSED in 0.0s
//tcmalloc:arena_test_flat_cpu_caches                                    PASSED in 0.1s
//tcmalloc:arena_test_hpaa                                               PASSED in 0.0s
//tcmalloc:arena_test_legacy_size_classes                                PASSED in 0.0s
//tcmalloc:arena_test_no_hpaa                                            PASSED in 0.0s
//tcmalloc:arena_test_numa_aware                                         PASSED in 0.0s
//tcmalloc:arena_test_real_cpu_caches                                    PASSED in 0.0s
//tcmalloc:arena_test_separate_allocs_for_few_and_many_objects_spans     PASSED in 0.0s
//tcmalloc:arena_test_small_but_slow                                     PASSED in 0.0s
//tcmalloc:arena_test_use_huge_region_more_often                         PASSED in 0.0s
//tcmalloc:central_freelist_fuzz                                         PASSED in 0.0s
//tcmalloc:central_freelist_test                                         PASSED in 36.5s
//tcmalloc:cpu_cache_activate_test                                       PASSED in 0.2s
//tcmalloc:cpu_cache_test                                                PASSED in 19.8s
//tcmalloc:experiment_config_test                                        PASSED in 0.1s
//tcmalloc:experiment_fuzz                                               PASSED in 0.0s
//tcmalloc:guarded_page_allocator_profile_test                           PASSED in 0.2s
//tcmalloc:guarded_page_allocator_test                                   PASSED in 0.7s
//tcmalloc:huge_address_map_test                                         PASSED in 0.0s
//tcmalloc:huge_allocator_test                                           PASSED in 7.7s
//tcmalloc:huge_cache_test                                               PASSED in 1.2s
//tcmalloc:huge_page_aware_allocator_fuzz                                PASSED in 0.0s
//tcmalloc:huge_page_aware_allocator_test                                PASSED in 8.7s
//tcmalloc:huge_page_filler_fuzz                                         PASSED in 0.0s
//tcmalloc:huge_region_test                                              PASSED in 2.0s
//tcmalloc:lifetime_based_allocator_test                                 PASSED in 0.5s
//tcmalloc:malloc_extension_fuzz                                         PASSED in 0.0s
//tcmalloc:new_extension_test_256k_pages                                 PASSED in 0.8s
//tcmalloc:new_extension_test_256k_pages_pow2                            PASSED in 1.0s
//tcmalloc:new_extension_test_256k_pages_pow2_sharded_transfer_cache     PASSED in 1.2s
//tcmalloc:new_extension_test_256k_pages_sharded_transfer_cache          PASSED in 0.8s
//tcmalloc:new_extension_test_32k_pages                                  PASSED in 0.8s
//tcmalloc:new_extension_test_8k_pages                                   PASSED in 0.9s
//tcmalloc:new_extension_test_deprecated_perthread                       PASSED in 1.0s
//tcmalloc:new_extension_test_flat_cpu_caches                            PASSED in 1.0s
//tcmalloc:new_extension_test_hpaa                                       PASSED in 1.1s
//tcmalloc:new_extension_test_legacy_size_classes                        PASSED in 0.8s
//tcmalloc:new_extension_test_no_hpaa                                    PASSED in 0.8s
//tcmalloc:new_extension_test_numa_aware                                 PASSED in 0.8s
//tcmalloc:new_extension_test_real_cpu_caches                            PASSED in 1.0s
//tcmalloc:new_extension_test_separate_allocs_for_few_and_many_objects_spans PASSED in 1.0s
//tcmalloc:new_extension_test_small_but_slow                             PASSED in 1.4s
//tcmalloc:new_extension_test_use_huge_region_more_often                 PASSED in 0.8s
//tcmalloc:page_allocator_test                                           PASSED in 0.0s
//tcmalloc:page_heap_test_256k_pages                                     PASSED in 0.0s
//tcmalloc:page_heap_test_256k_pages_pow2                                PASSED in 0.0s
//tcmalloc:page_heap_test_256k_pages_pow2_sharded_transfer_cache         PASSED in 0.2s
//tcmalloc:page_heap_test_256k_pages_sharded_transfer_cache              PASSED in 0.0s
//tcmalloc:page_heap_test_32k_pages                                      PASSED in 0.3s
//tcmalloc:page_heap_test_8k_pages                                       PASSED in 0.1s
//tcmalloc:page_heap_test_deprecated_perthread                           PASSED in 0.3s
//tcmalloc:page_heap_test_flat_cpu_caches                                PASSED in 0.0s
//tcmalloc:page_heap_test_hpaa                                           PASSED in 0.1s
//tcmalloc:page_heap_test_legacy_size_classes                            PASSED in 0.2s
//tcmalloc:page_heap_test_no_hpaa                                        PASSED in 0.0s
//tcmalloc:page_heap_test_numa_aware                                     PASSED in 0.4s
//tcmalloc:page_heap_test_real_cpu_caches                                PASSED in 0.0s
//tcmalloc:page_heap_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.1s
//tcmalloc:page_heap_test_small_but_slow                                 PASSED in 0.0s
//tcmalloc:page_heap_test_use_huge_region_more_often                     PASSED in 0.1s
//tcmalloc:pagemap_test_256k_pages                                       PASSED in 0.9s
//tcmalloc:pagemap_test_256k_pages_pow2                                  PASSED in 1.1s
//tcmalloc:pagemap_test_256k_pages_pow2_sharded_transfer_cache           PASSED in 1.1s
//tcmalloc:pagemap_test_256k_pages_sharded_transfer_cache                PASSED in 1.5s
//tcmalloc:pagemap_test_32k_pages                                        PASSED in 0.9s
//tcmalloc:pagemap_test_8k_pages                                         PASSED in 1.7s
//tcmalloc:pagemap_test_deprecated_perthread                             PASSED in 0.8s
//tcmalloc:pagemap_test_flat_cpu_caches                                  PASSED in 2.2s
//tcmalloc:pagemap_test_hpaa                                             PASSED in 1.4s
//tcmalloc:pagemap_test_legacy_size_classes                              PASSED in 2.7s
//tcmalloc:pagemap_test_no_hpaa                                          PASSED in 1.3s
//tcmalloc:pagemap_test_numa_aware                                       PASSED in 4.0s
//tcmalloc:pagemap_test_real_cpu_caches                                  PASSED in 1.8s
//tcmalloc:pagemap_test_separate_allocs_for_few_and_many_objects_spans   PASSED in 2.7s
//tcmalloc:pagemap_test_small_but_slow                                   PASSED in 1.7s
//tcmalloc:pagemap_test_use_huge_region_more_often                       PASSED in 0.9s
//tcmalloc:pages_test_256k_pages                                         PASSED in 0.4s
//tcmalloc:pages_test_256k_pages_pow2                                    PASSED in 0.4s
//tcmalloc:pages_test_256k_pages_pow2_sharded_transfer_cache             PASSED in 0.5s
//tcmalloc:pages_test_256k_pages_sharded_transfer_cache                  PASSED in 0.5s
//tcmalloc:pages_test_32k_pages                                          PASSED in 0.4s
//tcmalloc:pages_test_8k_pages                                           PASSED in 0.4s
//tcmalloc:pages_test_deprecated_perthread                               PASSED in 0.5s
//tcmalloc:pages_test_flat_cpu_caches                                    PASSED in 0.3s
//tcmalloc:pages_test_hpaa                                               PASSED in 0.4s
//tcmalloc:pages_test_legacy_size_classes                                PASSED in 0.4s
//tcmalloc:pages_test_no_hpaa                                            PASSED in 0.3s
//tcmalloc:pages_test_numa_aware                                         PASSED in 0.3s
//tcmalloc:pages_test_real_cpu_caches                                    PASSED in 0.4s
//tcmalloc:pages_test_separate_allocs_for_few_and_many_objects_spans     PASSED in 0.5s
//tcmalloc:pages_test_small_but_slow                                     PASSED in 0.4s
//tcmalloc:pages_test_use_huge_region_more_often                         PASSED in 0.2s
//tcmalloc:profile_marshaler_test                                        PASSED in 0.1s
//tcmalloc:sampled_allocation_allocator_test_256k_pages                  PASSED in 0.1s
//tcmalloc:sampled_allocation_allocator_test_256k_pages_pow2             PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_256k_pages_sharded_transfer_cache PASSED in 0.3s
//tcmalloc:sampled_allocation_allocator_test_32k_pages                   PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_8k_pages                    PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_deprecated_perthread        PASSED in 0.1s
//tcmalloc:sampled_allocation_allocator_test_flat_cpu_caches             PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_hpaa                        PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_legacy_size_classes         PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_no_hpaa                     PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_numa_aware                  PASSED in 0.0s
//tcmalloc:sampled_allocation_allocator_test_real_cpu_caches             PASSED in 0.1s
//tcmalloc:sampled_allocation_allocator_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.2s
//tcmalloc:sampled_allocation_allocator_test_small_but_slow              PASSED in 0.3s
//tcmalloc:sampled_allocation_allocator_test_use_huge_region_more_often  PASSED in 0.0s
//tcmalloc:size_classes_test_256k_pages                                  PASSED in 0.3s
//tcmalloc:size_classes_test_256k_pages_pow2                             PASSED in 0.3s
//tcmalloc:size_classes_test_256k_pages_pow2_sharded_transfer_cache      PASSED in 0.6s
//tcmalloc:size_classes_test_256k_pages_sharded_transfer_cache           PASSED in 0.7s
//tcmalloc:size_classes_test_32k_pages                                   PASSED in 0.3s
//tcmalloc:size_classes_test_8k_pages                                    PASSED in 0.4s
//tcmalloc:size_classes_test_deprecated_perthread                        PASSED in 0.7s
//tcmalloc:size_classes_test_flat_cpu_caches                             PASSED in 0.3s
//tcmalloc:size_classes_test_hpaa                                        PASSED in 0.4s
//tcmalloc:size_classes_test_legacy_size_classes                         PASSED in 0.3s
//tcmalloc:size_classes_test_no_hpaa                                     PASSED in 0.3s
//tcmalloc:size_classes_test_numa_aware                                  PASSED in 0.6s
//tcmalloc:size_classes_test_real_cpu_caches                             PASSED in 0.3s
//tcmalloc:size_classes_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.4s
//tcmalloc:size_classes_test_small_but_slow                              PASSED in 0.1s
//tcmalloc:size_classes_test_use_huge_region_more_often                  PASSED in 0.3s
//tcmalloc:sizemap_fuzz                                                  PASSED in 0.1s
//tcmalloc:span_fuzz                                                     PASSED in 0.0s
//tcmalloc:span_test_256k_pages                                          PASSED in 3.9s
//tcmalloc:span_test_256k_pages_pow2                                     PASSED in 0.8s
//tcmalloc:span_test_256k_pages_pow2_sharded_transfer_cache              PASSED in 0.8s
//tcmalloc:span_test_256k_pages_sharded_transfer_cache                   PASSED in 4.1s
//tcmalloc:span_test_32k_pages                                           PASSED in 2.1s
//tcmalloc:span_test_8k_pages                                            PASSED in 1.9s
//tcmalloc:span_test_deprecated_perthread                                PASSED in 2.8s
//tcmalloc:span_test_flat_cpu_caches                                     PASSED in 3.3s
//tcmalloc:span_test_hpaa                                                PASSED in 2.0s
//tcmalloc:span_test_legacy_size_classes                                 PASSED in 2.3s
//tcmalloc:span_test_no_hpaa                                             PASSED in 2.2s
//tcmalloc:span_test_numa_aware                                          PASSED in 3.9s
//tcmalloc:span_test_real_cpu_caches                                     PASSED in 2.2s
//tcmalloc:span_test_separate_allocs_for_few_and_many_objects_spans      PASSED in 2.9s
//tcmalloc:span_test_small_but_slow                                      PASSED in 0.7s
//tcmalloc:span_test_use_huge_region_more_often                          PASSED in 2.1s
//tcmalloc:stack_trace_table_test_256k_pages                             PASSED in 0.0s
//tcmalloc:stack_trace_table_test_256k_pages_pow2                        PASSED in 0.0s
//tcmalloc:stack_trace_table_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc:stack_trace_table_test_256k_pages_sharded_transfer_cache      PASSED in 0.2s
//tcmalloc:stack_trace_table_test_32k_pages                              PASSED in 0.3s
//tcmalloc:stack_trace_table_test_8k_pages                               PASSED in 0.3s
//tcmalloc:stack_trace_table_test_deprecated_perthread                   PASSED in 0.1s
//tcmalloc:stack_trace_table_test_flat_cpu_caches                        PASSED in 0.0s
//tcmalloc:stack_trace_table_test_hpaa                                   PASSED in 0.0s
//tcmalloc:stack_trace_table_test_legacy_size_classes                    PASSED in 0.1s
//tcmalloc:stack_trace_table_test_no_hpaa                                PASSED in 0.0s
//tcmalloc:stack_trace_table_test_numa_aware                             PASSED in 0.1s
//tcmalloc:stack_trace_table_test_real_cpu_caches                        PASSED in 0.0s
//tcmalloc:stack_trace_table_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.1s
//tcmalloc:stack_trace_table_test_small_but_slow                         PASSED in 0.0s
//tcmalloc:stack_trace_table_test_use_huge_region_more_often             PASSED in 0.3s
//tcmalloc:stats_test                                                    PASSED in 0.6s
//tcmalloc:thread_cache_test                                             PASSED in 0.2s
//tcmalloc:transfer_cache_fuzz                                           PASSED in 0.0s
//tcmalloc:want_legacy_size_classes_test                                 PASSED in 0.5s
//tcmalloc/internal:affinity_test                                        PASSED in 0.4s
//tcmalloc/internal:cache_topology_test                                  PASSED in 0.0s
//tcmalloc/internal:config_test                                          PASSED in 0.0s
//tcmalloc/internal:environment_test                                     PASSED in 0.0s
//tcmalloc/internal:lifetime_predictions_test                            PASSED in 3.3s
//tcmalloc/internal:lifetime_tracker_test                                PASSED in 0.0s
//tcmalloc/internal:linked_list_test                                     PASSED in 0.0s
//tcmalloc/internal:logging_test                                         PASSED in 0.4s
//tcmalloc/internal:memory_stats_test                                    PASSED in 0.0s
//tcmalloc/internal:mincore_test                                         PASSED in 4.6s
//tcmalloc/internal:numa_fuzz                                            PASSED in 0.1s
//tcmalloc/internal:numa_test                                            PASSED in 0.1s
//tcmalloc/internal:percpu_tcmalloc_test                                 PASSED in 10.4s
//tcmalloc/internal:prefetch_test                                        PASSED in 0.0s
//tcmalloc/internal:profile_builder_fuzz                                 PASSED in 0.3s
//tcmalloc/internal:profile_builder_test                                 PASSED in 0.4s
//tcmalloc/internal:range_tracker_test                                   PASSED in 0.2s
//tcmalloc/internal:residency_test                                       PASSED in 0.0s
//tcmalloc/internal:sampled_allocation_recorder_test                     PASSED in 3.4s
//tcmalloc/internal:sampled_allocation_test                              PASSED in 0.4s
//tcmalloc/internal:stacktrace_filter_test                               PASSED in 30.7s
//tcmalloc/internal:timeseries_tracker_test                              PASSED in 0.1s
//tcmalloc/testing:aligned_new_test_256k_pages                           PASSED in 31.8s
//tcmalloc/testing:aligned_new_test_256k_pages_pow2                      PASSED in 45.7s
//tcmalloc/testing:aligned_new_test_256k_pages_pow2_sharded_transfer_cache PASSED in 39.1s
//tcmalloc/testing:aligned_new_test_256k_pages_sharded_transfer_cache    PASSED in 30.9s
//tcmalloc/testing:aligned_new_test_32k_pages                            PASSED in 47.6s
//tcmalloc/testing:aligned_new_test_8k_pages                             PASSED in 30.5s
//tcmalloc/testing:aligned_new_test_deprecated_perthread                 PASSED in 28.2s
//tcmalloc/testing:aligned_new_test_flat_cpu_caches                      PASSED in 31.1s
//tcmalloc/testing:aligned_new_test_hpaa                                 PASSED in 40.9s
//tcmalloc/testing:aligned_new_test_legacy_size_classes                  PASSED in 31.0s
//tcmalloc/testing:aligned_new_test_no_hpaa                              PASSED in 27.8s
//tcmalloc/testing:aligned_new_test_numa_aware                           PASSED in 29.3s
//tcmalloc/testing:aligned_new_test_real_cpu_caches                      PASSED in 33.7s
//tcmalloc/testing:aligned_new_test_separate_allocs_for_few_and_many_objects_spans PASSED in 38.6s
//tcmalloc/testing:aligned_new_test_small_but_slow                       PASSED in 27.8s
//tcmalloc/testing:aligned_new_test_use_huge_region_more_often           PASSED in 35.9s
//tcmalloc/testing:current_allocated_bytes_test_256k_pages               PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_256k_pages_pow2          PASSED in 0.1s
//tcmalloc/testing:current_allocated_bytes_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.5s
//tcmalloc/testing:current_allocated_bytes_test_256k_pages_sharded_transfer_cache PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_32k_pages                PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_8k_pages                 PASSED in 0.3s
//tcmalloc/testing:current_allocated_bytes_test_deprecated_perthread     PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_flat_cpu_caches          PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_hpaa                     PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_legacy_size_classes      PASSED in 0.5s
//tcmalloc/testing:current_allocated_bytes_test_no_hpaa                  PASSED in 0.6s
//tcmalloc/testing:current_allocated_bytes_test_numa_aware               PASSED in 0.6s
//tcmalloc/testing:current_allocated_bytes_test_real_cpu_caches          PASSED in 0.1s
//tcmalloc/testing:current_allocated_bytes_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.2s
//tcmalloc/testing:current_allocated_bytes_test_small_but_slow           PASSED in 0.3s
//tcmalloc/testing:current_allocated_bytes_test_use_huge_region_more_often PASSED in 0.6s
//tcmalloc/testing:deallocation_profiler_test_256k_pages                 PASSED in 34.5s
//tcmalloc/testing:deallocation_profiler_test_256k_pages_pow2            PASSED in 32.0s
//tcmalloc/testing:deallocation_profiler_test_256k_pages_pow2_sharded_transfer_cache PASSED in 26.8s
//tcmalloc/testing:deallocation_profiler_test_256k_pages_sharded_transfer_cache PASSED in 31.4s
//tcmalloc/testing:deallocation_profiler_test_32k_pages                  PASSED in 30.6s
//tcmalloc/testing:deallocation_profiler_test_8k_pages                   PASSED in 52.7s
//tcmalloc/testing:deallocation_profiler_test_deprecated_perthread       PASSED in 30.1s
//tcmalloc/testing:deallocation_profiler_test_flat_cpu_caches            PASSED in 45.0s
//tcmalloc/testing:deallocation_profiler_test_hpaa                       PASSED in 35.6s
//tcmalloc/testing:deallocation_profiler_test_legacy_size_classes        PASSED in 35.7s
//tcmalloc/testing:deallocation_profiler_test_no_hpaa                    PASSED in 27.0s
//tcmalloc/testing:deallocation_profiler_test_numa_aware                 PASSED in 37.4s
//tcmalloc/testing:deallocation_profiler_test_real_cpu_caches            PASSED in 34.4s
//tcmalloc/testing:deallocation_profiler_test_separate_allocs_for_few_and_many_objects_spans PASSED in 55.7s
//tcmalloc/testing:deallocation_profiler_test_small_but_slow             PASSED in 52.9s
//tcmalloc/testing:deallocation_profiler_test_use_huge_region_more_often PASSED in 36.1s
//tcmalloc/testing:default_parameters_test_256k_pages                    PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_256k_pages_pow2               PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_256k_pages_sharded_transfer_cache PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_32k_pages                     PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_8k_pages                      PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_deprecated_perthread          PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_flat_cpu_caches               PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_hpaa                          PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_legacy_size_classes           PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_no_hpaa                       PASSED in 0.3s
//tcmalloc/testing:default_parameters_test_numa_aware                    PASSED in 0.2s
//tcmalloc/testing:default_parameters_test_real_cpu_caches               PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_small_but_slow                PASSED in 0.0s
//tcmalloc/testing:default_parameters_test_use_huge_region_more_often    PASSED in 0.0s
//tcmalloc/testing:frag_test_256k_pages                                  PASSED in 0.0s
//tcmalloc/testing:frag_test_256k_pages_pow2                             PASSED in 0.3s
//tcmalloc/testing:frag_test_256k_pages_pow2_sharded_transfer_cache      PASSED in 0.0s
//tcmalloc/testing:frag_test_256k_pages_sharded_transfer_cache           PASSED in 0.0s
//tcmalloc/testing:frag_test_32k_pages                                   PASSED in 0.1s
//tcmalloc/testing:frag_test_8k_pages                                    PASSED in 0.0s
//tcmalloc/testing:frag_test_deprecated_perthread                        PASSED in 0.0s
//tcmalloc/testing:frag_test_flat_cpu_caches                             PASSED in 0.0s
//tcmalloc/testing:frag_test_hpaa                                        PASSED in 0.0s
//tcmalloc/testing:frag_test_legacy_size_classes                         PASSED in 0.0s
//tcmalloc/testing:frag_test_no_hpaa                                     PASSED in 0.0s
//tcmalloc/testing:frag_test_numa_aware                                  PASSED in 0.0s
//tcmalloc/testing:frag_test_real_cpu_caches                             PASSED in 0.1s
//tcmalloc/testing:frag_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc/testing:frag_test_small_but_slow                              PASSED in 0.2s
//tcmalloc/testing:frag_test_use_huge_region_more_often                  PASSED in 0.0s
//tcmalloc/testing:get_stats_test_256k_pages                             PASSED in 0.2s
//tcmalloc/testing:get_stats_test_256k_pages_pow2                        PASSED in 0.1s
//tcmalloc/testing:get_stats_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.1s
//tcmalloc/testing:get_stats_test_256k_pages_sharded_transfer_cache      PASSED in 0.1s
//tcmalloc/testing:get_stats_test_32k_pages                              PASSED in 0.1s
//tcmalloc/testing:get_stats_test_8k_pages                               PASSED in 0.1s
//tcmalloc/testing:get_stats_test_deprecated_perthread                   PASSED in 0.1s
//tcmalloc/testing:get_stats_test_flat_cpu_caches                        PASSED in 0.3s
//tcmalloc/testing:get_stats_test_hpaa                                   PASSED in 0.1s
//tcmalloc/testing:get_stats_test_legacy_size_classes                    PASSED in 0.3s
//tcmalloc/testing:get_stats_test_no_hpaa                                PASSED in 0.2s
//tcmalloc/testing:get_stats_test_numa_aware                             PASSED in 0.2s
//tcmalloc/testing:get_stats_test_real_cpu_caches                        PASSED in 0.4s
//tcmalloc/testing:get_stats_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.2s
//tcmalloc/testing:get_stats_test_small_but_slow                         PASSED in 0.5s
//tcmalloc/testing:get_stats_test_use_huge_region_more_often             PASSED in 0.1s
//tcmalloc/testing:heap_profiling_test_256k_pages                        PASSED in 5.6s
//tcmalloc/testing:heap_profiling_test_256k_pages_pow2                   PASSED in 6.0s
//tcmalloc/testing:heap_profiling_test_256k_pages_pow2_sharded_transfer_cache PASSED in 5.4s
//tcmalloc/testing:heap_profiling_test_256k_pages_sharded_transfer_cache PASSED in 5.6s
//tcmalloc/testing:heap_profiling_test_32k_pages                         PASSED in 6.0s
//tcmalloc/testing:heap_profiling_test_8k_pages                          PASSED in 5.4s
//tcmalloc/testing:heap_profiling_test_deprecated_perthread              PASSED in 5.6s
//tcmalloc/testing:heap_profiling_test_flat_cpu_caches                   PASSED in 6.1s
//tcmalloc/testing:heap_profiling_test_hpaa                              PASSED in 5.5s
//tcmalloc/testing:heap_profiling_test_legacy_size_classes               PASSED in 6.2s
//tcmalloc/testing:heap_profiling_test_no_hpaa                           PASSED in 5.8s
//tcmalloc/testing:heap_profiling_test_numa_aware                        PASSED in 5.7s
//tcmalloc/testing:heap_profiling_test_real_cpu_caches                   PASSED in 6.0s
//tcmalloc/testing:heap_profiling_test_separate_allocs_for_few_and_many_objects_spans PASSED in 6.1s
//tcmalloc/testing:heap_profiling_test_small_but_slow                    PASSED in 6.2s
//tcmalloc/testing:heap_profiling_test_use_huge_region_more_often        PASSED in 5.6s
//tcmalloc/testing:large_alloc_size_test_256k_pages                      PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_256k_pages_pow2                 PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_256k_pages_sharded_transfer_cache PASSED in 0.3s
//tcmalloc/testing:large_alloc_size_test_32k_pages                       PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_8k_pages                        PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_deprecated_perthread            PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_flat_cpu_caches                 PASSED in 0.2s
//tcmalloc/testing:large_alloc_size_test_hpaa                            PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_legacy_size_classes             PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_no_hpaa                         PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_numa_aware                      PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_real_cpu_caches                 PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.3s
//tcmalloc/testing:large_alloc_size_test_small_but_slow                  PASSED in 0.0s
//tcmalloc/testing:large_alloc_size_test_use_huge_region_more_often      PASSED in 0.0s
//tcmalloc/testing:largesmall_frag_test_256k_pages                       PASSED in 2.5s
//tcmalloc/testing:largesmall_frag_test_256k_pages_pow2                  PASSED in 2.3s
//tcmalloc/testing:largesmall_frag_test_256k_pages_pow2_sharded_transfer_cache PASSED in 2.3s
//tcmalloc/testing:largesmall_frag_test_256k_pages_sharded_transfer_cache PASSED in 2.5s
//tcmalloc/testing:largesmall_frag_test_32k_pages                        PASSED in 7.1s
//tcmalloc/testing:largesmall_frag_test_8k_pages                         PASSED in 14.5s
//tcmalloc/testing:largesmall_frag_test_deprecated_perthread             PASSED in 4.4s
//tcmalloc/testing:largesmall_frag_test_flat_cpu_caches                  PASSED in 4.0s
//tcmalloc/testing:largesmall_frag_test_hpaa                             PASSED in 19.9s
//tcmalloc/testing:largesmall_frag_test_legacy_size_classes              PASSED in 5.8s
//tcmalloc/testing:largesmall_frag_test_no_hpaa                          PASSED in 5.2s
//tcmalloc/testing:largesmall_frag_test_numa_aware                       PASSED in 6.0s
//tcmalloc/testing:largesmall_frag_test_real_cpu_caches                  PASSED in 9.7s
//tcmalloc/testing:largesmall_frag_test_separate_allocs_for_few_and_many_objects_spans PASSED in 4.3s
//tcmalloc/testing:largesmall_frag_test_small_but_slow                   PASSED in 3.8s
//tcmalloc/testing:largesmall_frag_test_use_huge_region_more_often       PASSED in 6.3s
//tcmalloc/testing:lifetimes_test_256k_pages                             PASSED in 64.7s
//tcmalloc/testing:lifetimes_test_256k_pages_pow2                        PASSED in 69.5s
//tcmalloc/testing:lifetimes_test_256k_pages_pow2_sharded_transfer_cache PASSED in 69.1s
//tcmalloc/testing:lifetimes_test_256k_pages_sharded_transfer_cache      PASSED in 61.7s
//tcmalloc/testing:lifetimes_test_32k_pages                              PASSED in 54.5s
//tcmalloc/testing:lifetimes_test_8k_pages                               PASSED in 64.8s
//tcmalloc/testing:lifetimes_test_deprecated_perthread                   PASSED in 55.7s
//tcmalloc/testing:lifetimes_test_flat_cpu_caches                        PASSED in 56.9s
//tcmalloc/testing:lifetimes_test_hpaa                                   PASSED in 55.9s
//tcmalloc/testing:lifetimes_test_legacy_size_classes                    PASSED in 69.7s
//tcmalloc/testing:lifetimes_test_no_hpaa                                PASSED in 63.7s
//tcmalloc/testing:lifetimes_test_numa_aware                             PASSED in 61.3s
//tcmalloc/testing:lifetimes_test_real_cpu_caches                        PASSED in 59.1s
//tcmalloc/testing:lifetimes_test_separate_allocs_for_few_and_many_objects_spans PASSED in 64.3s
//tcmalloc/testing:lifetimes_test_small_but_slow                         PASSED in 69.5s
//tcmalloc/testing:lifetimes_test_use_huge_region_more_often             PASSED in 55.9s
//tcmalloc/testing:limit_test_256k_pages                                 PASSED in 3.1s
//tcmalloc/testing:limit_test_256k_pages_pow2                            PASSED in 2.2s
//tcmalloc/testing:limit_test_256k_pages_pow2_sharded_transfer_cache     PASSED in 1.0s
//tcmalloc/testing:limit_test_256k_pages_sharded_transfer_cache          PASSED in 2.0s
//tcmalloc/testing:limit_test_32k_pages                                  PASSED in 2.6s
//tcmalloc/testing:limit_test_8k_pages                                   PASSED in 3.3s
//tcmalloc/testing:limit_test_deprecated_perthread                       PASSED in 6.2s
//tcmalloc/testing:limit_test_flat_cpu_caches                            PASSED in 2.5s
//tcmalloc/testing:limit_test_hpaa                                       PASSED in 2.2s
//tcmalloc/testing:limit_test_legacy_size_classes                        PASSED in 4.3s
//tcmalloc/testing:limit_test_no_hpaa                                    PASSED in 3.1s
//tcmalloc/testing:limit_test_numa_aware                                 PASSED in 2.5s
//tcmalloc/testing:limit_test_real_cpu_caches                            PASSED in 2.6s
//tcmalloc/testing:limit_test_separate_allocs_for_few_and_many_objects_spans PASSED in 2.4s
//tcmalloc/testing:limit_test_small_but_slow                             PASSED in 7.8s
//tcmalloc/testing:limit_test_use_huge_region_more_often                 PASSED in 2.5s
//tcmalloc/testing:malloc_extension_system_malloc_test                   PASSED in 0.0s
//tcmalloc/testing:malloc_extension_test_256k_pages                      PASSED in 0.8s
//tcmalloc/testing:malloc_extension_test_256k_pages_pow2                 PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.4s
//tcmalloc/testing:malloc_extension_test_256k_pages_sharded_transfer_cache PASSED in 0.2s
//tcmalloc/testing:malloc_extension_test_32k_pages                       PASSED in 0.2s
//tcmalloc/testing:malloc_extension_test_8k_pages                        PASSED in 0.2s
//tcmalloc/testing:malloc_extension_test_deprecated_perthread            PASSED in 0.0s
//tcmalloc/testing:malloc_extension_test_flat_cpu_caches                 PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_hpaa                            PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_legacy_size_classes             PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_no_hpaa                         PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_numa_aware                      PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_real_cpu_caches                 PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.3s
//tcmalloc/testing:malloc_extension_test_small_but_slow                  PASSED in 0.2s
//tcmalloc/testing:malloc_extension_test_use_huge_region_more_often      PASSED in 0.9s
//tcmalloc/testing:malloc_tracing_extension_system_malloc_test           PASSED in 0.3s
//tcmalloc/testing:malloc_tracing_extension_test_256k_pages              PASSED in 0.2s
//tcmalloc/testing:malloc_tracing_extension_test_256k_pages_pow2         PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_256k_pages_sharded_transfer_cache PASSED in 0.2s
//tcmalloc/testing:malloc_tracing_extension_test_32k_pages               PASSED in 0.2s
//tcmalloc/testing:malloc_tracing_extension_test_8k_pages                PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_deprecated_perthread    PASSED in 0.2s
//tcmalloc/testing:malloc_tracing_extension_test_flat_cpu_caches         PASSED in 0.1s
//tcmalloc/testing:malloc_tracing_extension_test_hpaa                    PASSED in 0.1s
//tcmalloc/testing:malloc_tracing_extension_test_legacy_size_classes     PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_no_hpaa                 PASSED in 0.3s
//tcmalloc/testing:malloc_tracing_extension_test_numa_aware              PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_real_cpu_caches         PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_small_but_slow          PASSED in 0.0s
//tcmalloc/testing:malloc_tracing_extension_test_use_huge_region_more_often PASSED in 0.0s
//tcmalloc/testing:markidle_test                                         PASSED in 0.2s
//tcmalloc/testing:memalign_test_256k_pages                              PASSED in 1.4s
//tcmalloc/testing:memalign_test_256k_pages_pow2                         PASSED in 1.0s
//tcmalloc/testing:memalign_test_256k_pages_pow2_sharded_transfer_cache  PASSED in 0.9s
//tcmalloc/testing:memalign_test_256k_pages_sharded_transfer_cache       PASSED in 1.3s
//tcmalloc/testing:memalign_test_32k_pages                               PASSED in 1.1s
//tcmalloc/testing:memalign_test_8k_pages                                PASSED in 1.2s
//tcmalloc/testing:memalign_test_deprecated_perthread                    PASSED in 1.2s
//tcmalloc/testing:memalign_test_flat_cpu_caches                         PASSED in 0.9s
//tcmalloc/testing:memalign_test_hpaa                                    PASSED in 1.1s
//tcmalloc/testing:memalign_test_legacy_size_classes                     PASSED in 1.2s
//tcmalloc/testing:memalign_test_no_hpaa                                 PASSED in 0.7s
//tcmalloc/testing:memalign_test_numa_aware                              PASSED in 1.6s
//tcmalloc/testing:memalign_test_real_cpu_caches                         PASSED in 1.2s
//tcmalloc/testing:memalign_test_separate_allocs_for_few_and_many_objects_spans PASSED in 1.3s
//tcmalloc/testing:memalign_test_small_but_slow                          PASSED in 0.9s
//tcmalloc/testing:memalign_test_use_huge_region_more_often              PASSED in 0.9s
//tcmalloc/testing:memory_errors_test_256k_pages                         PASSED in 4.1s
//tcmalloc/testing:memory_errors_test_256k_pages_pow2                    PASSED in 3.9s
//tcmalloc/testing:memory_errors_test_256k_pages_pow2_sharded_transfer_cache PASSED in 4.3s
//tcmalloc/testing:memory_errors_test_256k_pages_sharded_transfer_cache  PASSED in 5.1s
//tcmalloc/testing:memory_errors_test_32k_pages                          PASSED in 2.4s
//tcmalloc/testing:memory_errors_test_8k_pages                           PASSED in 3.5s
//tcmalloc/testing:memory_errors_test_deprecated_perthread               PASSED in 2.8s
//tcmalloc/testing:memory_errors_test_flat_cpu_caches                    PASSED in 3.1s
//tcmalloc/testing:memory_errors_test_hpaa                               PASSED in 1.8s
//tcmalloc/testing:memory_errors_test_legacy_size_classes                PASSED in 2.3s
//tcmalloc/testing:memory_errors_test_no_hpaa                            PASSED in 2.9s
//tcmalloc/testing:memory_errors_test_numa_aware                         PASSED in 3.1s
//tcmalloc/testing:memory_errors_test_real_cpu_caches                    PASSED in 3.5s
//tcmalloc/testing:memory_errors_test_separate_allocs_for_few_and_many_objects_spans PASSED in 3.0s
//tcmalloc/testing:memory_errors_test_small_but_slow                     PASSED in 2.3s
//tcmalloc/testing:memory_errors_test_use_huge_region_more_often         PASSED in 2.4s
//tcmalloc/testing:no_deps_per_cpu_test_256k_pages                       PASSED in 9.9s
//tcmalloc/testing:no_deps_per_cpu_test_256k_pages_pow2                  PASSED in 7.1s
//tcmalloc/testing:no_deps_per_cpu_test_256k_pages_pow2_sharded_transfer_cache PASSED in 4.3s
//tcmalloc/testing:no_deps_per_cpu_test_256k_pages_sharded_transfer_cache PASSED in 7.2s
//tcmalloc/testing:no_deps_per_cpu_test_32k_pages                        PASSED in 9.9s
//tcmalloc/testing:no_deps_per_cpu_test_8k_pages                         PASSED in 10.0s
//tcmalloc/testing:no_deps_per_cpu_test_deprecated_perthread             PASSED in 9.5s
//tcmalloc/testing:no_deps_per_cpu_test_flat_cpu_caches                  PASSED in 9.5s
//tcmalloc/testing:no_deps_per_cpu_test_hpaa                             PASSED in 9.4s
//tcmalloc/testing:no_deps_per_cpu_test_legacy_size_classes              PASSED in 11.5s
//tcmalloc/testing:no_deps_per_cpu_test_no_hpaa                          PASSED in 8.1s
//tcmalloc/testing:no_deps_per_cpu_test_numa_aware                       PASSED in 6.3s
//tcmalloc/testing:no_deps_per_cpu_test_real_cpu_caches                  PASSED in 11.5s
//tcmalloc/testing:no_deps_per_cpu_test_separate_allocs_for_few_and_many_objects_spans PASSED in 7.2s
//tcmalloc/testing:no_deps_per_cpu_test_small_but_slow                   PASSED in 13.9s
//tcmalloc/testing:no_deps_per_cpu_test_use_huge_region_more_often       PASSED in 15.7s
//tcmalloc/testing:no_deps_test_256k_pages                               PASSED in 6.1s
//tcmalloc/testing:no_deps_test_256k_pages_pow2                          PASSED in 5.4s
//tcmalloc/testing:no_deps_test_256k_pages_pow2_sharded_transfer_cache   PASSED in 3.7s
//tcmalloc/testing:no_deps_test_256k_pages_sharded_transfer_cache        PASSED in 5.9s
//tcmalloc/testing:no_deps_test_32k_pages                                PASSED in 6.9s
//tcmalloc/testing:no_deps_test_8k_pages                                 PASSED in 8.0s
//tcmalloc/testing:no_deps_test_deprecated_perthread                     PASSED in 5.6s
//tcmalloc/testing:no_deps_test_flat_cpu_caches                          PASSED in 8.5s
//tcmalloc/testing:no_deps_test_hpaa                                     PASSED in 5.9s
//tcmalloc/testing:no_deps_test_legacy_size_classes                      PASSED in 6.6s
//tcmalloc/testing:no_deps_test_no_hpaa                                  PASSED in 8.6s
//tcmalloc/testing:no_deps_test_numa_aware                               PASSED in 11.8s
//tcmalloc/testing:no_deps_test_real_cpu_caches                          PASSED in 8.2s
//tcmalloc/testing:no_deps_test_separate_allocs_for_few_and_many_objects_spans PASSED in 10.9s
//tcmalloc/testing:no_deps_test_small_but_slow                           PASSED in 7.4s
//tcmalloc/testing:no_deps_test_use_huge_region_more_often               PASSED in 4.9s
//tcmalloc/testing:numa_locality_test                                    PASSED in 0.0s
//tcmalloc/testing:outofmemory_test                                      PASSED in 0.4s
//tcmalloc/testing:peak_heap_profiling_test                              PASSED in 0.1s
//tcmalloc/testing:profile_test_256k_pages                               PASSED in 0.1s
//tcmalloc/testing:profile_test_256k_pages_pow2                          PASSED in 0.2s
//tcmalloc/testing:profile_test_256k_pages_pow2_sharded_transfer_cache   PASSED in 0.1s
//tcmalloc/testing:profile_test_256k_pages_sharded_transfer_cache        PASSED in 0.1s
//tcmalloc/testing:profile_test_32k_pages                                PASSED in 0.1s
//tcmalloc/testing:profile_test_8k_pages                                 PASSED in 0.1s
//tcmalloc/testing:profile_test_deprecated_perthread                     PASSED in 0.1s
//tcmalloc/testing:profile_test_flat_cpu_caches                          PASSED in 0.1s
//tcmalloc/testing:profile_test_hpaa                                     PASSED in 0.1s
//tcmalloc/testing:profile_test_legacy_size_classes                      PASSED in 0.1s
//tcmalloc/testing:profile_test_no_hpaa                                  PASSED in 0.1s
//tcmalloc/testing:profile_test_numa_aware                               PASSED in 0.1s
//tcmalloc/testing:profile_test_real_cpu_caches                          PASSED in 0.1s
//tcmalloc/testing:profile_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.1s
//tcmalloc/testing:profile_test_small_but_slow                           PASSED in 0.1s
//tcmalloc/testing:profile_test_use_huge_region_more_often               PASSED in 0.1s
//tcmalloc/testing:realized_fragmentation_test_256k_pages                PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_256k_pages_pow2           PASSED in 0.5s
//tcmalloc/testing:realized_fragmentation_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_256k_pages_sharded_transfer_cache PASSED in 0.1s
//tcmalloc/testing:realized_fragmentation_test_32k_pages                 PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_8k_pages                  PASSED in 0.3s
//tcmalloc/testing:realized_fragmentation_test_deprecated_perthread      PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_flat_cpu_caches           PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_hpaa                      PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_legacy_size_classes       PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_no_hpaa                   PASSED in 0.1s
//tcmalloc/testing:realized_fragmentation_test_numa_aware                PASSED in 0.2s
//tcmalloc/testing:realized_fragmentation_test_real_cpu_caches           PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc/testing:realized_fragmentation_test_small_but_slow            PASSED in 0.3s
//tcmalloc/testing:realized_fragmentation_test_use_huge_region_more_often PASSED in 0.0s
//tcmalloc/testing:realloc_test_256k_pages                               PASSED in 7.2s
//tcmalloc/testing:realloc_test_256k_pages_pow2                          PASSED in 12.6s
//tcmalloc/testing:realloc_test_256k_pages_pow2_sharded_transfer_cache   PASSED in 7.1s
//tcmalloc/testing:realloc_test_256k_pages_sharded_transfer_cache        PASSED in 4.9s
//tcmalloc/testing:realloc_test_32k_pages                                PASSED in 7.5s
//tcmalloc/testing:realloc_test_8k_pages                                 PASSED in 5.0s
//tcmalloc/testing:realloc_test_deprecated_perthread                     PASSED in 5.3s
//tcmalloc/testing:realloc_test_flat_cpu_caches                          PASSED in 5.3s
//tcmalloc/testing:realloc_test_hpaa                                     PASSED in 4.9s
//tcmalloc/testing:realloc_test_legacy_size_classes                      PASSED in 9.7s
//tcmalloc/testing:realloc_test_no_hpaa                                  PASSED in 4.7s
//tcmalloc/testing:realloc_test_numa_aware                               PASSED in 6.5s
//tcmalloc/testing:realloc_test_real_cpu_caches                          PASSED in 4.8s
//tcmalloc/testing:realloc_test_separate_allocs_for_few_and_many_objects_spans PASSED in 5.2s
//tcmalloc/testing:realloc_test_small_but_slow                           PASSED in 5.0s
//tcmalloc/testing:realloc_test_use_huge_region_more_often               PASSED in 6.6s
//tcmalloc/testing:reclaim_test_256k_pages                               PASSED in 7.7s
//tcmalloc/testing:reclaim_test_256k_pages_pow2                          PASSED in 7.3s
//tcmalloc/testing:reclaim_test_256k_pages_pow2_sharded_transfer_cache   PASSED in 7.5s
//tcmalloc/testing:reclaim_test_256k_pages_sharded_transfer_cache        PASSED in 7.2s
//tcmalloc/testing:reclaim_test_32k_pages                                PASSED in 7.1s
//tcmalloc/testing:reclaim_test_8k_pages                                 PASSED in 7.2s
//tcmalloc/testing:reclaim_test_deprecated_perthread                     PASSED in 0.3s
//tcmalloc/testing:reclaim_test_flat_cpu_caches                          PASSED in 7.5s
//tcmalloc/testing:reclaim_test_hpaa                                     PASSED in 7.2s
//tcmalloc/testing:reclaim_test_legacy_size_classes                      PASSED in 7.4s
//tcmalloc/testing:reclaim_test_no_hpaa                                  PASSED in 7.4s
//tcmalloc/testing:reclaim_test_numa_aware                               PASSED in 7.2s
//tcmalloc/testing:reclaim_test_real_cpu_caches                          PASSED in 7.7s
//tcmalloc/testing:reclaim_test_separate_allocs_for_few_and_many_objects_spans PASSED in 7.2s
//tcmalloc/testing:reclaim_test_small_but_slow                           PASSED in 7.4s
//tcmalloc/testing:reclaim_test_use_huge_region_more_often               PASSED in 7.5s
//tcmalloc/testing:releasing_test_256k_pages                             PASSED in 0.0s
//tcmalloc/testing:releasing_test_256k_pages_pow2                        PASSED in 0.0s
//tcmalloc/testing:releasing_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.1s
//tcmalloc/testing:releasing_test_256k_pages_sharded_transfer_cache      PASSED in 0.0s
//tcmalloc/testing:releasing_test_32k_pages                              PASSED in 0.0s
//tcmalloc/testing:releasing_test_8k_pages                               PASSED in 0.0s
//tcmalloc/testing:releasing_test_deprecated_perthread                   PASSED in 0.0s
//tcmalloc/testing:releasing_test_flat_cpu_caches                        PASSED in 0.3s
//tcmalloc/testing:releasing_test_hpaa                                   PASSED in 0.3s
//tcmalloc/testing:releasing_test_legacy_size_classes                    PASSED in 0.0s
//tcmalloc/testing:releasing_test_no_hpaa                                PASSED in 0.0s
//tcmalloc/testing:releasing_test_numa_aware                             PASSED in 0.0s
//tcmalloc/testing:releasing_test_real_cpu_caches                        PASSED in 0.3s
//tcmalloc/testing:releasing_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.0s
//tcmalloc/testing:releasing_test_use_huge_region_more_often             PASSED in 0.3s
//tcmalloc/testing:sample_size_class_test_256k_pages                     PASSED in 3.6s
//tcmalloc/testing:sample_size_class_test_256k_pages_pow2                PASSED in 4.0s
//tcmalloc/testing:sample_size_class_test_256k_pages_pow2_sharded_transfer_cache PASSED in 3.2s
//tcmalloc/testing:sample_size_class_test_256k_pages_sharded_transfer_cache PASSED in 3.6s
//tcmalloc/testing:sample_size_class_test_32k_pages                      PASSED in 2.3s
//tcmalloc/testing:sample_size_class_test_8k_pages                       PASSED in 3.1s
//tcmalloc/testing:sample_size_class_test_deprecated_perthread           PASSED in 2.3s
//tcmalloc/testing:sample_size_class_test_flat_cpu_caches                PASSED in 3.2s
//tcmalloc/testing:sample_size_class_test_hpaa                           PASSED in 2.6s
//tcmalloc/testing:sample_size_class_test_legacy_size_classes            PASSED in 7.0s
//tcmalloc/testing:sample_size_class_test_no_hpaa                        PASSED in 3.3s
//tcmalloc/testing:sample_size_class_test_numa_aware                     PASSED in 2.3s
//tcmalloc/testing:sample_size_class_test_real_cpu_caches                PASSED in 2.4s
//tcmalloc/testing:sample_size_class_test_separate_allocs_for_few_and_many_objects_spans PASSED in 3.0s
//tcmalloc/testing:sample_size_class_test_small_but_slow                 PASSED in 2.9s
//tcmalloc/testing:sample_size_class_test_use_huge_region_more_often     PASSED in 2.8s
//tcmalloc/testing:sampler_test_256k_pages                               PASSED in 20.5s
//tcmalloc/testing:sampler_test_256k_pages_pow2                          PASSED in 23.5s
//tcmalloc/testing:sampler_test_256k_pages_pow2_sharded_transfer_cache   PASSED in 24.1s
//tcmalloc/testing:sampler_test_256k_pages_sharded_transfer_cache        PASSED in 23.1s
//tcmalloc/testing:sampler_test_32k_pages                                PASSED in 23.4s
//tcmalloc/testing:sampler_test_8k_pages                                 PASSED in 20.6s
//tcmalloc/testing:sampler_test_deprecated_perthread                     PASSED in 17.3s
//tcmalloc/testing:sampler_test_flat_cpu_caches                          PASSED in 22.6s
//tcmalloc/testing:sampler_test_hpaa                                     PASSED in 39.4s
//tcmalloc/testing:sampler_test_legacy_size_classes                      PASSED in 24.8s
//tcmalloc/testing:sampler_test_no_hpaa                                  PASSED in 20.8s
//tcmalloc/testing:sampler_test_numa_aware                               PASSED in 17.5s
//tcmalloc/testing:sampler_test_real_cpu_caches                          PASSED in 23.5s
//tcmalloc/testing:sampler_test_separate_allocs_for_few_and_many_objects_spans PASSED in 17.1s
//tcmalloc/testing:sampler_test_small_but_slow                           PASSED in 13.1s
//tcmalloc/testing:sampler_test_use_huge_region_more_often               PASSED in 24.5s
//tcmalloc/testing:sampling_memusage_test_256k_pages                     PASSED in 56.5s
//tcmalloc/testing:sampling_memusage_test_256k_pages_pow2                PASSED in 34.1s
//tcmalloc/testing:sampling_memusage_test_256k_pages_pow2_sharded_transfer_cache PASSED in 34.2s
//tcmalloc/testing:sampling_memusage_test_256k_pages_sharded_transfer_cache PASSED in 58.2s
//tcmalloc/testing:sampling_memusage_test_32k_pages                      PASSED in 28.4s
//tcmalloc/testing:sampling_memusage_test_8k_pages                       PASSED in 25.2s
//tcmalloc/testing:sampling_memusage_test_deprecated_perthread           PASSED in 22.9s
//tcmalloc/testing:sampling_memusage_test_flat_cpu_caches                PASSED in 65.6s
//tcmalloc/testing:sampling_memusage_test_hpaa                           PASSED in 42.3s
//tcmalloc/testing:sampling_memusage_test_legacy_size_classes            PASSED in 66.9s
//tcmalloc/testing:sampling_memusage_test_no_hpaa                        PASSED in 42.3s
//tcmalloc/testing:sampling_memusage_test_numa_aware                     PASSED in 42.3s
//tcmalloc/testing:sampling_memusage_test_real_cpu_caches                PASSED in 31.4s
//tcmalloc/testing:sampling_memusage_test_separate_allocs_for_few_and_many_objects_spans PASSED in 19.7s
//tcmalloc/testing:sampling_memusage_test_small_but_slow                 PASSED in 21.6s
//tcmalloc/testing:sampling_memusage_test_use_huge_region_more_often     PASSED in 30.2s
//tcmalloc/testing:sampling_test                                         PASSED in 5.9s
//tcmalloc/testing:startup_size_test                                     PASSED in 0.0s
//tcmalloc/testing:system-alloc_test                                     PASSED in 0.0s
//tcmalloc/testing:tcmalloc_large_test_256k_pages                        PASSED in 0.5s
//tcmalloc/testing:tcmalloc_large_test_256k_pages_pow2                   PASSED in 0.5s
//tcmalloc/testing:tcmalloc_large_test_256k_pages_pow2_sharded_transfer_cache PASSED in 1.1s
//tcmalloc/testing:tcmalloc_large_test_256k_pages_sharded_transfer_cache PASSED in 1.0s
//tcmalloc/testing:tcmalloc_large_test_32k_pages                         PASSED in 0.5s
//tcmalloc/testing:tcmalloc_large_test_8k_pages                          PASSED in 0.9s
//tcmalloc/testing:tcmalloc_large_test_deprecated_perthread              PASSED in 0.5s
//tcmalloc/testing:tcmalloc_large_test_flat_cpu_caches                   PASSED in 0.6s
//tcmalloc/testing:tcmalloc_large_test_hpaa                              PASSED in 0.5s
//tcmalloc/testing:tcmalloc_large_test_legacy_size_classes               PASSED in 0.6s
//tcmalloc/testing:tcmalloc_large_test_no_hpaa                           PASSED in 1.5s
//tcmalloc/testing:tcmalloc_large_test_numa_aware                        PASSED in 0.7s
//tcmalloc/testing:tcmalloc_large_test_real_cpu_caches                   PASSED in 1.4s
//tcmalloc/testing:tcmalloc_large_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.4s
//tcmalloc/testing:tcmalloc_large_test_small_but_slow                    PASSED in 0.7s
//tcmalloc/testing:tcmalloc_large_test_use_huge_region_more_often        PASSED in 0.9s
//tcmalloc/testing:tcmalloc_test_256k_pages                              PASSED in 31.6s
//tcmalloc/testing:tcmalloc_test_256k_pages_pow2                         PASSED in 54.4s
//tcmalloc/testing:tcmalloc_test_256k_pages_pow2_sharded_transfer_cache  PASSED in 39.6s
//tcmalloc/testing:tcmalloc_test_256k_pages_sharded_transfer_cache       PASSED in 42.7s
//tcmalloc/testing:tcmalloc_test_32k_pages                               PASSED in 54.7s
//tcmalloc/testing:tcmalloc_test_8k_pages                                PASSED in 21.9s
//tcmalloc/testing:tcmalloc_test_deprecated_perthread                    PASSED in 39.0s
//tcmalloc/testing:tcmalloc_test_flat_cpu_caches                         PASSED in 34.4s
//tcmalloc/testing:tcmalloc_test_hpaa                                    PASSED in 36.7s
//tcmalloc/testing:tcmalloc_test_legacy_size_classes                     PASSED in 37.6s
//tcmalloc/testing:tcmalloc_test_no_hpaa                                 PASSED in 40.9s
//tcmalloc/testing:tcmalloc_test_numa_aware                              PASSED in 41.2s
//tcmalloc/testing:tcmalloc_test_real_cpu_caches                         PASSED in 53.9s
//tcmalloc/testing:tcmalloc_test_separate_allocs_for_few_and_many_objects_spans PASSED in 41.1s
//tcmalloc/testing:tcmalloc_test_small_but_slow                          PASSED in 50.6s
//tcmalloc/testing:tcmalloc_test_use_huge_region_more_often              PASSED in 40.1s
//tcmalloc/testing:thread_ctor_test_256k_pages                           PASSED in 0.2s
//tcmalloc/testing:thread_ctor_test_256k_pages_pow2                      PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_256k_pages_sharded_transfer_cache    PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_32k_pages                            PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_8k_pages                             PASSED in 0.4s
//tcmalloc/testing:thread_ctor_test_deprecated_perthread                 PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_flat_cpu_caches                      PASSED in 0.2s
//tcmalloc/testing:thread_ctor_test_hpaa                                 PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_legacy_size_classes                  PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_no_hpaa                              PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_numa_aware                           PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_real_cpu_caches                      PASSED in 0.3s
//tcmalloc/testing:thread_ctor_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_small_but_slow                       PASSED in 0.1s
//tcmalloc/testing:thread_ctor_test_use_huge_region_more_often           PASSED in 0.2s
//tcmalloc/testing:threadcachesize_test_256k_pages                       PASSED in 0.1s
//tcmalloc/testing:threadcachesize_test_256k_pages_pow2                  PASSED in 0.4s
//tcmalloc/testing:threadcachesize_test_256k_pages_pow2_sharded_transfer_cache PASSED in 0.6s
//tcmalloc/testing:threadcachesize_test_256k_pages_sharded_transfer_cache PASSED in 0.6s
//tcmalloc/testing:threadcachesize_test_32k_pages                        PASSED in 0.4s
//tcmalloc/testing:threadcachesize_test_8k_pages                         PASSED in 0.2s
//tcmalloc/testing:threadcachesize_test_deprecated_perthread             PASSED in 0.3s
//tcmalloc/testing:threadcachesize_test_flat_cpu_caches                  PASSED in 0.5s
//tcmalloc/testing:threadcachesize_test_hpaa                             PASSED in 0.4s
//tcmalloc/testing:threadcachesize_test_legacy_size_classes              PASSED in 0.3s
//tcmalloc/testing:threadcachesize_test_no_hpaa                          PASSED in 0.2s
//tcmalloc/testing:threadcachesize_test_numa_aware                       PASSED in 0.5s
//tcmalloc/testing:threadcachesize_test_real_cpu_caches                  PASSED in 0.4s
//tcmalloc/testing:threadcachesize_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.2s
//tcmalloc/testing:threadcachesize_test_small_but_slow                   PASSED in 3.6s
//tcmalloc/testing:threadcachesize_test_use_huge_region_more_often       PASSED in 0.3s
//tcmalloc/testing:variants_test_256k_pages                              PASSED in 0.3s
//tcmalloc/testing:variants_test_256k_pages_pow2                         PASSED in 0.3s
//tcmalloc/testing:variants_test_256k_pages_pow2_sharded_transfer_cache  PASSED in 0.0s
//tcmalloc/testing:variants_test_256k_pages_sharded_transfer_cache       PASSED in 0.0s
//tcmalloc/testing:variants_test_32k_pages                               PASSED in 0.3s
//tcmalloc/testing:variants_test_8k_pages                                PASSED in 0.2s
//tcmalloc/testing:variants_test_deprecated_perthread                    PASSED in 0.2s
//tcmalloc/testing:variants_test_flat_cpu_caches                         PASSED in 0.1s
//tcmalloc/testing:variants_test_hpaa                                    PASSED in 0.1s
//tcmalloc/testing:variants_test_legacy_size_classes                     PASSED in 0.0s
//tcmalloc/testing:variants_test_no_hpaa                                 PASSED in 0.0s
//tcmalloc/testing:variants_test_numa_aware                              PASSED in 0.1s
//tcmalloc/testing:variants_test_real_cpu_caches                         PASSED in 0.4s
//tcmalloc/testing:variants_test_separate_allocs_for_few_and_many_objects_spans PASSED in 0.1s
//tcmalloc/testing:variants_test_small_but_slow                          PASSED in 0.3s
//tcmalloc/testing:variants_test_use_huge_region_more_often              PASSED in 0.0s
//tcmalloc/testing:releasing_test_small_but_slow                         FAILED in 0.2s
  /home/lixiang/.cache/bazel/_bazel_lixiang/7019b445a0b1ff55bfbc59e169b8ae99/execroot/com_google_tcmalloc/bazel-out/k8-fastbuild/testlogs/tcmalloc/testing/releasing_test_small_but_slow/test.log
//tcmalloc:profile_test                                                  PASSED in 52.5s
  Stats over 2 runs: max = 52.5s, min = 3.4s, avg = 28.0s, dev = 24.5s
//tcmalloc:huge_page_filler_test                                         PASSED in 6.6s
  Stats over 3 runs: max = 6.6s, min = 1.1s, avg = 4.7s, dev = 2.5s
//tcmalloc:transfer_cache_test                                           PASSED in 16.4s
  Stats over 3 runs: max = 16.4s, min = 5.3s, avg = 9.1s, dev = 5.2s

Executed 699 out of 699 tests: 698 tests pass and 1 fails locally.
There were tests whose specified size is too big. Use the --test_verbose_timeout_warnings command line option to see which ones these are.
lixiang@lixiang-ThinkCentre-M730e-N010:~/code/tcmalloc$

lixiang@lixiang-ThinkCentre-M730e-N010:~/code/tcmalloc$ bazel build tcmalloc/testing:hello_main
INFO: Analyzed target //tcmalloc/testing:hello_main (0 packages loaded, 0 targets configured).
INFO: Found 1 target...
Target //tcmalloc/testing:hello_main up-to-date:
  bazel-bin/tcmalloc/testing/hello_main
INFO: Elapsed time: 0.083s, Critical Path: 0.00s
INFO: 1 process: 1 internal.
INFO: Build completed successfully, 1 total action

lixiang@lixiang-ThinkCentre-M730e-N010:~/code/tcmalloc$ bazel run tcmalloc/testing:hello_main
Starting local Bazel server and connecting to it...
DEBUG: /home/lixiang/.cache/bazel/_bazel_lixiang/7019b445a0b1ff55bfbc59e169b8ae99/external/rules_python/python/repositories.bzl:32:10: py_repositories is a no-op and is deprecated. You can remove this from your WORKSPACE file
INFO: Analyzed target //tcmalloc/testing:hello_main (58 packages loaded, 732 targets configured).
INFO: Found 1 target...
Target //tcmalloc/testing:hello_main up-to-date:
  bazel-bin/tcmalloc/testing/hello_main
INFO: Elapsed time: 2.869s, Critical Path: 0.07s
INFO: 1 process: 1 internal.
INFO: Build completed successfully, 1 total action
INFO: Running command line: bazel-bin/tcmalloc/testing/hello_main
Current heap size = 73728 bytes
hello world!
new'd 1073741824 bytes at 0x352180000000
Current heap size = 1073816576 bytes
malloc'd 1073741824 bytes at 0x3521c0000000
Current heap size = 2147558400 bytes




