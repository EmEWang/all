

内存泄漏
memcheck valgrind

test.cpp
g++ test.cpp -I../base/include/chen -L../base/lib/c7 -lchen

tcmalloc
react



nodiscard
c++17引入的一种标记符，其语法一般为[[nodiscard]]或[[nodiscard("string")]](c++20引入)，含义可以理解为“不应舍弃”。nodiscard一般用于标记函数的返回值或者某个类，当使用某个弃值表达式而不是cast to void 来调用相关函数时，编译器会发出相关warning。
1 一个被nodiscard声明的函数被调用时，比如说：
[[nodiscard]] int func(){return 1;}; // C++17
[[nodiscard("nodiscard_func_1")]] int func_1(){return 2;};  // C++20

func(); // warning
func_1(); // warning

编译器警告如下：
warning C4834: 放弃具有 "nodiscard" 属性的函数的返回值
warning C4858: 正在放弃返回值: nodiscard_func_1

保存函数返回值，或者使用cast to void
[[nodiscard]] int func(){return 1;}; // C++17
int a = func(); // no warning
static_cast<void>(func()); // no warning
则不会有警告。

2 一个函数返回一个enum或class（这个enum或class被nodiscard声明了），该函数被调用时（或出现在其他函数的定义中）
struct [[nodiscard]] testStruct{};
class [[nodiscard]] testClass{};
enum class [[nodiscard]] testEnum{test1, test2};

testClass funcClass() {return {};}
testEnum funcEnum() {return testEnum::test1;}

void func()
{
	funcEnum(); // warning
}

funcClass(); //warning

3 值得注意的是，当函数返回class的引用或指针时，nodiscard无效

class [[nodiscard]] testClass{};
testClass& funcClassRef() {testClass A; return A;}
testClass* funcClassPtr() {testClass A; return &A;}

funcClassRef(); // no warning
funcClassPtr(); // no warning





goto label;
string str;     //错误 应该放在goto的外面
label:
    xxxx;


不允许指针指向不完整的类类型
问题原因 1：没有包含对应结构体的头文件
解决办法 1：直接添加相对应的头文件

问题原因 2：对应的结构体定义写在了C/CPP文件里
解决办法 2：将结构体定义写在对应的头文件中

输出带双引号或单引号的字符串
单引号可直接输出  也可以用  \'
双引号需要加两个反斜杠+双引号 （\"）*2即\"代表一个双引号
示例：
  printf("\"软件\""); //其中\"代表一个双引号
  printf("'软件'");   // 或者printf("\'软件\'");


OpenCV
FFmpeg
十大流媒体开源项目
1 FFmpeg：全球领先的多媒体框架 http://ffmpeg.org/
2 VLC：开源的跨平台多媒体播放器及框架 http://www.videolan.org/
3 live555：开源流媒体服务项目 http://www.live555.com/
4 EasyDarwin： 企业级的流媒体平台框架 https://github.com/EasyDarwin
5 ijkplayer：B站基于ffplay 的跨平台播放器 https://github.com/Bilibili/ijkplayer
6 red5：Flash流媒体服务器 https://github.com/Red5/red5-server/releases
7 NGINX-RTMP： nginx模块 支持rtmp和HLS https://github.com/arut/nginx-rtmp-module
8 SRS：开源流媒体服务器系统 https://github.com/winlinvip/srs
9 OBS：开源流媒体系统 https://sourceforge.net/projects/obsproject/
10 绝影：移动端深度学习框架 https://github.com/in66-dev/In-Prestissimo




库调用与程序--------------------------------------------------------------------------------
int printf (const char * szFormat, ...) 第一个参数是一个格式化字符串 后面是与格式化字符串中的代码相对应的不同类型多个参数
int sprintf (char * szBuffer, const char * szFormat, ...) 第一个参数是字符串缓冲区，后面是一个格式字串。sprintf不是将格式化结果标准输出，而是将其存入szBuffer。该函数返回该字符串的长度。
sprintf函数vs2015提示该函数可能不安全，建议使用sprintf_s函数
几乎每个人都经历过，当格式化字符串与被格式化的变数不合时，可能使printf 执行错误并可能造成程序当掉。使用sprintf 时，您不但要担心这些，而且还有一个新的负担：
您定义的字符串缓冲区必须足够大以存放结果。Microsoft 专用函数_snprintf 解决了这一问题，此函数引进了另一个参数，表示以字节计算的缓冲区大小。
同样_snprintf函数vs2015也提示该函数可能不安全，建议使用_snprintf_s函数
int vsprintf(char *string, char *format, va_list param);
vsprintf 是sprintf 的一个变形，它只有三个参数。vsprintf 用于执行有不定数量参数的函数，类似printf 格式。vsprintf的前两个参数与sprintf相同：
一个用于保存结果的字符串缓冲区和一个格式化字符串。第三个参数是指向格式化参数队列的指针。实际上，该指针指向在堆栈中供函数调用的变量。
va_list、va_start和va_end宏（在STDARG.H中定义）帮助我们处理堆栈指针。va_start宏将pArg设置为指向一个堆栈变量，该变量位址在堆栈参数szFormat的上面。
同样vsprintf 函数vs2015也提示该函数可能不安全，我们使用vsprintf_s函数
int _vscprintf(const char *format,va_list argptr); Returns the number of characters in the string referenced by a list of arguments 返回格式化列表字符字节数
vsnprintf
_vsnprintf_s，


strrchr strtok strcat strdup[POSIX] _strdup[win]将串拷贝到新建的位置处 内部调用了malloc()为变量分配内存 memmove memcpy stricmp _stricmp strlwr _strlwr strupr_strupr
GetModuleFileName(HMODULE hModule,char* name,DWORD size)获取模块路径 || readlink("/proc/self/exe",buf,sizeof(buf)-1)获取当前程序路径 realpath(path,fullPath)将参数path所指的相对路径转换成绝对路径
int _access(const char *name, int mode) 判断文件或目录是否存在  mode 00只检查文件是否存在 02写权限 04读权限 06读写权限 io.h || access  unistd.h
CreateDirectory(const char *name, void* p) 创建目录 不能在不存在的目录里建立目录 || mkdir(lpPathName, S_IRWXG)
SetUnhandledExceptionFilter 捕获让程序的崩溃            ||
HANDLE hd=::CreateEvent(NULL,TRUE,FALSE,"Global\\MXSoft-netflow-instance") 创建或打开一个命名的或无名的事件对象
GetLastError()==ERROR_ALREADY_EXISTS
SetLastError(0)
GetPrivateProfileString      读取配置ini文件
ResetEvent、CreateEvent、SetEvent
InterlockedIncrement win 实现数的原子性加减   || __sync_fetch_and_add linux
MultiByteToWideChar WideCharToMultiByte 多字节字符转换
CW2T
GetPrivateProfileString 读配置ini文件
                             ||   sem_open sem_close sem_unlink sem_post sem_wait sem_trywait sem_timedwait
CreateEvent CloseHandle WaitForSingleObject WaitForMultipleObjects ResetEvent SetEvent


window 头文件 winsock.h 也可以使用：Winsock2.h  lib(Ws2_32.lib) dll(Ws2_32.dll) linux 头文件：<arpa/inet.h>
window char FAR* PASCAL FAR inet_ntoa( struct in_addr in); net_ntoa返回一个char *,而这个char *的空间是在inet_ntoa里面静态分配的，所以inet_ntoa后面的调用会覆盖上一次的调用 将一个32位网络字节序的二进制IP地址转换成相应的点分十进制的IP地址
linux  char *inet_ntoa(struct in_addr in);将一个32位网络字节序的二进制IP地址转换成相应的点分十进制的IP地址（返回点分十进制的字符串在静态内存中的指针）。
in_addr_t inet_addr(const char *cp); 字符串，一个点分十进制的IP地址 如果正确执行将返回一个无符号长整数型数。如果传入的字符串不是一个合法的IP地址，将返回INADDR_NONE。
uint32_t htonl(uint32_t hostlong); 将主机数转换成无符号长整形的网络字节顺序
uint16_t ntohs(uint16_t netshort); 将一个无符号短整型数从网络字节顺序转换为主机字节顺序
uint32_t ntohl(uint32_t netlong);本函数将一个32位数由网络字节顺序转换为主机字节顺序
uint16_t ntohs(uint16_t netshort);本函数将一个16位数由网络字节顺序转换为主机字节顺序。
recvfrom






BOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved){                 //windows 加载dll时 启动函数
	switch (ul_reason_for_call)	{
	case DLL_PROCESS_ATTACH:		_beginthread(IPMGM_InitData,0,NULL);		break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;	}
	return TRUE;
}
hModule参数：指向DLL本身的实例句柄；
lpReserved参数：为0表示隐式载入，1表示显式载入
ul_reason_for_call参数：指明了DLL被调用的原因，可以有以下4个取值：
DLL_PROCESS_ATTACH：
当DLL被进程 第一次 调用时，导致DllMain函数被调用，同时ul_reason_for_call的值为DLL_PROCESS_ATTACH，如果同一个进程后来再次调用此DLL时，操作系统只会增加DLL的使用次数，不会再用DLL_PROCESS_ATTACH调用DLL的DllMain函数
DLL_PROCESS_DETACH：
当DLL被从进程的地址空间解除映射时，系统调用了它的DllMain，传递的ul_reason_for_call值是DLL_PROCESS_DETACH。
DLL_THREAD_ATTACH：
当进程创建一线程时，系统查看当前映射到进程地址空间中的所有DLL文件映像，并用值DLL_THREAD_ATTACH调用DLL的DllMain函数。新创建的线程负责执行这次的DLL的DllMain函数，只有当所有的DLL都处理完这一通知后，系统才允许线程开始执行它的线程函数
DLL_THREAD_DETACH：
如果线程调用了ExitThread来结束线程（线程函数返回时，系统也会自动调用ExitThread），系统查看当前映射到进程空间中的所有DLL文件映像，并用DLL_THREAD_DETACH来调用DllMain函数，通知所有的DLL去执行线程级的清理工作。

转发函数方法
#pragma comment(linker, "/EXPORT:[查找的函数名]=[函数实现所在的DLL模块].[实际导出的函数名],@序号")

dll劫持例子:
quazip2.dll中有方法??0QuaAdler32@@QEAA@AEBV0@@Z
新写一个dll 叫quazip2.dll 劫持quazip.dll的方法

//quazip2.dll 代码
#include<Windows.h>

#pragma comment(linker,"/EXPORT:??0QuaAdler32@@QEAA@AEBV0@@Z=quazip2.??0QuaAdler32@@QEAA@AEBV0@@Z,@1")
#pragma comment(linker,"/EXPORT:??0QuaAdler32@@QEAA@XZ=quazip2.??0QuaAdler32@@QEAA@XZ,@2")
#pragma comment(linker,"/EXPORT:??0QuaChecksum32@@QEAA@AEBV0@@Z=quazip2.??0QuaChecksum32@@QEAA@AEBV0@@Z,@3")

BOOL APIENTRY DllMain
(
    HMODULE hModule,
    DWORD urfc,
    LPVOID lpReserved
)
{
    switch (urfc)
    {
    case DLL_PROCESS_ATTACH:
        MessageBox(NULL, LPCSTR("劫持完成"), LPCSTR("Hijack"), MB_OK); //若这里创建一个新线程，并开启一个管道开启socket通讯执行反弹shell就能很好的隐藏运行这个后门。
        break;
    case DLL_PROCESS_DETACH:
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    default:
        break;
    }
    return TRUE;
}


__attribute__((constructor)) 修饰的函数在main函数之前执行     linux
__attribute__((destructor))  修饰的函数在main函数之后执行


_beginthread和_beginthreadex()
对应的还有：endthread（）和endthreadex()都是用来创建线程的创建和结束的；区别在于
1.形式上看，_beginthreadex()更像CreateThread（）._beginthreadex()比_beginthread()多了3个参数；
2.创建线程函数不同：_beginthreadex()的线程函数必须使用——Stdcall调用方式，而且必须返回一个unsigned int 的退出码；
3._beginthreadex()在创建线程失败时返回0，而_beginthread()创建失败返回-1；
4.调用_beginthread()创建线程，并用endthread()结束线程时，系统会自动关闭线程句柄；而_beginthreadex()创建线程后，使用endthreadex()结束线程后，系统并不能自动释放线程句柄，还需要自己去关闭线程句柄。
他们内部都调用CreateThread（函数，不过内部所做的工作有所区别；

CreateThread()与_beginthread()的区别详细解析
我们知道在Windows下创建一个线程的方法有两种，一种就是调用Windows API CreateThread()来创建线程；另外一种就是调用MSVC CRT的函数_beginthread()或_beginthreadex()来创建线程。相应的退出线程也有两个函数Windows API的ExitThread()和CRT的_endthread()。这两套函数都是用来创建和退出线程的，它们有什么区别呢？
很多开发者不清楚这两者之间的关系，他们随意选一个函数来用，发现也没有什么大问题，于是就忙于解决更为紧迫的任务去了，而没有对它们进行深究。等到有一天忽然发现一个程序运行时间很长的时候会有细微的内存泄露，开发者绝对不会想到是因为这两套函数用混的结果。
根据Windows API和MSVC CRT的关系，可以看出来_beginthread()是对CreateThread()的包装，它最终还是调用CreateThread()来创建线程。那么在_beginthread()调用CreateThread()之前做了什么呢？我们可以看一下_beginthread()的源代码，它位于CRT源代码中的thread.c。我们可以发现它在调用CreateThread()之前申请了一个叫_tiddata的结构，然后将这个结构用_initptd()函数初始化之后传递给_beginthread()自己的线程入口函数_threadstart。_threadstart首先把由_beginthread()传过来的_tiddata结构指针保存到线程的显式TLS数组，然后它调用用户的线程入口真正开始线程。在用户线程结束之后，_threadstart()函数调用_endthread()结束线程。并且_threadstart还用__try/__except将用户线程入口函数包起来，用于捕获所有未处理的信号，并且将这些信号交给CRT处理。
所以除了信号之外，很明显CRT包装Windows API线程接口的最主要目的就是那个_tiddata。这个线程私有的结构里面保存的是什么呢？我们可以从mtdll.h中找到它的定义，它里面保存的是诸如线程ID、线程句柄、erron、strtok()的前一次调用位置、rand()函数的种子、异常处理等与CRT有关的而且是线程私有的信息。可见MSVC CRT并没有使用我们前面所说的__declspec(thread)这种方式来定义线程私有变量，从而防止库函数在多线程下失效，而是采用在堆上申请一个_tiddata结构，把线程私有变量放在结构内部，由显式TLS保存_tiddata的指针。
了解了这些信息以后，我们应该会想到一个问题，那就是如果我们用CreateThread()创建一个线程然后调用CRT的strtok()函数，按理说应该会出错，因为strtok()所需要的_tiddata并不存在，可是我们好像从来没碰到过这样的问题。查看strtok()函数就会发现，当一开始调用_getptd()去得到线程的_tiddata结构时，这个函数如果发现线程没有申请_tiddata结构，它就会申请这个结构并且负责初始化。于是无论我们调用哪个函数创建线程，都可以安全调用所有需要_tiddata的函数，因为一旦这个结构不存在，它就会被创建出来。
那么_tiddata在什么时候会被释放呢？ExitThread()肯定不会，因为它根本不知道有_tiddata这样一个结构存在，那么很明显是_endthread()释放的，这也正是CRT的做法。不过我们很多时候会发现，即使使用CreateThread()和ExitThread() （不调用ExitThread()直接退出线程函数的效果相同），也不会发现任何内存泄露，这又是为什么呢？经过仔细检查之后，我们发现原来密码在CRT DLL的入口函数DllMain中。我们知道，当一个进程/线程开始或退出的时候，每个DLL的DllMain都会被调用一次，于是动态链接版的CRT就有机会在DllMain中释放线程的_tiddata。可是DllMain只有当CRT是动态链接版的时候才起作用，静态链接CRT是没有DllMain的！这就是造成使用CreateThread()会导致内存泄露的一种情况，在这种情况下，_tiddata在线程结束时无法释放，造成了泄露。
如果用动态链接的CRT （/MD，/MDd）就不会有问题，但是，如果使用静态链接CRT （/MT，/MTd），运行程序后在进程管理器中观察它就会发现内存用量不停地上升，但是如果我们把thread()函数中的ExitThread()改成_endthread()就不会有问题，因为_endthread()会将_tiddata()释放。
这个问题可以总结为：当使用CRT时（基本上所有的程序都使用CRT），请尽量使用_beginthread()/_beginthreadex()/_endthread()/_endthreadex()这组函数来创建线程。在MFC中，还有一组类似的函数是AfxBeginThread()和AfxEndThread()，根据上面的原理类推，它是MFC层面的线程包装函数，它们会维护线程与MFC相关的结构，当我们使用MFC类库时，尽量使用它提供的线程包装函数以保证程序运行正确


isBigEndian(){//大端判断
	union {		long l;		char c[sizeof(long)];	} u;
	u.l = 1;	return (u.c[sizeof(long) - 1] == 1);}

UTF8ToANSI(char*, string) ???

clock_t clock(void); typedef long clock_t; #define CLOCKS_PER_SEC ((clock_t)1000)         头文件ctime（或time.h）
gettimeofday
void ftime(timeb*)   time_t time(time_t*)   tm* gmtime(time_t*)   tm* localtime(time_t*)   time_t mktime(&tm)

类中的static成員变量 在类中声明 需要的在类外定义

__asm 关键字用于调用内联汇编程序，并且可在 C 或 C++ 语句合法时出现。  _asm是 __ASM 的同义词。
语法  __asm后跟一个程序集指令、一组括在大括号中的指令或者至少一对空大括号。
1、__asm与大括号一起使用，则该关键字表示大括号之间的每一行都是一条汇编语言语句。
   如：_asm　{　mov al, 2 　mov dx, 0xD007　out al, dx　}
2、__asm不与大括号一起使用，放在代码行首部，则 __asm 关键字表示此行的其余部分是一条汇编语言语句。
  如：
__asm mov al, 2
__asm mov dx, 0xD007
__asm out al, dx
3、__asm做语句分隔符，可将汇编语句放在同一行代码中。
如：__asm mov al, 2 __asm mov dx, 0xD007 __asm out al, dx

%p 打印内存地址 若是类的元素 这打印offset  如class A; A a; &a.x(内存) &A::x(offset)


#表示：对应变量字符串化,即加双引号    --- #define B(x) #x     则B(m) 字面量表示 "m", B(abcd123)  字面量表示 "abcd123"
连接符#@：它将单字符标记符变换为单字符，即加单引号   ---  #define A(x) #@x  //此处x仅限于单个字符 则A(m) 字面量表示 'm',  而A(abc),则无效
##表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符  ----  #define C(x)　　Class##x      C(List) 字面量表示 ClassList

不同平台下C\C++数值数据类型长度如下：
类型          win32    win64    linux32    linux64
char          1        1        1          1
short         2        2        2          2
int           4        4        4          4
long          4        4        4          8         *
long long     8        8        8          8
float         4        4        4          4
double        8        8        8          8
void*         4        8        4          8         *
其中long类型和指针类型需要特别注意，编写跨平台的软件时尽量不要使用long类型，或者需要对long类型做特殊处理。

[整数0X01020304]
大端  字节  小端
1234 低←→高 4321
□□□□ ?转化? □□□□
↑↑↑↑________↑↑↑↑
|||__________|||
||____________||
|______________|







[wjg]静态链接库与动态链接库--------------------------------------------------------------------------------
1 linux下
gcc  tiger.c /usr/lib/libm.a  -o tiger
则可以编译通过。为了避免在命令行中指定长的路径，编译器为链接函数库提供了快捷的选项“-l”。因此可以使用下面的方法：
gcc  tiger.c -lm –o tiger
注：选项-lNAME使用连接器尝试链接系统库目录中的函数库文件libNAME.a。

1.1静态库

1.1.1静态库是.o文件的一个集合，通常静态库以”.a”为后缀。静态库由程序ar生成
1.1.2生成目标文件tiger.o	gcc  -o tiger.o  -c  tiger.c
1.1.3后生成静态库libadd.a	ar  rcs libadd.a  tiger.o
1.1.4在使用-l选项时，-o选项的目的名要在-l链接的库名之前，否则gcc会认为-l是生成的目标而出错
1.1.5因为linux的gcc 默认链接动态库，但动态库不存在时，才链接静态库，若是需要强制指定静态库需要指定选项 -static
1.1.6目录/home/username/public 下 libabc.a 静态库，则需指定静态库的目录 -L/home/username/public (注意 -L 后面是没有空格的)，指定静态库 -labc
1.1.7静态库链接时搜索路径顺序：
ld回去找GCC命令中的参数-L
再去找GCC的环境变量LIBRARY_PATH
再找内定目录/lib /usr/lib /usr/local/lib 这是当初compiler gcc时写在程序内的动态链接时、执行时搜索路径顺序
1.2动态库
1.2.1共享库 是在程序执行期间需要调用到共享库的时候才加载到内存里面，可以被多个程序共享使用；每个共享库都有三个文件名：real name、soname 和 linker name。
//real name
-rwxr-xr-x 1 root root  11511640  libavcodec.so.57.24.102
//soname
lrwxrwxrwx 1 root root   libavcodec.so.57 -> libavcodec.so.57.24.102
//linker name
lrwxrwxrwx 1 root root   libavcodec.so -> libavcodec.so.57.24.102
real name：真正的库文件，包含库文件的完整版本号
soname：符号链接的名字，只包含共享库的主版本号（主版本号相同，函数的接口是一致的）；因此应用程序的.dynamic段只记录共享库的soname，只要soname一致，这个共享库就可以用。
linker name：在编译链接时使用，gcc 的-L选项应该指定linker name所在目录
1.2.2创建动态库使用如下命令：gcc -shared -fPIC abc.c -o libabc.so
或者分两步gcc -c -fPIC aaa.cpp -o aaa.o		gcc -shared -fPIC aaa.o -o libaaa.so
1.2.3链接路径
连接时找不到某一个函数，出现xxxxx undefined，应该就是连接时找不到相应的动态库，连接时动态库的路径如下：
默认路径是：/lib, /usr/lib/, /usr/local/lib
-L: 指定连接时动态库的路径
LD_LIBRARY_PATH：指定连接路径
1.2.4运行路径
运行应用程序时出现 error while loading shared libraries，则是加载时找不到相应的动态库
ELF可执行文件中动态段中DT_RPATH所指定的路径。这实际上是通过一种不算很常用，却比较实用的方法所设置的：编译目标代码时，可以对gcc加入链接参数-Wl,-rpath指定动态库搜索路径；
环境变量LD_LIBRARY_PATH指定的动态库搜索路径；
/etc/ld.so.cache中所缓存的动态库路径（如果支持ld.so.cache的话）。这可以通过修改配置文件/etc/ld.so.conf中指定的动态库搜索路径来改变；
默认的动态库搜索路径/lib；
默认的动态库搜索路径/usr/lib。
1.2.5设置共享库加载路径
打开共享库路径配置文件：sudo vi /etc/ld.so.conf
最后一行添加mycal路径：/home/username/calc
更新共享库加载路径：sudo ldconfig -v
此时可以看到自动创建出来了soname libcalc.so.1
手动添加link name：ln -s libcalc.so.1.10 libcalc.so
2 windows下
2.1静态库
2.1.1通过vs生成一个静态库项目
2.1.2头文件中生命接口 源文件中实现方法
2.1.3结果就是生成的.lib文件，并用.h引用方法
2.2动态库
2.2.1通过vs生成一个动态库项目
2.2.2多一个dllMain
BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
2.2.3头文件中的函数声明有导出 extern "C" __declspec(dllexport)
2.2.4结果就是生成的.lib .dll文件，并用.h引用方法
2.2.5动态库转成静态库
2.2.6最近调试程序的经常弹出找不到DLL。只好一个个把DLL拷贝到程序目录下（我是拷贝到源文件目录，也有人说是Debug目录）。
visual studio中指定dll存放目录的几种方法
项目属性->配置属性->调试->工作目录。
（1）选择当前工程，右击"属性" -> "配置属性" -> "调试"，在"工作目录"设置dll的路径
优点：跨平台（拷贝到其他平台不用改动）
缺点：目录不能很干净，因为生成的文件会自动放到这个目录下
（2）创建一个文件夹lib，里面放入所有需要的dll文件,右击"属性" -> "生成事件" -> "预先生成事件"，输入命令xcopy $(SolutionDir)httpclient/bin $(OutDir) /a /F /I /Y /C",在预处理的时候把dll文件拷贝到Debug目录下。
优点：跨平台（拷贝到其他平台不用改动）
缺点：dll文件太多，文件太大的情况下，拷贝会很费时。
（3）把dll文件目录设置到环境变量或者把dll文件拷贝到system32目录下(64位系统好像是拷贝到system64中)
优点：项目无需太多改动
缺点：不能跨平台，系统侵入
（4）设置项目的环境变量，选择当前工程，右击"属性" -> "配置属性" -> "调试"，在"环境"添加dll路径，如：path=%path%;../httpclient/bin








函数调用方式
调用函数时，计算机常用栈来存放函数执行需要的参数，由于栈的空间大小是有限的，在windows下，栈是向低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，如果申请的空间超过栈的剩余空间时，将提示overflow。
在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的！
VC中默认调用是 __cdecl 方式，Windows API 使用 __stdcall 调用方式，在 DLL 导出函数中，为了跟 Windows API 保持一致，建议使用 __stdcall 方式。
C/C++ 函数调用约定，主要是对以下两个方面进行了约定：
1、当参数个数多于一个时，按照什么顺序把参数压入堆栈。---调用函数时，参数的入栈顺序。
2、函数调用后，由谁来把堆栈恢复原状。---调用结束后，由谁（调用者还是被调用者）负责将参数出栈。

__stdcall的全称是standard call。是C++的标准调用方式。
stdcall 调用方式又被称为 Pascal 调用方式。在Microsoft C++系列的C/C++编译器中，使用 PASCAL 宏，WINAPI 宏和 CALLBACK 宏来指定函数的调用方式为 stdcall。
int _stdcall function(int a, int b);
函数参数的入栈顺序为从右到左入栈。函数返回时使用retn x指令，其中x为调整堆栈的字节数。这种方式叫做自动清栈。即被调用的函数的参数个数是固定的，调用者必须严格按照定义传递参数，一个不多，一个不少。
（1）参数从右向左依次压入堆栈.
（2）由被调用函数自己来恢复堆栈，称为自动清栈。
（3）函数名自动加前导下划线，后面紧跟着一个@，其后紧跟着参数的大小。

__cdecl的全称是C Declaration，即C语言默认的函数调用方式。
int function(int a, int b) // 不加修饰符就是C调用方式
int _cdecl function(int a, int b) // 明确指定用C调用方式
函数参数的入栈顺序为从右到左入栈。函数返回时作用ret指令。由调用者手动清栈。被调用的函数支持可变参数。调用者根据调用时传入参数的个数，手动平衡堆栈。
（1）参数从右向左依次压入堆栈.
（2）由调用者恢复堆栈，称为手动清栈。
（3）函数名自动加前导下划线。

相同点
参数入栈顺序相同：从右到左

不同点
堆栈平衡方式不同：__stdcall自动清栈，__cdecl手动清栈。
返回指令不同：_stdcall使用retn x, __cdecl使用ret
编译后函数的修饰名不同： 假设有函数int foo(int a, int b), 采用__stdcall编译后的函数名为_foo@8，而采用__cdecl编译后的函数名为_foo。

实例
支持可变参数的函数必须定义为__cdecl，如：
int printf(char *fmt, ...);

在windef.h中对__stdcall和__cdecl的定义
 #define CALLBACK   __stdcall
 #define WINAPI    __stdcall
 #define WINAPIV   __cdecl
 #define APIENTRY   WINAPI
 #define APIPRIVATE  __stdcall
 #define PASCAL    __stdcall
 #define cdecl _cdecl
 #ifndef CDECL
 #define CDECL _cdecl
 #endif


fastcall
fastcall 按照名字上理解就可以知道，它是一种快速调用方式，因为它通过 CPU 寄存器来传递参数。此方式的函数的第一个和第二个DWORD参数通过ecx和edx传递，后面的参数从右向左的顺序压入栈。被调用函数清理堆栈。
其声明语法为：
int fastcall function(int a, int b);

thiscall
thiscall 调用方式是唯一一种不能显示指定的修饰符。它是C++类成员函数缺省的调用方式。由于成员函数调用还有一个this指针，因此必须用这种特殊的调用方式。
thiscall调用方式意味着：
（1）参数从右向左压入栈。
（2）如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压入栈后被压入栈。参数个数不定的，由调用者清理堆栈，否则由函数自己清理堆栈。可以看到，对于参数个数固定的情况，它类似于stdcall，不定时则类似于cdecl。


1. _cdecl
(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。
(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用->被调用函数的执行->被调用函数的结果返回->调用方清除调整堆栈。
(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。
(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。
2. _stdcall(CALLBACK/WINAPI)
(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入_stdcall，通常win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。
(2). 所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用->被调用函数的执行-> 被调用方清除调整堆栈->被调用函数的结果返回。
(3). 这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。
(4). 函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样
(5). 因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。
3． PASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。
4. _fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传
递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。
5. _thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。
6. _fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。
7. C中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。
8. 带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:
int printf(char * fmtStr, ...);
int scanf(char * fmtStr, ...);
9. 函数名修饰
(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。
(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。
10. 函数名修饰规则：
(1). 为什么要函数名修饰：
函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。
(2). C语言：
 对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。
(3). C++语言：
   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管__cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于__stdcall方式，参数表的开始标识是“@@YG”，对于__cdecl方式则是“@@YA”，对于__fastcall方式则是“@@YI”。参数表的拼写代号如下所示： X--void     D--char     E--unsigned char     F--short     H--int     I--unsigned int     J--long     K--unsigned long（DWORD） M--float     N--double     _N—bool U—struct ....
指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。
下面举两个例子，假如有以下函数声明：
int Function1(char *var1,unsigned long); 其函数修饰名为“?Function1@@YGHPADK@Z”，
而对于函数声明： oid Function2(); 其函数修饰名则为“?Function2@@YGXXZ” 。
对于C++的类成员函数（其调用方式是thiscall），函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是“@@IAE”,私有（private）成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。
11. 查看函数的名字修饰
有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。
12. _beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。
13. #define CALLBACK __stdcall //这就是传说中的回调函数
#define WINAPI __stdcall //这就是传说中的WINAPI #define WINAPIV __cdecl
#define APIENTRY WINAPI //DllMain的入口就在这里 #define APIPRIVATE __stdcall #define PASCAL __stdcall



对_stdcall 的理解
在C语言中，假设我们有这样的一个函数：int function(int a,int b)
调用时只要用result = function(1,2)这样的方式就可以使用这个函数。但是，当高级语言被编译成计算机可以识别的机器码时，有一个问题就凸现出来：在CPU中，计算机没有办法知道一个函数调用需要多少个、什么样的参数，也没有硬件可以保存这些参数。也就是说，计算机不知道怎么给这个函数传递参数，传递参数的工作必须由函数调用者和函数本身来协调。为此，计算机提供了一种被称为栈的数据结构来支持参数传递。
栈是一种先进后出的数据结构，栈有一个存储区、一个栈顶指针。栈顶指针指向堆栈中第一个可用的数据项（被称为栈顶）。用户可以在栈顶上方向栈中加入数据，这个操作被称为压栈(Push)，压栈以后，栈顶自动变成新加入数据项的位置，栈顶指针也随之修改。用户也可以从堆栈中取走栈顶，称为弹出栈(pop)，弹出栈后，栈顶下的一个元素变成栈顶，栈顶指针随之修改。函数调用时，调用者依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中取得数据，并进行计算。函数计算结束以后，或者调用者、或者函数本身修改栈，使堆栈恢复原装。
在参数传递中，有两个很重要的问题必须得到明确说明：
当参数个数多于一个时，按照什么顺序把参数压入堆栈函数调用后，由谁来把堆栈恢复原装。在高级语言中，通过函数调用约定来说明这两个问题。常见的调用约定有：
stdcall，cdecl，fastcall，thiscall，naked call
stdcall调用约定：
stdcall很多时候被称为pascal调用约定，因为pascal是早期很常见的一种教学用计算机程序设计语言，其语法严谨，使用的函数调用约定就是stdcall。在Microsoft C++系列的C/C++编译器中，常常用PASCAL宏来声明这个调用约定，类似的宏还有WINAPI和CALLBACK。
stdcall调用约定声明的语法为(以前文的那个函数为例）：
int __stdcall function(int a,int b)
stdcall的调用约定意味着：1）参数从右向左压入堆栈，2）函数自身修改堆栈 3)函数名自动加前导的下划线，后面紧跟一个@符号，其后紧跟着参数的尺寸。
以上述这个函数为例，参数b首先被压栈，然后是参数a，函数调用function(1,2)调用处
翻译成汇编语言将变成：
push 2 第二个参数入栈
push 1 第一个参数入栈
call function 调用参数，注意此时自动把cs:eip入栈
而对于函数自身，则可以翻译为：
push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复mov ebp,esp 保存堆栈指针mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp + 0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 8
而在编译时，这个函数的名字被翻译成_function@8
注意不同编译器会插入自己的汇编代码以提供编译的通用性，但是大体代码如此。其中在函数开始处保留esp到ebp中，在函数结束恢复是编译器常用的方法。
从函数调用看，2和1依次被push进堆栈，而在函数中又通过相对于ebp(即刚进函数时的堆栈指针）的偏移量存取参数。函数结束后，ret 8表示清理8个字节的堆栈，函数自己恢复了堆栈。
cdecl调用约定：
cdecl调用约定又称为C调用约定，是C语言缺省的调用约定，它的定义语法是：
int function (int a ,int b) //不加修饰就是C调用约定
int __cdecl function(int a,int b)//明确指出C调用约定
在写本文时，出乎我的意料，发现cdecl调用约定的参数压栈顺序是和stdcall是一样的，参数首先由有向左压入堆栈。所不同的是，函数本身不清理堆栈，调用者负责清理堆栈。由于这种变化，C调用约定允许函数的参数的个数是不固定的，这也是C语言的一大特色。对于前面的function函数，使用cdecl后的汇编码变成：
调用处
push 1
push 2
call function
add esp,8 注意：这里调用者在恢复堆栈
被调用函数_function处push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复
mov ebp,esp 保存堆栈指针
mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp + 0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 注意，这里没有修改堆栈
MSDN中说，该修饰自动在函数名前加前导的下划线，因此函数名在符号表中被记录为_function，但是我在编译时似乎没有看到这种变化。由于参数按照从右向左顺序压栈，因此最开始的参数在最接近栈顶的位置，因此当采用不定个数参数时，第一个参数在栈中的位置肯定能知道，只要不定的参数个数能够根据第一个后者后续的明确的参数确定下来，就可以使用不定参数，例如对于CRT中的sprintf函数，定义为：
int sprintf(char* buffer,const char* format,...)
由于所有的不定参数都可以通过format确定，因此使用不定个数的参数是没有问题的。

fastcall
fastcall调用约定和stdcall类似，它意味着：
函数的第一个和第二个DWORD参数（或者尺寸更小的）通过ecx和edx传递，其他参数通过
从右向左的顺序压栈
被调用函数清理堆栈
函数名修改规则同stdcall
其声明语法为：int fastcall function(int a,int b)
thiscall
thiscall是唯一一个不能明确指明的函数修饰，因为thiscall不是关键字。它是C++类成
员函数缺省的调用约定。由于成员函数调用还有一个this指针，因此必须特殊处理，th
iscall意味着：
参数从右向左入栈
如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针
在所有参数压栈后被压入堆栈。
对参数个数不定的，调用者清理堆栈，否则函数自己清理堆栈
为了说明这个调用约定，定义如下类和使用代码：

class A
{
public:
int function1(int a,int b);
int function2(int a,...);
};
int A::function1 (int a,int b)
{
return a+b;
}
＃i nclude
int A::function2(int a,...)
{
va_list ap;
va_start(ap,a);
int i;
int result = 0;
for(i = 0 i < a i ++)
{
result += va_arg(ap,int);
}
return result;
}
void callee()
{
A a;
a.function1 (1,2);
a.function2(3,1,2,3);
}

callee函数被翻译成汇编后就变成：
//函数function1调用
0401C1D push 2
00401C1F push 1
00401C21 lea ecx,[ebp-8]
00401C24 call function1 注意，这里this没有被入栈
//函数function2调用
00401C29 push 3
00401C2B push 2
00401C2D push 1
00401C2F push 3
00401C31 lea eax,[ebp-8] 这里引入this指针
00401C34 push eax
00401C35 call function2
00401C3A add esp,14h
可见，对于参数个数固定情况下，它类似于stdcall，不定时则类似cdecl
naked call


这是一个很少见的调用约定，一般程序设计者建议不要使用。编译器不会给这种函数增加初始化和清理代码，更特殊的是，你不能用return返回返回值，只能用插入汇编返回结果。这一般用于实模式驱动程序设计，假设定义一个求和的加法程序，可以定义为：
__declspec(naked) int add(int a,int b)
{
__asm mov eax,a
__asm add eax,b
__asm ret
}
注意，这个函数没有显式的return返回值，返回通过修改eax寄存器实现，而且连退出函数的ret指令都必须显式插入。上面代码被翻译成汇编以后变成：
mov eax,[ebp+8]
add eax,[ebp+12]
ret 8
注意这个修饰是和__stdcall及cdecl结合使用的，前面是它和cdecl结合使用的代码，对于和stdcall结合的代码，则变成：
__declspec(naked) int __stdcall function(int a,int b)
{
__asm mov eax,a
__asm add eax,b
__asm ret 8 //注意后面的8
}
至于这种函数被调用，则和普通的cdecl及stdcall调用函数一致。函数调用约定导致的常见问题如果定义的约定和使用的约定不一致，则将导致堆栈被破坏，导致严重问题，下面是两种常见的问题：
函数原型声明和函数体定义不一致
DLL导入函数时声明了不同的函数约定
以后者为例，假设我们在dll种声明了一种函数为：
__declspec(dllexport) int func(int a,int b);//注意，这里没有stdcall，使用的是
cdecl
使用时代码为：
typedef int (*WINAPI DLLFUNC)func(int a,int b);
hLib = LoadLibrary(...);
DLLFUNC func = (DLLFUNC)GetProcAddress(...)//这里修改了调用约定
result = func(1,2);//导致错误
由于调用者没有理解WINAPI的含义错误的增加了这个修饰，上述代码必然导致堆栈被破坏，MFC在编译时插入的checkesp函数将告诉你，堆栈被破坏了。



extern "C" __declspec(dllexport)

一、__declspec(dllexport):
将一个函数声名为导出函数，就是说这个函数要被其他程序调用，即作为DLL的一个对外函数接口。通常它和extern "C" 合用，形式如下：
extern "C"{__declspec(dllexport) RETURN_TYPE FUNCTION(){}}
这是由于在制作DLL导出函数时由于C++存在函数重载，因此__declspec(dllexport)    FUNCTION(int,int)    在DLL会被decorate，例如被decorate成为    function_int_int，而且不同的编译器decorate的方法不同，造成了在用GetProcAddress取得FUNCTION地址时的不便，使用extern    "C"时，上述的decorate不会发生，因为C没有函数重载，如此一来被extern"C"修饰的函数，就不具备重载能力。

二、以下内容摘自MSDN：
“在 32 位编译器版本中，可以使用__declspec(dllexport) 关键字从 DLL 导出数据、函数、类或类成员函数。__declspec(dllexport)将导出指令添加到对象文件(即obj文件)，若要导出函数，__declspec(dllexport)关键字必须出现在调用约定关键字的左边（如果指定了关键字）。例如：
__declspec(dllexport) void __cdecl Function1(void);
若要导出类中的所有公共数据成员和成员函数，关键字必须出现在类名的左边，如下所示：

class __declspec(dllexport) CExampleExport : public CObject
{ ... class definition ... };

生成 DLL 时，通常创建一个包含正在导出的函数原型和/或类的头文件，并将__declspec(dllexport)添加到头文件中的声明。
若要提高代码的可读性，请为__declspec(dllexport)定义一个宏并对正在导出的每个符号使用该宏：
#define DllExport   __declspec( dllexport ) ”

三、__declspec(dllexport) 与 .def
模块定义 （.def） 文件是包含一个或多个描述各种 DLL 属性的 Module 语句的文本文件。
1、二者的目的都是将公共符号导入到应用程序中或从 DLL 导出函数。
2、添加 __declspec(dllexport)是为了提供不使用.def文件从 .EXE 或 .DLL 导出函数的简单方法。
3、如果不使用 __declspec (dllimport) 或 __declspec(dllexport) 导出 DLL 函数，则 DLL 需要.def文件。
4、并不是任何时候选择添加 __declspec(dllexport)而放弃.def的方式都是好的。如果DLL是提供给VC++用户使用的，只需要把编译DLL时产生的.lib提供给用户，它可以很轻松地调用你的DLL。但是如果DLL是供VB、PB、Delphi用户使用的，那么会产生一个小麻烦。因为VC++对于__declspec(dllexport) 声明的函数会进行名称转换，如下面的函数：
     __declspec(dllexport) int __stdcall IsWinNT()
     会转换为IsWinNT@0，这样你在VB中必须这样声明：
     Declare Function IsWinNT Lib "my.dll" Alias "IsWinNT@0" () As Long
     @的后面的数由于参数类型不同而可能不同。这显然不太方便。所以如果要想避免这种转换，就要使用.def文件方式。





Linux下__attribute__机制
GNU C 的一大特色就是__attribute__ 机制。__attribute__ 可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute ）。
__attribute__ 书写特征是：__attribute__ 前后都有两个下划线，并切后面会紧跟一对原括弧，括弧里面是相应的__attribute__ 参数。
__attribute__ 语法格式为：__attribute__ ((attribute-list))

__attribute__((visibility (“default“)))
GNU C 的一大特色就是attribute 机制。
试想这样的情景，程序调用某函数A，A函数存在于两个动态链接库liba.so,libb.so中，并且程序执行需要链接这两个库，此时程序调用的A函数到底是来自于a还是b呢？
这取决于链接时的顺序，比如先链接liba.so，这时候通过liba.so的导出符号表就可以找到函数A的定义，并加入到符号表中，链接libb.so的时候，符号表中已经存在函数A，就不会再更新符号表，所以调用的始终是liba.so中的A函数。
为了避免这种混乱，所以使用
__attribute__((visibility("default")))  //默认，设置为：default之后就可以让外面的类看见了。
__attribute__((visibility("hideen")))  //隐藏
设置这个属性。
isibility用于设置动态链接库中函数的可见性，将变量或函数设置为hidden，则该符号仅在本so中可见，在其他库中则不可见。
g++在编译时，可用参数-fvisibility指定所有符号的可见性（不加此参数时默认外部可见，参考man g++中-fvisibility部分）；若需要对特定函数的可见性进行设置，需在代码中使用attribute设置visibility属性。
编写大型程序时，可用-fvisibility=hidden设置符号默认隐藏，针对特定变量和函数，在代码中使用attribute ((visibility("default")))另该符号外部可见，这种方法可用有效避免so之间的符号冲突。（这里不是很理解）

在Linux下动态库(.so)中，通过GCC的C++ visibility属性可以控制共享文件导出符号。在GCC 4.0及以上版本中，有个visibility属性，可见属性可以应用到函数、变量、模板以及C++类。
限制符号可见性的原因：从动态库中尽可能少地输出符号是一个好的实践经验。输出一个受限制的符号会提高程序的模块性，并隐藏实现的细节。动态库装载和识别的符号越少，程序启动和运行的速度就越快。导出所有符号会减慢程序速度，并耗用大量内存。
“default”：用它定义的符号将被导出，动态库中的函数默认是可见的。”hidden”：用它定义的符号将不被导出，并且不能从其它对象进行使用，动态库中的函数是被隐藏的。default意味着该方法对其它模块是可见的。而hidden表示该方法符号不会被放到动态符号表里，所以其它模块(可执行文件或者动态库)不可以通过符号表访问该方法。
要定义GNU属性，需要包含__attribute__和用括号括住的内容。可以将符号的可见性指定为visibility(“hidden”)，这将不允许它们在库中被导出，但是可以在源文件之间共享。实际上，隐藏的符号将不会出现在动态符号表中，但是还被留在符号表中用于静态链接。
导出列表由编译器在创建共享库的时候自动生成，也可以由开发人员手工编写。导出列表的原理是显式地告诉编译器可以通过外部文件从对象文件导出的符号是哪些。GNU用户将此类外部文件称作为”导出映射”。

__attribute__((packed))
1. __attribute__ ((packed)) 的作用就是告诉编译器取消结构在编译过程中的优化对齐,按照实际占用字节数进行对齐，是GCC特有的语法。这个功能是跟操作系统没关系，跟编译器有关，gcc编译器不是紧凑模式的，我在windows下，用vc的编译器也不是紧凑的，用tc的编译器就是紧凑的。例如：
在TC下：struct my{ char ch; int a;} sizeof(int)=2;sizeof(my)=3;（紧凑模式）
在GCC下：struct my{ char ch; int a;} sizeof(int)=4;sizeof(my)=8;（非紧凑模式）
在GCC下：struct my{ char ch; int a;}__attrubte__ ((packed)) sizeof(int)=4;sizeof(my)=5
2. __attribute__关键字主要是用来在函数或数据声明中设置其属性。给函数赋给属性的主要目的在于让编译器进行优化。函数声明中的__attribute__((noreturn))，就是告诉编译器这个函数不会返回给调用者，以便编译器在优化时去掉不必要的函数返回代码。
GNU C的一大特色就是__attribute__机制。__attribute__可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。
__attribute__书写特征是：__attribute__前后都有两个下划线，并且后面会紧跟一对括弧，括弧里面是相应的__attribute__参数。
__attribute__语法格式为：
__attribute__ ((attribute-list))
其位置约束：放于声明的尾部“；”之前。
函数属性（Function Attribute）：函数属性可以帮助开发者把一些特性添加到函数声明中，从而可以使编译器在错误检查方面的功能更强大。__attribute__机制也很容易同非GNU应用程序做到兼容之功效。
GNU CC需要使用 –Wall编译器来击活该功能，这是控制警告信息的一个很好的方式。
packed属性：使用该属性可以使得变量或者结构体成员使用最小的对齐方式，即对变量是一字节对齐，对域（field）是位对齐。
如果你看过GPSR协议在TinyOS中的实现，你一定会注意到下面的语句：
typedef struct {
    double x;
    double y;
} __attribute__((packed)) position_t;

开始我们还可以理解，不久是定义一个结构体嘛！不过看到后面的语句，你可能就会一头雾水了，’ __attribute__((packed))’是什么东西？有什么作用？一连串的疑问马上就会从你脑袋里冒出来。虽然这个对理解整个程序没有什么影响，但我不想让这些疑问一直呆在我的脑子里，负担太重。省得以后念念不忘，而且也许有一天可以用的上呢。搞清楚这个问题吧！
GNU C的一大特色（却不被初学者所知）就是__attribute__机制。__attribute__可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。
__attribute__语法格式为：
__attribute__ ((attribute-list))
其位置约束为：放于声明的尾部“；”之前。
packed是类型属性（Type Attribute）的一个参数，使用packed可以减小对象占用的空间。需要注意的是，attribute属性的效力与你的连接器也有关，如果你的连接器最大只支持16字节对齐，那么你此时定义32字节对齐也是无济于事的。
使用该属性对struct或者union类型进行定义，设定其类型的每一个变量的内存约束。当用在enum类型定义时，暗示了应该使用最小完整的类型（it indicates that the smallest integral type should be used）。
下面的例子中，my-packed-struct类型的变量数组中的值会紧凑在一起，但内部的成员变量s不会被“pack”，如果希望内部的成员变量也被packed的话，my-unpacked-struct也需要使用packed进行相应的约束。
struct my_unpacked_struct
{
     char c;
     int i;
};

struct my_packed_struct
{
     char c;
     int i;
     struct my_unpacked_struct s;
}__attribute__ ((__packed__));

在每个系统上看下这个结构体的长度吧。
    内存对齐，往往是由编译器来做的，如果你使用的是gcc，可以在定义变量时，添加__attribute__，来决定是否使用内存对齐，或是内存对齐到几个字节，以上面的结构体为例：
 1)到4字节，同样可指定对齐到8字节。
struct student
{
    char name[7];
    uint32_t id;
    char subject[5];
} __attribute__ ((aligned(4)));

2)不对齐，结构体的长度，就是各个变量长度的和
struct student
{
    char name[7];
    uint32_t id;
    char subject[5];
} __attribute__ ((packed));


__attribute__((constructor))  __attribute__((destructor))
新建一个工程,将main.c改写如下:
int mait(int argc, char* argv[]){
  printf("mainfunc\n");
}
__attribute__((constructor)) static void beforefunc()
{printf("beforefunc\n");}
然后运行,发现打印如下:
beforefunc
mainfunc

constructor参数让系统执行main()函数之前调用函数(被__attribute__((constructor))修饰的函数).同理, destructor让系统在main()函数退出或者调用了exit()之后,调用我们的函数.带有这些修饰属性的函数,对于我们初始化一些在程序中使用的数据非常有用.

带有优先级的参数
按照文档中所说,我们还可以给属性设置优先级.这些函数并不非要写到main.c文件中,无论写到哪里,结果都是一样的.但是,为了更显式的让阅读者看到这些定义,至少,还是在main.c文件中留个声明.
声明和实现分离的写法如下:
//声明
__attribute__((constructor(101))) static void beforefunc1();
//实现
void beforefunc1()
{printf("beforefunc\n");}

下面我仅仅用作测试,就不分开写了:
__attribute__((constructor(101))) static void beforefunc1(){printf("beforefunc1\n");}
__attribute__((constructor(102))) static void beforefunc1(){printf("beforefunc2\n");}
__attribute__((constructor(103))) static void beforefunc1(){printf("beforefunc3\n");}
上面的代码没有什么疑问.以上三个函数会依照优先级的顺序调用.另外,我以前看过,这个1-100的范围是保留的,所以,最好从100之后开始用.(但是实际上,我在项目中测试100以内的,也没有得到警告)





类成员函数指针

1普通成员函数
类被需要的时候会被载入内存,当然类成员函数也会被载入内存,所以类的成员函数是有真正的内存地址的,这个地址一般跟具体的类对象没有什么关系
类成员函数指针,通俗的讲,是一个指针,指向类成员函数
使用方法如下
示例

#include <iostream>
#include <string.h>
using namespace std;


class CT
{
public:
	void func(int tmp)
	{
		cout << "func()普通函数,   tmp = " << tmp << endl;
	}
	virtual void virtualfunc(int tmp)
	{
		cout << "virtualfunc()虚函数,   tmp = " << tmp << endl;
	}
	static void staticfunc(int tmp)
	{
		cout << "staticfunc()静态成员函数,   tmp = " << tmp << endl;
	}
	void funcmy(int tmp)
	{
		cout << "func()普通函数,   tmp = " << tmp << endl;
		void(CT:: * func_pointpt)(int);       //类成员中调用其他的成员函数指针 用this
		func_pointpt = &CT::func;
		(this->*func_pointpt)(100);
	}
};

int main(void)
{
	CT ct;
	CT* pct;
	pct = &ct;

	void(CT:: * func_pointpt)(int);  //一个类成员函数指针变量的定义, 变量名为func_pointpt
	func_pointpt = &CT::func;

	(ct.*func_pointpt)(100);         //运算符优先级,这里要加括号
	(pct->*func_pointpt)(100);

	//类成员函数指针,必须定义类来调用.
	return 0;
}


2虚成员函数
上述案例中已经有写虚函数的接口,这里可以调用
虚成员函数与普通成员函数是一样的写法

main中

    CT ct;
	CT* pct;
	pct = &ct;

	void(CT:: * func_pointpt)(int) = &CT::virtualfunc;

	(ct.*func_pointpt)(100);
	(pct->*func_pointpt)(100);


请注意,这个地址其实也是一个真正的内存地址,类中一旦有虚函数,就会自动产生一个虚函数表,希函数表里有许多表项,每个表项是一个指针,每个指针指向一个虚函数地址.
用法同样也是要把指针绑定到一个类对象才能调用

3静态成员函数
因为静态成员函数是跟着类走的,与具体的对象无关,这表示静态成员函数被看作全局函数,因此并没有用"类名::"这种作用域限定符来限定

	void(* func_pointpt)(int) = &CT::staticfunc;
    func_pointpt(100);





string str = "abc";
string str2 =
		"abc\
123\
		";
string str3 =
		"abc"
		"123";
string str4(
		R"EOF(
<Auto>
    <Disk mxproptype="1">
        <Disk Name="F1" Label="L1" />
        <Disk Name="F2" Label="L2" />
        <Disk Name="F3" Label="L3" />
	</Disk>
</Auto>
)EOF");
string str5 =
		R"EOF(
<Auto>
    <Disk mxproptype="1">
        <Disk Name="F1" Label="L1" />
        <Disk Name="F2" Label="L2" />
        <Disk Name="F3" Label="L3" />
	</Disk>
</Auto>
)EOF";

C++ 11开始支持Raw string literal,可以写成 R"delimiter(raw_characters)delimiter" 这种形式，比如\
std::string str(
R"EOF(line1
line2
line3
)EOF)"
其中EOF是分界字符，可以是任意组合。
