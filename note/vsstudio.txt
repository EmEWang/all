
VS2019产品密钥
NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y       # Visual Studio 2019 Professional
BF8Y8-GN2QH-T84XB-QVY3B-RC4DF       # Visual Studio 2019 Enterprise


RGB（204、232、207）  # 工具->选项->环境->字体和颜色，显示项为“纯文本”   背景设置为绿豆沙色
工具->选项->字体和颜色，显示项为“纯文本”，设置项背景色：色调=85，饱和度=123，亮度=205，或者 rgb为199，238，206。字体设置成consolas,这是等宽字体
设置之后，发现字体颜色不够协调，原因是颜色主题为深色，要先将颜色主题设置为浅色(工具->选项->环境->常规，)，确定之后，再重复上述操作，
VS工程->属性->配置属性->调试->环境中设置为  PATH=$(QTDIR)\bin%3b$(PATH)  其中%3b是分号(;)的16进制编码。


xxx.vcxproj.user        # 工程下的这个文件为自己配置文件 删除掉便于移植 会自动生成


Visual Assist安装后vs界面看不到菜单和按钮问题解决
https://blog.csdn.net/henysugar/article/details/131722970
就是删除vs的一个配置文件，然后重新打开vs再把va插件启用，然后重新打开vs就可以了。
vs2019：C:\Users\???\AppData\Local\Microsoft\VisualStudio\16.0_??????
vs2022：C:\Users\???\AppData\Local\Microsoft\VisualStudio\17.0_??????
删除文件：privateregistry.bin
然后重新打开vs，进入菜单扩展里面点击va插件的“启用”，然后重启就可以了。
不过，注意，这样后，vs的相关配置例如快捷方式啥的都会重置了，所以有需要的话，在执行操作前，建议点击vs菜单先把配置给导出，后面再导入。


Microsoft Visual Studio 2008中文语言包
msdn.itellyou.cn 依次打开：开发人员工具→Visual Studio 2008→中文（简体），选择你要下载的ISO包，。



win10安装visualAssistX无反应的一种情况
https://blog.csdn.net/No_21name/article/details/135392409
案例：vs2008，安装va_X_2366，运行后没反应，界面不出来，还以为闪退了，查看任务管理器发现有进程在，只是内存占用48K后没动静了。
解决：结束安装进程，关闭vs2008，右键va_X_2366->属性->兼容性->选择以兼容模式运行这个程序，兼容性选win7->确定，再次双击运行正常显示安装界面。
本人用win11安装vs2010的Visual Assist X 10.9.2210也是这么解决的。
或者再勾选 以管理员身份运行此程序


Microsoft Visual Studio 2010 Tools for Office 语言包（4.0 版运行库）
https://www.microsoft.com/zh-cn/download/details.aspx?id=105523


vs2010自动展开选中当前代码所在的文件位置的功能
tool>>options>>projects and solutions>> 勾上track active item in solution explorer>>OK 保存即可
工具-选项-项目和解决方案-常规-在解决方案资源管理器中跟踪活动项



vs2010工程中定义附加库目录，头文件目录；也就是项目中继承的值
https://www.cnblogs.com/haomiao/p/5812860.html
XXXRelease/Debug.props  中能看到



stdafx.h 预编译头文件的作用
微软搞的预编译机制中的一个默认文件，里面填写代码用到的h文件。
vs在编译代码时，会把 stdafx.h 里面的h进行预先编译，缓存起来，当不更改stdafx.h 时,则不重新编译这些h，更加高效地进行的run/debug操作。当你把vs工程设置成 [不使用预编译机制]时，可能会导致每次调试运行的时候，编译速度变慢。
常见的使用场景就是 stdafx.h 中包含常用的系统头文件，因为这些头文件不经常改变，会给很多.cpp文件使用，
这样只需要让别的 .cpp 文件去包含 stdafx.h 头文件就行了；如果随意改动 stdafx.h 文件的话，整个程序就会重新编译一遍。编译时 stdafx.h 尽管被多个 .cpp 包含，但只会编译一次，这样就加快了编译速度。
stdafx.cpp 专门用来生成预编译文件，stdafx.cpp 里只有一行代码 #include “stdafx.h”, 编译 stdafx.cpp 会产生一个 .pch 文件。别的 .cpp 文件编译的时候就会使用这个 .pch 文件。
fatal error C1083: 无法打开包括文件:“stdafx.h”: No such file or directory    #.cpp文件和stdafx.h头文件不在同一级目录下，只需要修改#include "stdafx.h"的路径为相对路径即可。
warning C4627: “#include “…\stdafx.h””: 在查找预编译头使用时跳过              # 打开编译错误的.cpp文件，将#include "stdafx.h"添加到第一行（必须是第一行）。
fatal error C1010: 在查找预编译头时遇到意外的文件结尾。                        # 因为工程中的每个cpp文件属性默认都是使用预编译头（/YU）的(选择了使用,就要在源文件中显式写上#include)，但是添加的第三方文件并没有 #include “stdafx.h” 预编译指示头，所以编译器在此cpp文件中一直到末尾都没有找到它。
预编译头的使用方法
  创建预编译头文件 stdafx.h, 在这个头文件中包含希望包含的头文件，注意不要包含自己的头文件，只包含系统头文件，不会发生变动。
  创建 stdafx.cpp ，在这个文件中包含 stdafx.h
  我们要让编译器知道， stdafx.cpp 文件是用来创建 .pch 文件的。在 stdafx.cpp 文件上面右键 --> 属性 --> 所有配置 --> C/C++ --> 预编译头 --> 选择 : 创建预编译头(/Yc)
  我们要让编译器知道，哪些 .cpp 文件需要使用 .pch 文件。在需要使用 .pch 文件的 .cpp 中添加 #include “stdafx.h”, 然后在 .cpp 文件上右键 --> 属性 --> 所有配置 --> C/C++ --> 预编译头 --> 选择 : 使用预编译头(/Yu)
  单独编译 stdafx.cpp 就会产生 .pch 文件了，如果以后不小心删除了 .pch 文件，可以单独编译一下 stdafx.cpp 文件。
  注意：
    并不是所有的 .cpp 文件都要包含 stdafx.h ，是否使用预编译头是可以在配置项中修改的。
    如果一个 .cpp 文件使用了预编译头文件，那么要在 .cpp 文件的最开头去包含 stdafx.h 文件，否则会跳过 #include “stdafx.h” 之前的 #include 代码。




windows查找dll  1环境变量 2工作目录 3当前目录
$(ProjectDir)

查看静态库(.lib)和动态库(.dll)的导出函数的信息
在window下查看动态库的导出函数可以用vs自带的Dependenc工具；
查看静态库的信息要用命令行来实现：dumpbin   /LINKERMEMBER   Test.lib   >   1.txt
查看动态库的信息要用命令行来实现：dumpbin -exports Test.dll  >  1.txt
上面的功能是将静/动态库的信息导出保存在1.txt文件中，这样就可以在1.txt文件中查看相关的信息了
在编译静态库的时候如果要使用C语言方式编译，要声明函数如下
extern "C" BOOL Delete(VOID);//按照C语言方式编译
如果上述声明是写在头文件中，则在程序中要包含以下该头文件
在使用dumpbin上述命令可以看到导出函数如下
1 _Delete
如果没有C语言编译声明，则看到导出函数如下
1 ?Delete@@YAHXZ

调试行号对不上 碰到过一次AlertRun\AlertMonitor.cpp 优化去除了 去掉行尾检查也对不上 修改行尾的内容为统一 才行
  1 启用了优化    项目->属性->配置属性->C/C++->优化 优化已禁用(/Od) 内联函数扩展 默认值 其他选项为 否或不
  2 文件行尾不一致
  解决办法：去掉去行尾的检查，或者修改行尾的内容为统一。
    去掉行尾检查的配置：在工具->选项->环境->文档中有一个"加载时检查一致的行尾"钩去掉就不会检查了。
    当然如果出现乱码可能是因为编码的问题，可以启用UTF-8的检测，在工具->选项->文本编辑器->自动检测不带签名的UTF-8编码，勾选。
  修改行尾的内容为统一
    文件->另存为->保存按钮小箭头->编码保存->行尾->Windows(CR LF) 编码GB2312 UTF8带不带签名都可以 可不用调
    或 把文件的内容全部复制到记事本或者文本编码工具(如editplus)中，然后再复制到vs里

LNK2001	无法解析的外部符号 __imp__RpcStringFreeA@4	testTool	D:\CodeTest\Test\testTool\mxcomlib.lib(MxUtil.obj)	1
LNK2001	无法解析的外部符号 __imp__UuidCreate@4	testTool	D:\CodeTest\Test\testTool\mxcomlib.lib(MxUtil.obj)	1
LNK2001	无法解析的外部符号 __imp__UuidToStringA@8	testTool	D:\CodeTest\Test\testTool\mxcomlib.lib(MxUtil.obj)	1
项目->属性->配置属性->连接器->输入->附加依赖项 开始添加Rpcrt4.lib;

error LNK2001: 无法解析的外部符号 _Delete
问题描述：
写的lib中在exe调用的时候出现上面的错误，函数原型为BOOL Delete(VOID);
在lib库的头文件中做了如下声明:
extern "C" BOOL Delete(VOID);//按照C语言方式编译

C4996 'itoa': The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _itoa. See online help for details.	stlTest	D:\CodeTest\Test\stlTest\func.cpp	193
  0.项目->属性->配置属性->C/C++ ->常规->SDL检查 选择否
  1.改成错误提示后面所建议使用的函数
  2.在最头部添加宏定义： #define _CRT_SECURE_NO_DEPRECATE
  3.更改预处理定义： 项目->属性->配置属性->C/C++->预处理器->预处理器定义，增加 _CRT_SECURE_NO_DEPRECATE _CRT_NONSTDC_NO_DEPRECATE _CRT_SECURE_NO_WARNINGS

C2664 VS2019项目出现"const char *" 类型的实参与 “char *” 类型的形参不兼容错误的解决方法
  项目->project 属性->配置属性->高级->字符集 双击字符集后面，改成使用多字节字符集

E0167	"const char *" 类型的实参与 "char *" 类型的形参不兼容
  用Visual Studio 2019时经常会出现const char* 类型的实参与char* 类型的形参不兼容。对此有两种解决办法。
  1 在声明变量 char* 时改成 const char *即可， 或者 是用强制类型转化 (char*) 或者 (const char*)
  2 项目—>属性—>C/C++—>语言，将 符合模式 改为 否 即可。

当前不会命中断点 还没有为该文档加载任何符号
  项目->project 属性->配置属性->连接器->调试->生成调试信息

代码文件路径追踪:工具 选项 项目和解决方案 常规 在解决方案资源管理器中追踪活动项


alt+鼠标 列模式选取快
alt+shift 列模式

VS2019自动整理代码 将他们全部选中->然后同时按下Ctrl+K+F ->这时代码里多余的空格不见了，括号也全部自动对齐
删除空余行，按下ctrl+H，输入(?<=\r\n)\r\n，正则表达式，全部替换

VS2019产品密钥
Visual Studio 2019 Professional
NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y

Visual Studio 2019 Enterprise
BF8Y8-GN2QH-T84XB-QVY3B-RC4DF

Visual Studio 中如何同时注释多行和取消注释多行
注释多行：先按 Ctrl - K 组合键，再按 Ctrl - C 组合键		 或者CTRL+K+C来注释
取消注释多行：先按 Ctrl - K 组合键，再按 Ctrl - U 组合键	 或者CTRL+K+U来取消注释

cpp文件和h文件跳动
先按 Ctrl - K 组合键，再按 Ctrl - O 组合键

VS中代码整体移动
代码整体往右移只需选中代码按Tab键即可。
往左移也很简单：选中之后按下 shift+Tab键 即可。

定位行 Ctrl + G

断点栏 黑色箭头形符号 表示标签  Ctrl + K Ctrl + K

C26812
警告 C26812：首选 "enum class" over "enum" (Enum)
枚举类型 类型名称 未区分范围。 优先使用 "enum class" (Enum)

C4996
错误 unsafe 以下两种方法选择一种
    代码中加入
        1. #define _CRT_SECURE_NO_WARNINGS
        2. #pragma warning (disable: 4996)
    配置中加入
        1.(你的项目)-->右键 --> 属性， 进去以后，在C++  --> 高级  -->  禁用特定警告  中添加：4996
        2.(你的项目)-->右键 --> 属性， 进去以后，在C++  --> 预处理器  -->  预处理器定义  中添加：_CRT_SECURE_NO_WARNINGS

visual studio中指定dll存放目录的几种方法
（1）选择当前工程，右击"属性"->"配置属性"->"调试"，在"工作目录"设置dll的路径
优点：跨平台（拷贝到其他平台不用改动）
缺点：目录不能很干净，因为生成的文件会自动放到这个目录下
（2）创建一个文件夹lib，里面放入所有需要的dll文件,右击"属性"->"生成事件"->"预先生成事件"，输入命令xcopy $(SolutionDir)httpclient/bin $(OutDir) /a /F /I /Y /C",在预处理的时候把dll文件拷贝到Debug目录下。
优点：跨平台（拷贝到其他平台不用改动）
缺点：dll文件太多，文件太大的情况下，拷贝会很费时。
（3）把dll文件目录设置到环境变量或者把dll文件拷贝到system32目录下(64位系统好像是拷贝到system64中)
优点：项目无需太多改动
缺点：不能跨平台，系统侵入
（4）设置项目的环境变量，选择当前工程，右击"属性"->"配置属性"->"调试"，在"环境"添加dll路径，如：path=%path%;../httpclient/bin



vs下的输出目录/输出文件/工作目录-总结https://blog.csdn.net/weixin_41821317/article/details/107640638
一、vs解决方案下各文件夹的包含关系
                  |→   解决方案配置文件sln           |→ c++源文件头文件
[解决方案总文件夹]|→   项目总文件夹    --------------|→ 项目配置文件
                  |→   Debug文件夹                   |→ Debug文件夹
                  |→   Release文件夹                 |→ Release文件夹
一般来说，vs中的c++项目的解决方案总文件夹下包含解决方案配置文件sln和一个项目总文件夹和一个Debug文件夹以及一个Release文件夹（共四个文件夹，>>>>其中Debug和Release文件夹中存放最终生成的结果exe或dll，如果不使用Release生成，则不存在Release文件夹）。
而解决方案和项目文件夹包含关系下包含C++源文件头文件、项目配置文件和一个Debug文件夹以及一个Release文件夹（注意，>>>>此处的Debug和Release文件夹仅仅存放中间编译结果obj，不存放exe和dll之类的东西。如果不使用Release编译，则没有对应的Release文件夹）。
Debug：调试版本，包含调试信息，所以容量比Release大很多，并且不进行任何优化（优化会使调试复杂化，因为源代码和生成的指令间关系会更复杂），便于程序员调试。Debug模式下生成两个文件，除了.exe或.dll文件外，还有一个.pdb文件，该文件记录了代码中断点等调试信息
Release：发布版本，不对源代码进行调试，编译时对应用程序的速度进行优化，使得程序在代码大小和运行速度上都是最优的。（调试信息可在单独的PDB文件中生成）。Release模式下生成一个文件.exe或.dll文件
二、输出目录/输出文件/工作目录
1、输出目录-决定$(OutDir)   <<<<
即设置了VS的“输出目录”属性就相当于设置了$(OutDir)的值。
如果我们建立一个默认的vc项目ssyy，他的默认“常规“栏目中，“输出目录”为$(SolutionDir)$(ConfigurationName)，所以调试时会在解决方案文件夹下建立一个debug（ConfigurationName的值为debug）文件夹，并在此文件夹下生成 ssyy.lik链接器 和ssyy.exe文件(默认情况下) 。
默认“中间目录”为$(ConfigurationName)，所以会在ssyy项目文件夹下（即ssyy.vcproj的项目配置文件所在位置）建立一个debug文件夹，并在该文件夹下生成ssyy.obj二进制文件。
默认“链接器”栏目下的“常规”选项下的“输出文件”选项为?$(OutDir)$(ProjectName).exe，其中$(OutDir)就已经在“常规”栏目的“输出目录”选项赋值了。
注意：实际上输出目录不决定输出exe文件的位置。
2、输出文件-决定$(TargetDir)
$(TargetDir)的值是在生成exe文件后自动赋予值为exe文件所在位置。所以可以说，“输出文件”最终决定exe文件所在的位置。
默认情况下“输出目录”和“输出文件”两个属性对应的目录是一样的，这样用着方便（当然，输出文件的值在输出目录的值的基础上还包含有exe文件名）。如果两个不一样，则中间生成的链接器用的如xx.ilk和xx.pdb文件等在输出目录，而最终生成的xx.exe文件在“输出文件”属性设置的目录中。
当调试程序时，系统变量$(OutDir)的值是最先确定的，而$(TargetDir)和$(TargetPath)的值是在exe文件生成后才确定的。也就是说系统变量$(OutDir)的值由VS项目的“输出目录”属性决定，而$(TargetDir)和$(TargetPath)的值由VS项目的“输出文件”属性决定。
3、工作目录
“调试”栏目中的“工作目录”项，这个属性默认情况下是空的，但表示工作目录是工程目录，也就是工程配置文件ssyy.vcproj所在目录。
“工作目录”属性作用是程序运行后唯一识别的默认目录，即工作后只认识这个目录。
例如程序运行过程中生成一个txt文本文件，如果在创建文件过程中未指定绝对路径，只指定创建文件的文件名，那么这个文本文件默认就会建立在工作目录中，当然读取一些配置文件也在工作目录中查找，但要说明一下，生成的exe文件跟工作目录没任何关系，也不会放在工作目录中。总的来说，工作目录就是程序运行过程中默认读取的目录。
【对工作目录的补充：
vs中工作目录的设置是给调试用的，也即你启动调试后，启动一个新进程，自动把这个新进程的工作目录设置为vs项目属性中的工作目录，然后新进程启动对应的exe程序。
但是如果不使用vs的调试启动exe，而是直接双击exe文件启动一个新进程时，会自动把这个新进程的工作目录设置为exe文件所在的目录，这是和vs启动调试不同的地方。所以如果发布的时候不把工作目录内的东西拷到exe所在的目录内，就会运行出错，因为此时工作目录不再是vs中设置的了，而是exe文件所在的目录。
上面所说的“调试”是指vs下启动exe，包括debug模式和release模式，不要把调试就理解为只有debug模式。】
如果工程中用到的文件不在默认的工作目录下，而程序中又直接使用了相对路径，则应修改工作目录。
————————————————


VS2019远程调试
1、网线，连接调试电脑与待调试的工控机
2、下载vs2019远程调试工具（https://visualstudio.microsoft.com/zh-hans/downloads/?rr=https://docs.microsoft.com/en-us/visualstudio/debugger/remote-debugging?view=vs-2019），安装到工控机上。
3、启动vs2019远程调试工具，安装完成后在工控机上开始->所有程序->Visual Studio 2019->Remote Debuger。并设置。 工具->选项 端口 身份验证模式
4、在装了vs2019 的电脑上设置远程调试器。项目->属性->调试 远程windows调试器 [远程命令]\\192.168.1.118\FXDMounter\MFCApplication.exe [工作目录]\\192.168.1.118\FXDMounter[远程服务器名称]192.168.1.118[连接]同上的身份验证
其中\\192.168.1.118是工控机ip,FXDMounter是D盘下目录，再然后项目名称。
5、把项目生成的Debug版本程序拷贝到工控机D盘FXDMounter目录下（把Debug下的东西一起拷过去，总不会错的）
6、直接启动远程调试  远程Windows调试器
7、如果启动远程调试报出以下错误提示，不是有效的工作目录，则需要把工控机下待调试的文件目录共享出来   提示无法启动程序"xxx\xx.exe"  "xxx"不是有效的工作目录
8、工作目录的共享，正常文件夹目录不会有个锁标志的，共享后的文件夹带个锁标志
9、选中待共享的文件右键->共享->特定用户,出现如下窗口，直接点击共享即可完成，现在再回到调试电脑启动远程调试。
备注:工控机上不能运行MFC程序的解决办法 项目->属性->高级 MFC的使用 > 在静态库中使用MFC




轻松搞定VS生成sdf和ipch文件太大占用空间问题

在VS中新建一个项目会同时建立一个ipch文件夹和一个sdf文件，
即使你删掉它，再次打开工程时还是会重新建立，动辄几十M上百M的磁盘占用量，让我们很不爽啊。
其实这是VS的新功能，与智能提示、错误提示、代码恢复、团队本次仓库等息息相关。
如果大家对这两个文件感觉很不爽的话，有两个办法可以搞定它。

方法一：
  通过禁用数据库的方式达到关闭这两个文件生成的目的，但是这种方法会产生另外的一些问题，可能导致VS的一些功能不可用。
  [工具]—>[选项]—>[文本编辑器]—>C/C++]—>[高级]—>[禁用数据库]将其属性设置为True

方法二：(推荐)
  [工具]—>[选项]—>[文本编辑器]—>C/C++]—>[高级]—>[回退位置]里面的三项属性值按下图进行修改，其中回退路径随便设置。
    始终使用回退位置           true
    回退位置已在使用时 不警告  true
    回退位置                   D:\vs2019缓存
  设置个回退路径这样可比较好管理这些庞大的臃肿的文件，可以定期清理它们，释放磁盘空间

注意，当删除这个文件夹的时候，会丢失：
  选定的生成配置
  本地调试设置，如启动项目
不会丢失：
  解决方案/项目结构
  生成配置定义
  项目依赖关系
  第三方扩展设置等
.vs folder 过大是因为Visual studio "Intellisense" 功能在做一些后台记录来增强我们使用体验。可以通过下面的设置关闭这种后台记录：
方法2
Visual Studio | Tools | Options | Text Editor | C/C++ | Under “Intellisense” category set “Disable Automatic Precompiled Header” to true.
中文版: 工具-选项-文本编辑器-c/c+±-高级-Intellisense (缓存配额5120上一个选项 ) 也就是 禁止自动编译标头  true



VS2019 linux g++ 已退出，代码为 1
  error : g++ 已退出，代码为 1，请查看输出窗口 - 生成输出，了解详细信息(注意: 若要在输出窗口中查看详细信息，则可能需要在工具选项中更改生成输出详细信息)。
  工具 - 选项 - 项目和解决方案 - 生成并运行，将“MSBuild项目生成输出详细级别”和“MSBuild项目生成日志文件详细级别”调整为“普通”，这样在编译linux程序时如果编译出错，可以看到详细的错误信息。



在使用visual studio 2013，进行调试执行代码时，出现如下错误：
error C4996: 'strupr': The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant
name: _strupr. See online help for details.
解决办法：
在头文件尾部添加 或者cpp文件头部
#pragma warning(disable:4996)


VS2015解决 error C4996: 'strdup': The POSIX name for this item is deprecated.


在 工程属性->c/c++->预处理器->预处理器定义 中添加：

 DEBUG模式下：
_CRT_SECURE_NO_DEPRECATE
_CRT_SECURE_NO_WARNINGS
_CRT_NONSTDC_NO_DEPRECATE

RELEASE 模式下：
_CRT_SECURE_NO_WARNINGS
_CRT_NONSTDC_NO_DEFPRECATES




内存泄漏的检测方法（CRT）：
在debug模式下以F5运行：
#define CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
//在入口函数中包含 _CrtDumpMemoryLeaks();
//即可检测到内存泄露

//以如下测试函数为例：
int main(){
	char* pChars = new char[10];
	_CrtDumpMemoryLeaks();
	return 0;
}


检测内存泄漏，定位泄漏代码位置方法
检查方法：
在main函数最后面一行，加上一句_CrtDumpMemoryLeaks()。调试程序，自然关闭程序让其退出（不要定制调试），查看输出：
Detected memory leaks!
Dumping objects ->
{453} normal block at 0x02432CA8, 868 bytes long.
 Data: <404303374       > 34 30 34 33 30 33 33 37 34 00 00 00 00 00 00 00
{447} normal block at 0x024328B0, 868 bytes long.
 Data: <404303374       > 34 30 34 33 30 33 33 37 34 00 00 00 00 00 00 00
{441} normal block at 0x024324B8, 868 bytes long.
 Data: <404303374       > 34 30 34 33 30 33 33 37 34 00 00 00 00 00 00 00
{435} normal block at 0x024320C0, 868 bytes long.
 Data: <404303374       > 34 30 34 33 30 33 33 37 34 00 00 00 00 00 00 00
{429} normal block at 0x02431CC8, 868 bytes long.
 Data: <404303374       > 34 30 34 33 30 33 33 37 34 00 00 00 00 00 00 00
{212} normal block at 0x01E1BF30, 44 bytes long.
 Data: <`               > 60 B3 E1 01 CD CD CD CD CD CD CD CD CD CD CD CD
{204} normal block at 0x01E1B2C8, 24 bytes long.
 Data: <                > C8 B2 E1 01 C8 B2 E1 01 C8 B2 E1 01 CD CD CD CD
{138} normal block at 0x01E15680, 332 bytes long.
 Data: <                > 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
{137} normal block at 0x01E15628, 24 bytes long.
 Data: <(V  (V  (V      > 28 56 E1 01 28 56 E1 01 28 56 E1 01 CD CD CD CD
Object dump complete.
取其中一条详细说明：{453} normal block at 0x02432CA8, 868 bytes long.
被{}包围的453就是我们需要的内存泄漏定位值，868 bytes long就是说这个地方有868比特内存没有释放。
在main函数第一行加上：_CrtSetBreakAlloc(453);意思就是在申请453这块内存的位置中断。然后调试程序，……程序中断了。查看调用堆栈

> msvcr90d.dll!_heap_alloc_dbg_impl(unsigned int nSize=868, init nBlockUse=1,const char * szFileName=0x00000000, int   nLinne=0, int *errno_tmc C++
  msvcr90d.dll!_nh_malloc_dbg_impl(unsigned int nSize=868, int nhFlag=0,int nBlockUse=1,const char * szFleName=0x00000000,   int nLine=0, in C++
  msvcr90d.dll!_nh_malloc_dog(unsigned int nSize=863, int nhFlag=0, int nBlockUse=1, const char * szFileName=0x00000000,   int nLine=0)行296 C++
  msvcr90d.dll!malloc(unsigned int nsize=868)行56 + 0x15字节
  msvcr90d.dll!operator new(unsigned int size=868)行59 + 0x9字节
→ TradeServer.exelCDbQuery::UpdateDatas()行135 + 0xa字节
  TradeServer.exe!CDbQuery::Init()行76 + 0x8字节
  TradeServer.exe!InitobThread(void *lpParam=0x00020b3a)行54 + 0xb字节
  kernel32.dll 753a338a()
  [下面的框架可能不正确和/或缺失,没有为kernel32.dll加载符号]

双击我们的代码调用的最后一个函数，这里是CDbQuery::UpdateDatas()，就定位到了申请内存的代码：

  while( !query.eof() ){
→   pOrder = new ORDER_INFO;
    ip( NULL == pOrder)
      continue;

总算知道是哪里出问题了，这块内存没有释放啊。改代码，修复好这个。然后继续，直到调试输出中没有normal block ，程序没有内存泄漏了。
记得加上头文件：#include <crtdbg.h>
最后要注意一点的，并不是所有normal block一定就有内存泄漏，当你的程序中有全局变量的时候，全局变量的释放示在main函数退出后，
 所以在main函数最后_CrtDumpMemoryLeaks（）会认为全局申请的内存没有释放，造成内存泄漏的假象。
 如何规避？我通常是把全局变量声明成指针在main函数中new 在main函数中delete，然后再调用_CrtDumpMemoryLeaks（），这样就不会误判了。


