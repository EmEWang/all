
ssh -V   #版本

https://blog.csdn.net/qq_35246620/article/details/54317740
https://wangdoc.com/ssh/key
https://deepzz.com/post/how-to-setup-ssh-config.html


ssh 服务安装
1 sudo apt-get install openssh-server    # Ubuntu安装SSH服务
2 ps -e | grep ssh  # 验证是否已经开启了服务 如果只有ssh-agent表示还没启动
3 /etc/init.d/ssh start   # 开启服务 显示sshd说明启动成功
4 service ssh restart或service sshd restart或/etc/init.d/ssh restart  # 重启服务

windows 重启ssh服务
控制面板->windows工具->服务->OpenSSH SSH Server->右键->重启   # 方法1
net stop sshd     net start sshd                  # 方法2 PowerShell或cmd中运行 管理员权限
sc.exe stop sshd  sc.exe start sshd               # 方法3 sc.exe 命令 在命令行中 管理员权限


配置文件
linux
~/.ssh/authorized_keys # 授权配置文件 公钥
~/.ssh/known_hosts     # 保存服务器返回的的公钥
~/.ssh/config          # 用户连接配置
/etc/ssh/ssh_config    # 客户端配置文件
/etc/ssh/sshd_config   # 服务端配置文件 这两个配置文件都允许设置不同的选项来改变客户端程序的运行方式
/etc/ssh/ssh_known_hosts # 保存所有用户信任的服务器返回的的公钥
windows
~\.ssh\authorized_keys           # 授权配置文件 公钥   ~ 为 C:\Users\用户
~\.ssh\config                    # 客户端的配置文件
~\.ssh\known_hosts               # 保存的已知曾连接到的服务器
C:\ProgramData\ssh\sshd_config   # 服务端的配置文件

密码登录
ssh user@host          # 远程登录 用户名user 登录远程主机host
ssh host               # 本地与远程用户名一致 登录时可省略用户名
ssh -p 2222 user@host  # -p 端口  默认端口 22
首次登录 会警告 yes后 host公钥会被保存在~/.ssh/known_hosts
以后登录都会验证该host返回的公钥是否与known_hosts中的一致 是则跳过警告 否则发出警告
/etc/ssh/sshd_config   # PasswordAuthentication no/yes 关闭/打开密码登录 重启sshd才会生效

密钥登陆
1 ssh-keygen     # 生成密钥  如 ssh-keygen -t rsa -b 4096 -C "wjg" -f mykey
  -t rsa         # 密钥的加密算法 一般为dsa或rsa
  -C wjg         # 注释 .pub文件中=后面的部分
  -b 1024        # 密钥的二进制位数
  -f mykey       # 生成的私钥文件名 当前目录生成私钥文件mykey和公钥文件mykey.pub
  -F example.com # 检查某个主机名是否在known_hosts文件里面
  -N secretword  # 私钥密码
  -p             # 私钥密码(与-N不同 新密码不在命令中指定 而是执行后再输入)
  -R example.com # 将指定的主机公钥指纹移出known_hosts文件
运行后 在$HOME/.ssh/目录下 生成两个文件 id_rsa.pub和id_rsa 前者是公钥 后者是私钥
2 ssh-copy-id user@host   # 将公钥传送到远程主机 host 上
如果还是不行，打开远程主机的/etc/ssh/sshd_config，检查下面几行前面#注释是否去掉。
  RSAAuthentication yes
  PubkeyAuthentication yes
  AuthorizedKeysFile .ssh/authorized_keys
service ssh restart     # 重启远程主机SSH服务 ubuntu系统
/etc/init.d/ssh restart # debian系统


sshd_config文件
ForwardAgent yes            # 打开ForwardAgent no关闭 貌似默认是打开的 没配置照样行
PubkeyAuthentication yes    # 允许公钥授权访问 确保不被注释
AuthorizedKeysFile  .ssh/authorized_keys  # 授权文件 确保不被注释
PasswordAuthentication no   # 关闭密码登录 yes打开 可选
#Match Group administrators # 注释掉默认授权文件位置 确保以下条目被注释
#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
PermitRootLogin             # 是否允许以root登录 yes/no


authorized_keys文件
1 远程主机将客户公钥 追加在$HOME/.ssh/authorized_keys文件尾 公钥是一段字符串 每个公钥占一行
1.1 ssh-copy-id -i key_file user@host   # 直接将公钥添加到host的authorized_keys文件的末尾
  -i 公钥文件 可不指定路径和.pub后缀 会自动在~/.ssh/下找 本例为 ~/.ssh/key_file.pub
  确保authorized_keys末尾是换行符，否则新公钥与前公钥相连，都将无法生效。
1.2 ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub
  ssh user@host  # 表示登录远程主机
  'mkdir .ssh && cat >> .ssh/authorized_keys'  # 登录后在远程 Shell 上执行的命令
  mkdir -p .ssh" # 如果用户主目录中的.ssh`目录不存在，就创建一个
  cat >> .ssh/authorized_keys < ~/.ssh/id_rsa.pub # 将本地公钥~/.ssh/id_rsa.pub重定向追加到远程文件authorized_keys末尾
2 chmod 644 ~/.ssh/authorized_keys  # 权限为644 否则SSH服务器可能会拒绝读取该文件 公钥登录设置完成

config文件
~/.ssh/config        # 用户配置文件
/etc/ssh/ssh_config  # 系统配置文件
ssh -p xx -i xx name@ip  # -p 10086端口  -i /path/to/identity_file私钥文件
配置文件分为多个配置区段，区段用Host分割。命令行中输入不同的host来加载不同的配置段
首次获取的配置项参数被采用，故通用设置应放到文件后面，特定host配置项应放到前面
说明
Host host1                  # 别名
HostName ip/url             # 远程主机名 可用 %h，自动替换，只要替换后的地址是完整
User username1              # 登录用户名
Port 22                     # 端口 默认为 22
IdentityFile ~/.ssh/id_rsa  # 私钥文件 默认为 ~/.ssh/id_dsa(id_ecdsa id_ed25519 id_rsa)
  %d # 本地用户目录 ~
  %u # 本地用户
  %l # 本地主机名
  %h # 远程主机名
  %r # 远程用户名
IdentitiesOnly              # 只接受SSH key登录     指定 ssh 只能使用配置文件指定的 identity 和 certificate 文件或通过 ssh 命令行通过身份验证，即使 ssh-agent 或 PKCS11Provider 提供了多个 identities。值可以为 no(default)/yes。
PreferredAuthentications publickey  #强制使用Public Key验证        不常用
AddKeysToAgent              # 是否自动将 key 加入到 ssh-agent，值可以为 no(default)/confirm/ask/yes。 如果是 yes，key 和密码都将读取文件并以加入到 agent ，就像 ssh-add。其他分别是询问、确认、不加入的意思。添加到 ssh-agent 意味着将私钥和密码交给它管理，让它来进行身份认证。
AddressFamily               # 指定连接的时候使用的地址族，值可以为 any(default)/inet(IPv4)/inet6(IPv6)。
BindAddress                 # 指定连接的时候使用的本地主机地址，只在系统有多个地址的时候有用。在 UsePrivilegedPort 值为 yes 的时候无效。
ChallengeResponseAuthentication  #是否响应支持的身份验证 chanllenge，yes(default)/no。
Compression                 # 是否压缩，值可以为 no(default)/yes。
CompressionLevel            # 压缩等级，值可以为 1(fast)-9(slow)。6(default)，相当于 gzip。
ConnectionAttempts          # 退出前尝试连接的次数，值必须为整数，1(default)。
ConnectTimeout              # 连接 SSH 服务器超时时间，单位 s，默认系统 TCP 超时时间。
ControlMaster               # 是否开启单一网络共享多个 session，值可以为 no(default)/yes/ask/auto。需要和 ControlPath 配合使用，当值为 yes 时，ssh 会监听该路径下的 control socket，多个 session 会去连接该 socket，它们会尽可能的复用该网络连接而不是重新建立新的。
ControlPath                 # 指定 control socket 的保存路径，值可以直接指定也可以用一下参数代替：
  %L 本地主机名的第一个组件
  %l 本地主机名（包括域名）
  %h 远程主机名（命令行输入）
  %n 远程原始主机名
  %p 远程主机端口
  %r 远程登录用户名
  %u 本地 ssh 正在使用的用户名
  %i 本地 ssh 正在使用 uid
  %C 值为 %l%h%p%r 的 hash
  请最大限度的保持 ControlPath 的唯一。至少包含 %h，%p，%r（或者 %C）。
ControlPersist              # 结合 ControlMaster 使用，指定连接打开后后台保持的时间。值可以为 no/yes/整数，单位 s。如果为 no，最初的客户端关闭就关闭。如果 yes/0，无限期的，直到杀死或通过其它机制，如：ssh -O exit。
GatewayPorts                # 指定是否允许远程主机连接到本地转发端口，值可以为 no(default)/yes。默认情况，ssh 为本地回环地址绑定了端口转发器。
LocalCommand                # 指定在连接成功后，本地主机执行的命令（单纯的本地命令）。可使用 %d，%h，%l，%n，%p，%r，%u，%C 替换部分参数。只在 PermitLocalCommand 开启的情况下有效。
LocalForward                # 指定本地主机的端口通过 ssh 转发到指定远程主机。格式：LocalForward [bind_address:]post host:hostport，支持 IPv6。
PasswordAuthentication      # 是否使用密码进行身份验证，yes(default)/no。
PermitLocalCommand          # 是否允许指定 LocalCommand，值可以为 no(default)/yes。
ProxyCommand                # 指定连接的服务器需要执行的命令。%h，%p，%r  如：ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p

config文件使用
ssh host1                        # 同 ssh username1@ip  关键词登录 省略用户名和主机名
scp a.txt host1:/home/user_name  # 同 scp a.txt username1@ip:/home/user_name
git clone coding:deepzz/test.git # 同 git clone git@git.coding.net:deepzz/test.git
vim scp://host1//home/1.txt      # 同 vim scp://username1@ip//home/1.txt  vim直接编辑远程服务器上的文件
  scp是协议 第一个//用来隔离协议与主机名   第二个//来隔离主机名和路径 第一个/用来隔离 第二个/是根的意思

远程服务当本地用
LocalForward将本地端口上数据通过ssh转发到远程主机的指定端口。感觉是用本地服务，其实用的远程服务。
Host db      # 如远程服务器上运行着Postgres，端口5432（未暴露端口给外部）。
    HostName db.example.com
    LocalForward 5433 localhost:5432
当连接远程主机时，会在本地开一个5433端口，并将该端口数据通过ssh转发到远程服务器上的5432端口。
ssh db  # 建立连接
psql -h localhost -p 5433 orders # 之后就可通过Postgres客户端连接本地5433端口

多连接共享
打开多个shell窗口连接同一台服务器，不想每次都输入用户名和密码或等待连接建立，则需要添加如下配置到~/.ssh/config
ControlMaster auto
ControlPath /tmp/%r@%h:%p    # 存储的 socket文件 为 /tmp/%r@%h:%p
ControlPersist 600

禁用密码登录
/etc/ssh/sshd_config # 编辑系统配置文件
PasswordAuthentication no
ChallengeResponseAuthentication no

代理登录 中间可有多个跳板
没法直接登录到某台服务器，需要使用中间服务器进行中转。
首先为服务器配置了公钥访问，并开启ForwardAgent yes，添加如下配置到 ~/.ssh/config
Host tiaoban1
    HostName tiaoban1ip
    User root
    # IdentityFile ~/.ssh/id_ecdsa           # 登录tiaoban1的认证文件
Host mubiao
    HostName mubiaoip                        # 目标服务器地址
    User root                                # 用户名
    # IdentityFile ~/.ssh/id_ecdsa           # 登录mubiao的认证文件
    ProxyCommand ssh -q -x -W %h:%p tiaoban  # 代理命令
ssh mubiao # 登录
-W host:port  # 将client过来的标准输入和输出forward到host和port指定的地方
-q 安静模式 -x X11 forwarding无效

执行远程命令
ssh example "cd /; ls"  # 1 执行单条远程命令

ssh example "           # 2 执行多行远程命令
> pwd
> ls
> "

ssh example < 1.sh      # 3 远程执行本地脚本
echo "pwd; cd /; pwd" > 1.sh  # 本地脚本
chmod +x 1.sh           # 为脚本添加可执行权限

ssh -t example "top"    # 4 执行需要交互的命令


ssh-agent # 是一个密钥管理器 意为ssh代理
私钥设置了密码，每次使用都必须输入密码。
为解决这个问题 在整个Bash对话(session)只需第一次使用命令时输入密码 然后将私钥保存在内存中
1 手动运行
 1.1 ssh-agent $SHELL
    在当前shell中启动一个默认shell，作为当前shell的子shell，ssh-agent会在子shell中运行；
    也可以明确指定 $SHELL ，比如 ssh-agent bash；
    ssh-agent会随者当前ssh会话的结束而结束，这是一种安全机制。
  1.2 eval `shell-agent`
    windows为 eval $(ssh-agent) 它并不会启动一个子shell，而是直接启动一个ssh-agent进程；
    当退出当前bash后，ssh-agent进程并不会自动关闭。
    当前bash退出前，使用 ssh-agent -k，或当前bash退出后，用kill，关闭对应的ssh-agent进程。
  1.3 如果想在当前对话启用ssh-agent，可以直接使用下面的命令。
2 ssh-add       # 添加默认私钥(如~/.ssh/id_rsa id_dsa id_ecdsa id_ed25519)。
  ssh-add my-key-file  # 不是默认私钥，显式指定私钥文件。添加私钥时，会要求输入密码。
  -d # 从内存中删除指定的私钥          如 ssh-add -d name-of-key-file
  -D # 从内存中删除所有已经添加的私钥   如 ssh-add -D
  -l # 列出所有已经添加的私钥          如 ssh-add -l
3 ssh host      # ssh使用私钥登录远程服务器host 若私钥设有密码，ssh将不再询问密码 直接从内存取
  ssh –i privatekey host # 使用其他私钥登录服务器 -i指定私钥文件
4 ssh-agent -k  # 退出ssh-agent  可以直接退出子Shell(Ctrl + d)



ssh命令  # man ssh 部分
ssh [选项] [user@]host [command]
-1 # 强制使用ssh协议版本1
-2 # 强制使用ssh协议版本2
-4 # 强制使用IPv4地址
-6 # 强制使用IPv6地址
-A # 开启认证代理连接转发功能
-a # 关闭认证代理连接转发功能
-b # 使用本机指定地址作为对应连接的源ip地址
-C # 请求压缩所有数据
-c # 选择所加密的密码型式 （blowfish|3des 预设是3des）
-e # 设定跳脱字符
-F # 指定ssh指令的配置文件
-f # 后台执行ssh指令
-g # 允许远程主机连接主机的转发端口
-i # 指定身份文件（预设是在使用者的家目录 中的 .ssh/identity）
-l # 指定连接远程服务器登录用户名
-N # 不执行远程指令
-n # 重定向stdin 到 /dev/null
-o # 指定配置选项
-p # 指定远程服务器上的端口（默认22）
-P # 使用非特定的 port 去对外联机（注意这个选项会关掉 RhostsAuthentication 和 RhostsRSAAuthentication）
-q # 静默模式
-T # 禁止分配伪终端
-t # 强制配置 pseudo-tty
-v # 打印更详细信息
-X # 开启X11转发功能
-x # 关闭X11转发功能
-y # 开启信任X11转发功能
-L # listen-port:host:port 指派本地的 port 到达端机器地址上的 port
  建立本地SSH隧道(本地客户端建立监听端口)
  将本地机(客户机)的某个端口转发到远端指定机器的指定端口.
-R # listen-port:host:port 指派远程上的 port 到本地地址上的 port
  建立远程SSH隧道(隧道服务端建立监听端口)
  将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口.
-D # port 指定一个本地机器 “动态的’’ 应用程序端口转发.




SSH1和SSH2的区别
SSH(Secure SHell)到目前为止有两个不兼容的版本——SSH1和SSH2。
ssh1和ssh2协议端口都是采用22. 而Telnet是23.
SSH1又分为1.3和 1.5两个版本。SSH1采用DES、3DES、Blowfish和RC4等对称加密算法保护数据安全传输，
  而对称加密算法的密钥是通过非对称加密算法（RSA）来完成交换的。
  SSH1使用循环冗余校验码（CRC）来保证数据的完整性，但是后来发现这种方法有缺陷。
SSH2避免了RSA的专利问题，并修补了CRC的缺陷。
  SSH2用数字签名算法（DSA）和Diffie-Hellman（DH）算法代替RSA来完成对称密钥的交换，
  用消息证实代码（HMAC）来代替CRC。同时SSH2增加了AES和Twofish等对称加密算法。
SSH只是加密的shell，最初用来替代telnet。通过port forward，也可以让其他协议通过ssh隧道而起到加密效果。

ssl(Secure Sockets Layer)是通讯链路的附加层。包含很多协议。https, ftps, .....
ssl是一种国际标准的加密及身份认证通信协议，浏览器就支持此协议。
ssl最初由美国Netscape公司研究出来，后来成为Internet网上安全通讯与交易的标准。
ssl协议使用通讯双方的客户证书以及CA根证书，允许客户/服务器应用以一种不能被偷听的方式通讯，
在通讯双方间建立起了一条安全的、可信任的通讯通道。
它具备以下基本特征：信息保密性、信息完整性、相互鉴定。 主要用于提高应用程序之间数据的安全系数。
ssl协议整个概念可总结为：一个保证任何安装了安全套接字的客户和服务器间事务安全的协议，它涉及所有TC/IP应用程序。

使用SSH把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。
一个额外好处是传输数据经过压缩，能加快传输速度。可代替telnet，为ftp、pop、ppp提供一个安全通道。
SSH由客户端和服务端软件组成，有两个不兼容的版本：1.x和2.x。2.x客户程序不能连接到1.x服务程序。
OpenSSH 2.x同时支持SSH 1.x和2.x。
SSH的安全验证工作原理，从客户端来看，SSH提供两种级别的安全验证。
一基于口令的安全验证 知道帐号和口令就可登录。所有传输的数据都加密，但不能保证正在连接的服务器就是想连接的。
可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。
二基于密匙的安全验证 创建一对密匙，公匙放在服务器。连SSH服务器，客户端会向服务器发出请求，用密匙进行安全验证。
服务器收到请求后，在家目录寻找公匙，把它和发来的公匙比较。一致，服务器用公匙加密“质询”（challenge）并发送给客户端。
客户端收到“质询”后用私匙再把它发送给服务器。这种方式，必须知道密匙的口令。
与一相比，二种不需要在网络上传送口令。二不仅加密所有传送的数据，而且“中间人”攻击方式也是不可能的（没有私匙）。
但是整个登录的过程可能需要10秒。

OpenSSL 一个C语言函数库，是对SSL协议的实现。
OpenSSH 对SSH协议的实现。
ssh 利用 openssl 提供的库。openssl 中也有个叫做 openssl 的工具，是 openssl 中的库的命令行接口。
openssh依赖于openssl，没有openssl的话openssh就编译不过去，也运行不了。
HTTPS可使用TLS或SSL协议，而openssl是TLS、SSL协议的开源实现，提供开发库和命令行程序。
openssl很优秀，所以很多涉及到数据加密、传输加密的地方都会使用openssl的库来做。
grep -l 'libssl.*deleted' /proc/*/maps | tr -cd 0-9\\n | xargs -r ps u # 哪些进程加载了老版本的openssl库 root执行



sudo apt-get install openssh-server # 服务器安装了SSH-Server之后终端连接的过程中被中断
Couldn’t agree a client-to-server cipher (available: aes128-ctr,aes192-ctr,aes256-ctr,chacha20-poly1305@openssh.com) # Ubuntu终端连接出错
CBC block cipher mode of operation已经不够安全了，新SSH-Server不支持该模式，而用的终端又不支持上面的CTR的模式所以就被拒绝连接了  # 原因

解决方法
一是把你的终端更新至最新版本
二是更改支持的加密算法
  /etc/ssh/sshd_config     # 配置文件
  Ciphers aes128-ctr,aes192-ctr,aes256-ctr,chacha20-poly1305@openssh.com,aes256-cbc # 最后一行添加
  /etc/init.d/ssh restart  # 重新启动ssh





windows11SSH配置
https://www.cnblogs.com/sparkdev/p/10166061.html
1.安装 OpenSSH Server
  开始->设置->应用->可选应用->添加可选功能，安装OpenSSH客户端和OpenSSH服务器。
  OpenSSH 客户端程序默认已经被系统安装好，点击OpenSSH客户端和OpenSSH服务器显示卸载说明安装成功。
2.开启服务
  服务->OpenSSH SSH Server->右击 属性 更改状态为启动即可。
  win+R->输入net start sshd   # 启动SSH 方法2
    输入sc config sshd start= auto，设置SSH为自动打开模式。
3.监听端口
  netstat -an |findstr :22   # 默认22
  在安装 OpenSSH Server 的时候会在防火墙的入站规则中添加一条记录让防火墙放行对 22 号端口的访问
4.文件目录
  C:\ProgramData\ssh\  # 服务器端的配置目录
  C:\Windows\System32\OpenSSH\ # 程序目录 客户端/服务器程序都在这.它会被添加到 PATH 环境变量中
  sshd_config_default  # OpenSSH 服务器端程序的默认配置文件
5.客户端
  ssh username@ip    # 连接远程主机
  New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force  # 以管理员身份启动 PowerShell 执行之 完成注册表项的添加
    作用是把默认的 shell 设置为 PowerShell。
    HKEY_LOCAL_MACHINE\SOFTWARE\OpenSSH 系统的注册表中 添加项名称为 DefaultShell
    的值为 C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  重新连接远程服务器，默认的 shell 已经变成了 PowerShell
配置过程中可能遇到的问题及解决办法：
若显示命令无效，两种解决办法，一查看是否同时安装了OpenSSH客户端和OpenSSH服务器，缺一不可。二以管理员身份打开命令行。

安装OpenSSH服务器，安装失败
https://answers.microsoft.com/zh-hans/windows/forum/all/%E5%AE%89%E8%A3%85openssh%E6%9C%8D%E5%8A%A1/7e78d41a-bef2-4023-a283-18f72f06ae61
以管理员身份打开 PowerShell 并运行
Get-WindowsCapability -Online | Where-Object Name -like  'OpenSSH*' # 检查是否已经安装了 OpenSSH
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0       # 安装 OpenSSH 客户端
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0       # 安装 OpenSSH 服务器
Remove-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0    # 删除 OpenSSH 客户端
Remove-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0    # 删除 OpenSSH 服务器
启动服务 sshd               # 使 OpenSSH 服务在系统启动时自动启动并运行
Set-Service -Name sshd -StartupType 'Automatic'  # 将服务标记为自动启动

若Add-WindowsCapability : Add-WindowsCapability 失败。错误代码 = 0x800f0954
所在位置 行:1 字符: 1
+ Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo : NotSpecified: (:) [Add-WindowsCapability], COMException
    + FullyQualifiedErrorId : Microsoft.Dism.Commands.AddWindowsCapabilityCommand
解决方法：
1 gpedit.msc->计算机配置->管理模板->系统->指定可选组件安装和组件修复的设置 右键编辑
  1选择已启用 2勾选 直接从"windows更新"而不是"windows server更新服务(WSUS)" 下载修复内容和可选内容 确定   已测试好用
2 gpedit.msc->计算机配置->管理模板->windows组件->windows更新->管理windows server update service提供的更新
  ->指定intranet microsoft更新服务位置 右键编辑 选择 已禁用 确定    已测试没用
3 设置->windows更新->高级选项->传递优化->允许从其他电脑下载 选择 internaet和我的本地网络上的设备  已测试没用
4 手动下载  未测试  https://blog.arey.fun/archives/19/
  1. https://github.com/PowerShell/Win32-OpenSSH/releases           # 去github下载安装包
  2. 下载 OpenSSH-Win64.zip         # 根基系统和版本选择下载
  3. powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1  # 解压后在解压到的目录下进入cmd，运行
  4. sc config sshd start= auto     # 安装完后设置下开机启动 管理员权限启动poweshell或者cmd运行
  5. Start-Service sshd             # 启动ssh服务  或 net start sshd
     Restart-Service sshd           # 重启ssh服务
     Stop-Service sshd              # 停止ssh服务
     Get-Service sshd               # 查看状态 Get-Service -name ssh* 查看匹配名字的服务
     Set-Service sshd -StartupType Automatic  # 设置服务类型自动 Manual 手动
  6. ssh-agent 为客户端服务   sshd 为服务器服务


关于linux ssh 连接windows11 免密登录 失败问题
https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_keymanagement
部署公钥
标准用户
  C:\Users\username\.ssh\authorized_keys #公钥拷贝到这里
管理用户
  C:\ProgramData\ssh\administrators_authorized_keys #公钥拷贝到这里
  # Appropriately ACL the authorized_keys file on your server
  1 icacls.exe "C:\ProgramData\ssh\administrators_authorized_keys" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"      # powershell 管理员 本机操作
  2 ssh --% user1@domain1@contoso.com icacls.exe "C:\ProgramData\ssh\administrators_authorized_keys" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"  # powershell 管理员 远程操作
  注 1 2择一操作即可 改变授权文件的安全属性 不操作测试也没问题

私钥文件
私钥文件等效于密码，可使用 ssh-agent 来将私钥安全地存储在与你的 Windows 登录关联的 Windows 安全上下文中。
为执行该操作，请以管理员身份启动 ssh-agent 服务并使用 ssh-add 来存储私钥。
# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.
Get-Service ssh-agent | Set-Service -StartupType Manual  # Make sure you're running as an Administrator.
Start-Service ssh-agent   # Start the service
Get-Service ssh-agent     # This should return a status of Running
ssh-add ~\.ssh\id_ed25519 # Now load your key files into ssh-agent
完成这些步骤后，每当从此客户端进行身份验证需要使用私钥时，ssh-agent 都会自动检索本地私钥，并将其传递到你的 SSH 客户端。
强烈建议你将私钥备份到一个安全位置，将其添加到 ssh-agent，然后将其从本地系统中删除。

有的资料说免密登录如下设置***
服务端
1 用户的 公钥 添加到 ~\.ssh\authorized_keys 中。
2 C:\ProgramData\ssh\sshd_config # 修改配置文件
确保以下3条没有被注释
  PubkeyAuthentication yes
  AuthorizedKeysFile	.ssh/authorized_keys
  PasswordAuthentication no
确保以下2条有注释掉
  #Match Group administrators
  #       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
其余不做修改，基本都是已注释不启用。
3 Restart-Service sshd  # 重启服务
备注 这种方式 可作为参考 我本机测试无效 也可能跟版本支持有关

客户端
配置 ~/.ssh/config
Host xx
HostName ip
User  用户名
IdentityFile 私钥文件

连接服务器 ssh xx 即可



穿越多个跳板机
https://blog.51cto.com/u_15214399/2823352
1 ssh-keygen -t rsa -b 4096 -C "wjg" -f mykey  # 生成公私钥 不指定 -f 则在 ~/.ssh/下 id_rsa id_rsa.pub
2 cat  ~/.ssh/id_rsa.pub | ssh name@ip 'cat - >> ~/.ssh/authorized_keys' # 公钥放置到每一下一条上
3 访问起点 client 要额外配置  需要确保ssh client支持ProxyJump语句  >openssh 7.5 mac mojave ubuntu 18.04以后
  例如 client -> jump1 -> jump2 -> node  则 client的config 配置如下 即 ~/.ssh/config
  ***特别注意*** 每一步的 jumpX 是指其上一级连接 如 node的上一级是jump2  依赖倒序
  ProxyJump 方式可写为 ProxyCommand 方式   ssh -v node 展示连接详细情况 ProxyJump 通过 ProxyCommand 建立连接
# 1级跳转机
Host jump1
    HostName ip1
    User name1
# 2级跳转机
Host jump2
    HostName ip2
    User name2
    ProxyJump jump1
#    ProxyCommand ssh -q -x -W %h:%p jump1
# 目标主机 node 为 my_node 的简写
Host my_node node
    HostName ip3
    User name3
    ProxyJump jump2
#    ProxyCommand ssh -q -x -W %h:%p jump2
ProxyCommand命令用来指定连接到服务器的命令.  https://cikeblog.com/proxycommand.html
  其可以是任何的命令,只要能从其标准输入读入数据,然后写出到标准输出即可.这条命令需要连接到sshd服务器上.
  也就是说,在不使用ProxyCommand的情况下,ssh会自己建立到目标机器22端口的连接.
  使用了ProxyCommand,则使用指定命令来建立到目标机的连接,ssh直接使用已经建立的连接.在文档里面使用了nc命令来建立连接.
  nc是外部命令,可能有些机器上没有安装.实际上,ssh命令的-W选项可以完成这个事情
  -W host:port 将client过来的标准输入和输出forward到host和port指定的地方.这个选项直接就可以搭配上ProxyCommand的需求.
  -q 安静模式   -x Disables X11 forwarding.
  %h表示要连接的目标机,也就是Hostname指定的ip或者主机名,%p表示要连接到目标机的端口.
  这儿可以直接写死固定值,但是使用%h和%p可以保证在Hostname和Port变化的情况下ProxyCommand这行不用跟着变化
4 ssh node 或 ssh my_node   # 验证
5 client 设置 ControlMaster 高速复用 ssh 连接
~/.ssh/config顶部添加如下配置  第一次ssh登录之后再次登录 没有延迟 一段时间内重连不需要认证(密码登录不需要密码)
Host *
    ServerAliveInterval 10
    TCPKeepAlive yes
    ControlPersist yes
    ControlMaster auto
    ControlPath ~/.ssh/master_%r_%h_%p
6 增量同步远程机器的指定目录
lftp这个老古董可以利用sftp经由ssh的config跳板通道，进行文件拷贝同步等动作。
lftp sftp://n1 -e "mirror -R /root/project/" # 把client本地/root/project/下的文件增量同步到远程n1上的/root/project/
lftp sftp://n1 -e "mirror /root/project/"    # 把远端n1上的/root/project/下的文件增量同步到client本地/root/project/
# lftp还有多线程参数加速同步或者下载，读者可自行发掘。




端口转发
https://zhuanlan.zhihu.com/p/148825449
如无特殊说明，SSH连接都建立在由主机A到主机B间，SSH命令都在主机A上被执行。

1 本地端口转发(Local forwarding)
是指将应用对于本地主机A指定端口X的访问请求转发给远程主机B，交由B对另一指定主机C的指定端口Z发起访问。
当A -x-> C.Z，有A→B的SSH连接，且B -> C.Z，本地端口转发就派上用场。
app_client → hostA端口X   → TCP  → SSH  → TCP  → hostB    → hostC端口Z    # 访问示意图
             SSH_Client                        SSH_Serve
访问请求在A一侧发生，可以来自于A自身，也可以是其他与A连接的设备。原理上，C可以是任何能够被B识别到的设备，也可以是B自身。
本地端口转发使得A和B之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH 隧道”。

A$ ssh -L hostA端口X:hostC:C端口Z hostB  # 简单理解为：将对A:X的访问转变成对C:Z的访问
A$ ssh -L [收听接口:]收听端口:目标主机:目标端口 hostB # 完整格式  -L后四个参数   补充说明
  参数1可不写，默认值是0.0.0.0(OpenSSH客户端配置文件 ssh_config 中 GatewayPorts 选项的值一般为 yes )。
    意味着SSH隧道会收听所有接口，接受来自任何地址的应用访问请求并进行转发。
    而如果在此处填写了绑定地址，SSH隧道连接就会只处理来自绑定地址的应用请求，而对其他地址发来的请求置之不理。
    例如在此处填写127.0.0.1，即可实现只有来自主机A本机的应用请求才被SSH隧道转发的效果。
  收听接口是站在A的视角上去规定允许与A连接的设备，解决「能够使用SSH端口转发的应用请求从何处来」的问题，类似防火墙的入站；
    收听端口则依旧是主机A上的那个端口X，不能够跑到别的主机上去。
  类似地，远程端口转发和动态端口转发也具有「收听接口」这一可不指明的参数，下文不再赘述。

举例：
A$ ssh -L 2121:hostC:21 hostB  # 在hostA执行命令 通过hostB，将hostA连上hostC
  hostA本地主机，hostB远程主机。两台主机之间无法连通。hostC同时连通前面两台主机。
  -L 三个值，分别是本地端口:目标主机:目标主机端口，冒号分隔。
  SSH绑定本地端口2121，指定hostB将所有数据，转发到hostC的21端口。即只要连接hostA的2121端口，就等于连上了hostC的21端口。

ssh -p 22 virtual_user@10.0.2.15	  # 在A上访问B上的虚拟机C  A不能直接访问 即这个命令在A不能运行 需要以下2条命令
  ssh -L 22022:10.0.2.15:22 desktop_user@192.168.1.11	# A运行 cmd-1 通过B建立本地端口转发
  ssh -p 22022 virtual_user@localhost #  A运行 cmd-2 访问虚拟机

ssh -L 9001:hostC:22 hostB  # 通过hostB的端口转发 SSH登录hostC
  ssh -p 9001 localhost       # SSH登录本机的9001端口，就相当于登录host2了。 -p 端口

ssh -L 5900:localhost:5900 hostB
  将本机的5900端口绑定hostB的5900端口(这里的localhost指的是hostB，因为目标主机是相对hostB而言的)。


2 远程端口转发(Remote forwarding)
C在端口Z提供服务，B无法直接访问C或端口Z，有SSH：A→B的连接，且A能直接访问C的端口Z，远程端口转发就派上用场。
hostC端口Z ← hostA   → TCP  → SSH  → TCP  → hostB端口Y  ← app_client  # 访问示意图
          SSH_Client                       SSH_Server

ssh -R hostB端口Y:hostC:C端口Z nameB@ipB # 简单理解为：将对B:Y的访问转变成对C:Z的访问  -R表示使用 远程端口转发

仍然以从A对B发起SSH连接为基础。原理上，C可以是任何能够被A识别到的设备，也可以是A自身。
与本地端口转发的流动方向相反，远程端口转发是将对于远程主机B指定端口Y的访问请求转发给A，交由A对C的指定端口Z发起访问。
注意，此时访问请求在B一侧发生，而SSH连接的方向却没有变化，仍是由A到B的。
因此 本地与远程端口转发互为镜像 的说法并不完全准确；严格意义上的镜像，SSH连接也要变为由B到A，那时则应该是在B上采用本地端口转发。
可以看出，采取哪种端口转发主要取决于SSH连接建立的方向。

举例：
A上有虚拟机C，B向C传输文件；但B→C，某服务不可直连；A→C，某服务可直连；A→B，SSH可直连；任务目标：B→A→C，某服务的间接连接。
  ssh -R 22122:10.0.2.16:22 userB@192.168.1.233	# cmd-1  A上执行
    22122号端口是随便选的一个没被占用的端口；192.168.1.233是B的IP；userB是B上的用户名；
    10.0.2.16是C在A为其搭建的虚拟网络中的IP；22号端口是默认的SFTP端口。：
  sftp -P 22122 userC@localhost	# cmd-2  注意，B上执行此命令  userC是C的用户名  此处localhost是B对自己的称呼
    对B的22122端口的访问被转发至A，A访问C，即10.0.2.16的22端口并将结果返回给B。于是B就通过远程端口转发成功访问了C上的SFTP服务器。
  sftp -P 22 userC@10.0.2.15	# cmd-3  cmd-1和cmd-2合起来目的是在B上实现cmd-3 但cmd-3不能被直接成功执行

内网的A，公网的B；B→A，某服务不可直连；A→A，某服务可直连；A→B，SSH可直连；任务目标：B→A→A，某服务的间接连接
  注意：OpenSSH服务器对于远程端口转发的设定，默认只接受远程主机B本机上的应用发起的请求。
  想要从其他连接到B的设备发起请求，需 /etc/ssh/sshd_config 开启 GatewayPorts yes 默认为 no 并重启ssh服务 。
  A运行着http服务，但A没有公网IP，其他设备不能使用该服务。服务器B有公网IP。
  在不将http服务迁移至B的前提下，使用SSH端口转发使其他设备通过访问B的方式访问A上的http服务。
  ssh -R 80:localhost:80 cloud_user@server.example.com	# cmd.4-1  在A上执行端口转发命令
  这时C便是A自己（localhost）；80号端口是http默认端口，为简便两个都用默认；
  cloud_user还是B上的用户名；http://server.example.com还是B的域名。
  http://server.example.com/  在其他设备上打开浏览器，通过这个地址可以访问本地计算机A提供的http服务。

host1与host2无法连通，借助host3转发。但host3是一台内网机器，它可以连接外网的host1，反之不行。
  本地端口转发就不能用了。解决办法是在host3上建立与host1的SSH连接，然后在host1上使用这条连接。
  ssh -R 2121:host2:21 host1    # 在host3执行  -R三个值，分别是远程主机端口:目标主机:目标主机端口。
    意思是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。
    对于host3，host1是远程主机，所以这种情况就被称为远程端口绑定。绑定之后，在host1就可以连接host2了
  ftp localhost:2121    # host1上执行  远程端口转发的前提条件是，host1和host3都有sshd和ssh客户端。


3 动态端口转发 或 绑定本地端口
可以把本地主机A上运行的SSH客户端转变成一个SOCKS代理服务器；实际上它是一种特殊的本地端口转发，或叫它 动态本地端口转发。
这个动态，就动在这种转发不规定目标地址(主机C)和目标端口(端口Z)，而是去读取应用发起的请求，从请求中获取目标信息。

ssh -D hostA端口X username@hostname
有一个问题：之前使用固定的端口转发时，应用的访问请求都是指向被转发的那个端口X的，
但现在应用的访问请求必须指向目标，以指定动态端口转发的目标。
可如果不指向端口X，如何让数据走SSH隧道呢？这就要求我们在系统或应用（浏览器等）中设置一个使用SOCKS5协议、
服务器为localhost、端口为X的代理，利用代理使请求走端口X。

这样应用的请求就从X进入隧道，抵达B后其中的目标信息被解析出来，B访问目标后再将结果通过隧道返回给A。
比如在开启代理的A上的浏览器中访问http://zhihu.com，经过端口转发，相当于是B在帮A访问http://zhihu.com。

SSH可传送数据，可让不加密的网络连接改走SSH连接
ssh -D 8080 user@host   # 让8080端口的数据，都通过SSH传向远程主机
SSH建立一个socket，监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。
可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。
curl --socks 5 127.0.0.1:8080 http://需要访问的网站   # 测试

举例：
https://blog.csdn.net/qq_37429313/article/details/121273446
1 A能上网，B不能，A B能通SSH访问，达到B能通过apt安装包
ssh -D 127.0.0.1:1080 usernameA@ipA   # B上运行
apt -o Acquire::http::proxy="socks5h://127.0.0.1:1080" update  # B上运行

2 在1基础上使B应用程序连网下载等(B上操作)，配置tsock代理
https://woniuxiang.space/blog/post/lightime/tsocks
工作原理是通过 ssh -D 1080 nameA@ipA, 本地上运行一个 socks server, 其监听端口为 1080,
socks server 的所有数据都是会转发到 B. 配置 tsocks 的服务器为 12.0.0.1:1080, 即可达到使用 B 作为代理上网的目的.
apt -o Acquire::http::proxy="socks5h://127.0.0.1:1080" install tsocks -y # 2.1 安装
tar xzvf tsocks-1.8beta5.tar.gz;cd tsocks-1.8;./configure;make && make install # 源码安装
vim /etc/tsocks.conf                             # 2.2 修改tsocks配置 如下
  server = 127.0.0.1
  # Server type defaults to 4 so we need to speciffy it as 5 for this one
  server_type = 5
  # The port defaults to 1080 but I've stated it hhere for clarity
  server port = 1080
  # local表示本地的网络，也就是不使用socks代理的网络
  # 删掉path的所有配置，path中配置的不走代理 建议
保持1之前ssh连接的终端不断的情况下，再开一个终端使用  # 2.3 使用
  tsocks wget www.baidu.com   # 使用wget工具
  tsocks firefox              # 访问网页
  tsocks apt install xxx      # 安装
假如提示resolve错误，需要在/etc/hosts中配置对应的IP 域名转换关系  # 2.4 配置host
  tsocks只能代理tcp，域名解析是udp，ping是icmp，tsocks代理的都不能用。
  如：112.124.140.210 mirrors.aliyun.co
  目前还没解决DNS问题，只能通过ip进行访问。

tsocks show            # 当前Shell的tsocks设置    这2个命令测试没啥作用
source tsocks on/off   # 打开/关闭当前shell的tsocks  设置 LD_PRELOAD="libtsocks.so"

Need a password in tsocks.conf or $TSOCKS_PASSWORD to authenticate withssh: connect to host 151.151.151.151 port 22: Connection refused
  使用的代理服务器，需要帐号密码进行身份校验，增加default_user及default_pass配置解决
SOCKS server 211.211.211.211 (211.211.211.211) is not on a local subnet!
  设置的代理没有与/etc/tsocks.conf文件中的local设置的网络在同一个子网中。配置：local = 211.211.211.0/255.255.255.224解决

5 端口转发的停止
SSH端口转发完全基于基本的SSH连接，因此，通过在远程终端上执行exit命令、暴力关闭本地终端窗口、
远程主机B关机、本地主机A关机等可以切断SSH连接的方式，即可停止SSH端口转发。就是这样。


6 SSH的其他参数
-N 只连接远程主机，不打开远程Shell -T 不为这个连接分配TTY。
ssh -NT -D 8080 host  # 这个两个参数放在一起，代表这个SSH连接只用来传数据，不执行远程操作。 　
ssh -f -D 8080 host   # -f SSH连接成功后，转入后台运行。要关闭这个后台连接，只能用kill杀进程。
  这样一来，就可以在不中断SSH连接的情况下，在本地Shell中执行其他操作。



Linux设置代理
https://blog.361way.com/linux-proxy/4184.html
https://chenjiehua.me/linux/socks5_and_http_proxy.html
0 curl 使用socks5代理
  curl --socks5 127.0.0.1:1080 baidu.com    # 即使配置了 tsocks 前面也不需要加 tsocks 前缀
1 wget下的代理设置
  set "http_proxy=http://[user]:[pass]@host:port/"  # 临时生效 或 export "http_proxy=http://[user]:[pass]@host:port/"
  wget -e "http_proxy=http://[user]:[pass]@host:port/" http://baidu.com   # 使用wget参数
  http_proxy=代理主机IP:端口   # 当前用户永久生效 创建~/.wgetrc文件中加入
  注：如果使用ftp代理，将http_proxy 改为ftp_proxy 即可。
2 echo "export http_proxy=proxy.361way.com:8888" > ~/.lftp   # lftp下代理设置
3 yum设置  编辑/etc/yum.conf文件，按如下配置
  proxy=http://yourproxy:8080/                     #匿名代理
  proxy=http://username:password@yourproxy:8080/   #需验证代理
4 全局代理配置  编辑/etc/profile 或~/.bash_profile ，增加如下内容：
  http_proxy=proxy.361way.com:8080
  https_proxy=proxy.361way.com:8080
  ftp_proxy=proxy.361way.com:8080
  export http_proxy https_proxy ftp_proxy
5 socket代理配置 这里以两个常见的socket代理软件socks5 和 tsocks 为例：
  5.1 tsocks代理
    apt-get install tsocks  # 1 安装
    /etc/tsocks.conf        # 2 配置
      local = 192.168.1.0/255.255.255.0 #local表示本地的网络，也就是不使用socks代理的网络
      server = 127.0.0.1 # SOCKS 服务器的 IP
      server_type = 5 # SOCKS 服务版本
      server_port = 9999 ＃SOCKS 服务使用的端口
    用 tsocks 运行你的软件很简单，在终端中:tsocks 你的软件 ，如tsocks wget url
  5.2 socks5代理
    安装socks客户端工具runsocks(正常安装socks5后自带)。在libsocks5.conf文件里加入所要使用的代理服务器。
    runsocks wget -m [http://site1 | ftp://site2]    # 配置完成，可以通过如下命令运行测试：
  5.3 proxychains
    sudo apt install proxychains  # 1 安装
    /etc/proxychains.conf         # 2 配置
      strict_chain
      proxy_dns
      tcp_read_time_out 15000
      tcp_connect_time_out 8000
      [ProxyList]
      socks5 127.0.0.1 1080
    在命令行前加上 proxychains 让程序走 socks5 代理  # 3使用
      sudo proxychains apt install xxx
      proxychains git clone git@github.com:xxx/xxx.git
6 Socks转为http代理
  上面的方式已经解决了大部分的代理问题。但某些特殊场景下只能使用http代理。因此，需要将 socks5 代理转换为 http 代理。
  这里将通过 privoxy 这个软件来实现该功能
    sudo apt install privoxy    # 1 安装
  /etc/privoxy/config           # 2 配置
    user-manual /usr/share/doc/privoxy/user-manual
    confdir /etc/privoxy
    logdir /var/log/privoxy
    filterfile default.filter
    logfile logfile
    actionsfile match-all.action # Actions that are applied to all sites and maybe overruled later on.
    actionsfile default.action   # Main actions file
    actionsfile user.action      # User customizations

    # 设置监听端口
    listen-address  localhost:8118
    toggle  1
    enable-remote-toggle  0
    enable-remote-http-toggle  0
    enable-edit-actions 0
    enforce-blocks 0
    buffer-limit 4096
    enable-proxy-authentication-forwarding 0
    forwarded-connect-retries  0
    accept-intercepted-requests 0
    allow-cgi-request-crunching 0
    split-large-forms 0
    keep-alive-timeout 5
    tolerate-pipelining 1
    socket-timeout 300

    # 限制访问权限
    permit-access src_addr[:port][/src_masklen] [dst_addr[:port][/dst_masklen]]

    # 连接socks5代理，注意最后的 . 不能漏了
    # 示例: forward-socks5 target_pattern socks_proxy[:port] http_parent[:port]
    forward-socks5 / 127.0.0.1:1080 .
  sudo service privoxy restart  # 3 重启
  这时候已经创建了一个http代理 localhost:8118
  为 shell 设置 http 代理        # 4 使用
    export http_proxy=http://127.0.0.1:8118
    export https_proxy=http://127.0.0.1:8118
7 Git设置代理
  假设我们已经通过ssh部署了一个socks5代理（ 127.0.0.1:1080）
  git config --global http.proxy socks5://127.0.0.1:1080 # 设置全局代理，不必设置https.proxy
  git config --global http.https://github.com.proxy socks5://127.0.0.1:1080  # 只针对 https://github.com 设置代理
  git config --global url.https://github.com/.insteadOf git://github.com/ # 如ssh协议无法使用代理，将 ssh 替代为 https
  执行完上面，可以查看 ~/.gitconfig 的配置：
    [http "https://github.com"]
        proxy = socks5://127.0.0.1:1080

    [http]
        proxy = socks5://127.0.0.1:1080

    [url "https://github.com/"]
        insteadOf = git://github.com/
  git config --global --unset http.proxy      # 取消代理
  对于 socks5 和 socks5h 的区别：
    socks5h: the hostname is resolved by the SOCKS server (also known as CURLPROXY_SOCKS5_HOSTNAME type);
    socks5: the hostname is resolved locally;


Ubuntu修改DNS方法
1 永久修改DNS方法
  /etc/systemd/resolved.conf   # 1 修改
    DNS=8.8.8.8 114.114.115.115  # 指定 DNS 服务器，以空白分隔，支持 IPv4 或 IPv6 位置
    FallbackDNS=8.8.8.8          # 备用 DNS 服务器
    Domains=domain.com           # 设置搜索域名
    LLMNR=yes                    # 设置 LLMNR 是否激活，可用的选项有 yes、no、resolve
    MulticastDNS=yes             # 设置 MulticastDNS 是否激活，可用的选项有 yes、no、resolve
    DNSSEC=yes                   # 设置 DNSSEC 是否激活，可用的选项有 yes、no、allow-downgrade
    Cache=no-negative            # 设置缓存是否激活，可用的选项有 yes、no、no-negative
  根据需要修改 resolved.conf 文件中的DNS，然后保存。
  systemctl restart systemd-resolved   # 2 重启 systemd-resolved 服务
  systemctl enable systemd-resolved    # 3 置开机启动 systemd-resolved 服务
  mv /etc/resolv.conf /etc/resolv.conf.bak      # 4 备份
  ln -s /run/systemd/resolve/resolv.conf /etc/  # 5 软连接
2 临时修改DNS方法
  /etc/resolv.conf    # 修改  此方法修改后即刻生效，但重启后失效。
  nameserver 8.8.8.8  # 加入想要修改的DNS 如果多个DNS，就一行一个，修改之后保存退出即可
  nameserver 8.8.4.4






解决git@github.com: Permission denied (publickey)
https://blog.csdn.net/qq_40047019/article/details/122898308
1 ssh-keygen -t rsa -C "xx@yemai.com" # 如没有ssh key  一路回车即可，生成ssh key。会覆盖之前的ssh key。
2 ssh -v git@github.com   # 最后两句会出现
  No more authentication methods to try.
  Permission denied (publickey).
3 ssh-agent -s            # 会提示类似的信息
  SSH_AUTH_SOCK=/tmp/ssh-OKgCrEhRlqjP/agent.1555733; export SSH_AUTH_SOCK;
  SSH_AGENT_PID=1555734; export SSH_AGENT_PID;
  echo Agent pid 1555734;
4 ssh-add ~/.ssh/id_rsa   # 这时候应该会提示
  Identity added: /home/liauto/.ssh/id_rsa (liauto@x01-orin1)
  Could not open a connection to your authentication agent.   # 如果出现错误提示
    先 eval `ssh-agent -s`，然后 ssh-add ~/.ssh/id_rsa         # 这时候一般OK了
5 将id_rsa.pub内容复制入你的github账号，settings -> SSH and GPG keys -> new SSH key -> title随便取名 -> Add SSH Key。
6 ssh -T git@github.com  # 验证Key 提示：如下信息就OK了。
  Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.
