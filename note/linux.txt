一般linux系统分为两大类
1 RedHat系列 RedHat RHEL Centos Fedora "Oracle Linux" 等
  常用的安装包为 rpm 包 安装命令为 "rpm -参数"
  包管理工具 yum
  支持tar包
2 Debian系列 Debian Ubuntu 等
  常用的安装包为 deb 包 安装命令为 "dpkg -参数"
  包管理工具 apt-get
  支持tar包

环境变量---------------------------------------------------------------------
Linux 修改环境变量设置的三种方式
对所有的用户的都起作用的环境变量   修改 /etc/profile 文件
仅用于当前用户有效的场景          修改当前用户的 bashrc 文件
仅当前命令行/控制台/shell可用     在当前命令行/控制台中直接使用export定义环境变量

shell变量
  不同shell有自己特有的变量，这个和用户变量是不同的，如BASH_ARGC， BASH等 只有set才会显示，是bash特有的
用户变量(环境变量)
  当前用户变量和你用什么shell无关，不管你用什么shell都在，比如HOME,SHELL等这些变量
export不加参数的时候，显示哪些变量被导出成了用户变量，因为一个shell自己的变量可以通过export “导出”变成一个用户变量。

shell变量包括两种变量
1.本shell私有的变量：通过赋值语句定义好的变量，可以通过如下方法定义shell变量
  A1="1234"
  delcare A2="2345"
2.用户的环境变量：通过export语法导出的shell私有变量，可以通过如下方法导出用户环境变量
  A1="1234"
  export A1  #先定义再导出
  export A3="34"
导出成的用户环境变量可以在所有的shell中看到

环境变量的查看
echo $PATH  #查看单个环境变量
env         #显示当前用户的变量 即环境变量
set         #显示当前shell的定义的私有变量，包括用户的环境变量，按变量名称排序
export      #显示当前导出成用户变量的shell变量，并显示变量的属性(是否只读)，按变量名称排序
export -n xxx  #删除xxx的导出属性 并没有删除此变量 只是它的属性由环境变量变为本地变量
declare     #同set
unset       #删除指定的shell变量或环境变量


              [env环境变量]  撤销导出属性
                  ↑  |   export -n aaa
                  |  |                     export aaa=123  定义本地变量的同时导出
  export aaa      |  ↓                     aaa=123         定义本地变量
   导出变量    [set本地变量]                unset aaa        删除变量 不管有没导出

进程的维度理解
set设置了当前shell进程的本地变量，本地变量只在当前shell的进程内有效，不会被子进程继承和传递。
env仅为将要执行的子进程设置环境变量。
export将一个shell本地变量提升为当前shell进程的环境变量，从而被子进程自动继承，但是export的变量无法改变父进程的环境变量。
source运行脚本的时候，不会启用一个新的shell进程，而是在当前shell进程环境中运行脚本。
exec运行脚本或命令的时候，不会启用一个新的shell进程，并且exec后续的脚本内容不会得到执行，即当前shell进程结束了。
进程和环境变量
进程是一个程序执行的上下文集合，这个集合包括程序代码、数据段、堆栈、环境变量、内核标识进程的数据结构等。
  一个进程可以生成另一个进程，生成的进程称为子进程，那么相应的就有父进程，所谓子子孙孙无穷尽也。
  子进程从父进程处会继承一些遗传因素，其中就包括本文的主题环境变量。环境变量是一组特殊的字符型变量，由于具有继承性质，
  环境变量也经常用于父子进程传递参数用，这一点在shell编程中尤为突出。
fork和exec
在unix系统中进程通过依次调用fork()和exec()系统调用来实现创建一个子进程。
fork其实就是克隆，为什么github复刻别人的项目叫fork？就是这么来的，所谓“克隆”，就是在内存中将当前进程的所有内存镜像
  复制一份，所有东西都一样，只修改新进程的进程号(PID)。因为fork()会复制整个进程，包括进程运行到哪句代码，
  这意味着新的进程会继续执行fork()后面的代码，父进程也会运行fork()后面的代码，从fork()开始父子进程才分道扬镳。
exec是一组函数的统称，并且exec的准确定义是，用磁盘上的一个新的程序替换当前的进程的正文段、数据段、堆栈段。
  所以exec并不产生新的进程，而是替换。如此一来进程将从新代码的main开始执行，相当于另外运行了一个完全不同的程序，
  但保留了原来环境变量。
exec函数分为两类，一类是可以设置并传递新环境变量的，一类是不能传递新环境变量的，只能继承原环境变量的。换句话说，
  在运行新的程序时，是有机会改变新程序的环境变量的，而不只是继承。如下面这个变种，可以通过envp参数设置环境变量
int execve(const char * filename,char * const argv[ ],char * const envp[ ]);
作为父进程而言，可以通过waitpid()函数等待子进程退出，并获得退出状态。
进程可通过setenv或putenv更改自己的环境变量，但环境变量的继承只能单向，即从父进程继承给fork出来的子进程。
  子进程即使修改了自己的环境变量也无法动摇到父进程的环境变量。
shell
shell并没有什么特殊，也是一个进程，当我们在命令行中敲入一个命令，并且按下Enter后，shell这个进程会通过fork和exec为
  我们创建一个子进程（存在一小部分命令不需要启动子进程，称为build-in命令），并且等待(waitpid)这个子进程完成退出。
  那么进程的内存镜像显然就包含本文的主题环境变量。比如，如果我们在shell命令行中执行ls -al，shell实际执行如下伪代码：
pid = fork();
if(pid == 0) {
  exec("ls -al"); //子进程中，调用exec
} else if(pid > 0) {
  waitpid(pid);   //父进程中，waitpid等待子进程退出
}
如果在命令行中执行一个shell脚本呢？默认情况下，shell进程会创建一个sub-shell子进程来执行这个shell脚本，
  并且等待这个子进程执行结束。
再来审视一下本文的主题。首先set,source,export都是shell的build-in命令，命令本身不会创建新进程。
set跟进程创建无关，也跟环境变量无关，只是当前shell进程内部维护的变量（本地变量），用于变量的引用和展开，不能遗传和继承。
但shell的export命令可以通过调用putenv将一个本地变量提升为当前shell的环境变量。但是，记住环境变量的继承只是单向的，
  sub-shell中export的变量在父shell中是看不到的。有什么办法可以让一个脚本中的export印象到父进程的环境变量呢？
答案是使用source执行脚本，source的用法如下：
source ./test.sh
如果用source执行脚本，意味着fork和exec不会被调用，当前shell直接对test.sh解释执行。这样的话，如果此时test.sh中
  有export(即putenv)，那么将会改变当前shell的环境变量。
export如此好用，但是问题是它几乎会影响到其后的所有命令，有没有办法可以在运行某个命令时，临时启用某个环境变量，
  而不影响后面的命令呢？
答案是使用env，env的用法如下：
env GOTRACEBACK=crash ./test.sh
env不是shell的build-in命令，所以shell执行env的时候还是需要创建子进程的
env的作用从本质上说，相当于shell先fork，然后在子进程中运行env，子进程env调用execve运行test.sh时，多传了一个
  GOTRACEBACK=crash的环境变量（上文提到过execve是可以改变默认的继承行为的），这样test.sh可以看到这个
  GOTRACEBACK环境变量，但由于没有调用putenv改变父shell的环境变量，所以后续启动的进程并不继承GOTRACEBACK。
exec意味着不调用fork，而是直接调用exec执行！这意味着当前shell的代码执行到exec后，代码被替换成了exec要执行的程序，
  自然地，后续的shell脚本不会得到执行，因为shell本身都被替换掉了。
1.sh    例子
#!/bin/bash
A=B
echo "PID for 1.sh before exec/source/fork:$$"
export A
echo "1.sh: \$A is $A"
case $1 in
    exec)
        echo "using exec…"
        exec ./2.sh;;
    source)
        echo "using source…"
        . ./2.sh;;
    *)
        echo "using fork by default…"
        ./2.sh;;
esac
echo "PID for 1.sh after exec/source/fork:$$"
echo "1.sh: \$A is $A"

2.sh
#!/bin/bash
echo "PID for 2.sh: $$"
echo "2.sh get \$A=$A from 1.sh"
A=C
export A
echo "2.sh: \$A is $A"

然后，分别跑如下参数来观察结果：
$ ./1.sh fork
$ ./1.sh source
$ ./1.sh exec


 [export]      [no source]                [source]           [exec]            [env]
____________  ____________            _______________    _______________    _______________
|   envs   |  |   envs   |__  fork    |   envs      |    |   envs      |    |   envs       |__  fork
|          |  |          |  ↘________ |             |    |             |    |              |  ↘_______
|   A=x    |  |          |   | envs | |             |    |             |    |              |   | envs |
|__________|  |__________|   |______| |_____________|    |_____________|    |______________|   | A=x  |
|    ↑     |  |./x.sh    |-→ |      | |source ./x.sh|    |exec ./x.sh  |    |env A=x ./x.sh|-→ |______|
|export A=x|  |          |←- |______| |  _________  |    |_____________|    |              |←- |______|
|          |  |          |            | | ./x.sh  | |    |   ./x.sh    |    |              |
|__________|  |__________|            | |_________| |    |             |    |______________|
                                      |_____________|    |_____________|


环境变量配置文件(Ubuntu16.04)
/etc/profile
用于设置系统级的环境变量和启动程序，在这个文件下配置会对所有用户生效。当用户登录(login)时，文件会被执行，
  并从/etc/profile.d目录的配置文件中查找shell设置。如果对/etc/profile修改的话必须重启才会生效
/etc/bash.bashrc
每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。如果想对所有使用bash的用户修改
  某个配置并在以后打开的bash都生效的话可以修改这个文件，修改之后不用重启，重新打开一个bash即可生效。
~/.profile
每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,
  他设置一些环境变量,执行用户的.bashrc文件.
~/.bashrc
该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取.
~/.bash_logout
当每次退出系统(退出bash shell)时,执行该文件，通常存放清理工作的命令。

全局配置文件
  /etc/profile
  /etc/profile.d/*.sh
  /etc/bashrc
个人配置文件
  ~/.bash_profile
  ~/.bashrc 由上可知，bash 的
profile 类文件作用：
  1.设定环境变量
  2.运行命令或脚本（登录时运行的脚本）。
bashrc 类文件配置作用：
  1.设定本地变量。
  2.定义命令别名

登陆shell ----> /etc/profile ----> ~/.bash_profile ---->  开始才做bash
                |---> /etc/inputc              |(~/.bash_login ~/.profile)
                |---> /etc/profile.d/*.sh      |---> ~/.bashrc           <---- 非登陆shell
                       |--> /etc/sysconfig/i18n           |-->/etc/bashrc
shell登出是会读取 ~/.bash_logout
执行顺序
登陆shell   /etc/profile –> /etc/profile.d/*.sh –> ~/.bash_profile–> ~/.bashrc –> /etc/bashrc
非登陆shell ~/.bashrc –> /etc/bashrc –> /etc/prodile.d/*.sh
source 配置文件档名 shell环境变量修改之后需要立即生效  如 source ~/.bash_profile 等价 . ~/.bash_profile


登陆shell(login shell)：取得 bash 时需要完整的登陆流程的，就称为 login shell
  比如通过ssh方式连接，或者由tty1 ~ tty6 登陆，需要输入用户的账号与密码，此时取得的 bash 就称为login shell
  su - username。
  su -l username。

非登陆shell(non-login shell)：取得 bash 接口的方法不需要重复登陆的举动
  比如你以 X window 登陆 Linux 后， 再以 X 的图形化接口启动终端机，此时该终端接口无需输入账号与密码
  比如你在原本的 bash 环境下再次下达 bash 这个命令，同样的也没有输入账号密码， 那第二个 bash (子程序) 是
  su username。
  图形终端下打开的命令窗口。
  自动执行的 shell 脚本。

演示:
  tty      显示  /dev/pts/124  #当前从ssh登陆到服务器
  echo $0  显示  -bash         #-bash ，为登陆shell  windows打开一个终端，显示为/bin/bash，即非登陆shell
  ps       显示如下            ps -ef|grep pts|grep bash 显示所有的
      PID TTY          TIME CMD
    77122 pts/1    00:00:00 bash
    77157 pts/1    00:00:00 ps
交互式shell(interactive shell)
  交互式模式就是在终端上执行，shell等待你的输入，并且立即执行你提交的命令。这种模式被称作交互式是因为shell与用户
    进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、退出。当你退出后，shell也终止了。

非交互式shell(non-interactive shell)
  shell也可以运行在另外一种模式：非交互式模式，以shell script(非交互)方式执行。在这种模式 下，shell不与你进行交互，
    而是读取存放在文件中的命令,并且执行它们。当它读到文件的结尾EOF，shell也就终止了。

查看变量-的值，如果值中包含了字母i，则表示交互式（interactive）。
echo $-  显示  himBHs                                                  #交互式
echo 'echo $-' | bash  或 bash ./test.sh (其中.sh中echo $-) 显示 hBs    #非交互shell

查看变量PS1的值，如果非空，则为交互式，否则为非交互式，因为非交互式会清空该变量。
echo $PS1   [\u@\h \W]\$           #非空，为交互式。
bash ./test.sh (其中.sh中echo PS1)  #空值，为非交互式。注意，必须在新进程中运行 Shell 脚本。

判断 Shell 是否为登录式也非常简单，只需执行shopt login_shell即可，值为on表示为登录式，off为非登录式。
shopt login_shell  显示  login_shell    on    登录shell   若在脚本中则显示 off

通过 Linux 控制台（不是桌面环境自带的终端）或者 ssh 登录 Shell 时（这才是正常登录方式），为交互式的登录 Shell。
执行 bash 命令时默认是非登录的，增加--login选项（简写为-l）后变成登录式。
  bash xx.sh         #非登录模式
  bash -l xx.sh      #登录模式
使用由()包围的组命令或者命令替换进入子 Shell 时，子 Shell 会继承父 Shell 的交互和登录属性。
  bash
  (echo $PS1;shopt login_shell)   #非登录交互式模式
  bash -l
  (echo $PS1;shopt login_shell)   #登录交互式模式
ssh 执行远程命令，但不登录时，为非交互非登录式。
  ssh localhost 'echo $PS1;shopt login_shell'       #非交互非登录模式
  ssh name@ip 'echo $PS1;shopt login_shell'         #即便是让输入密码 也是非交互非登录模式
在 Linux 桌面环境下打开终端时，为交互式的非登录 Shell。




Linux版本
  内核版本
    uname -a 查看内核版本
    cat /proc/version 查看内核版本
  发行版本
    lsb_release -a   即可列出所有版本信息   适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版
    cat /etc/redhat-release  查看发行版本   只适合Redhat系的Linux
    cat /etc/issue   此命令也适用于所有的Linux发行版

判断 麒麟V10系统
cat /etc/.productinfo   如果release是 V10 版本，即为银河麒麟系统 如果release是 V7 版本，即为中标麒麟系统
注:麒麟V10的x86_64与aarch64架构不兼容  x86_64需要在centos7上以make RELEASE=1 BITS=64 CENTOS=uos编译 aarch64需要在120.46.130.85上以make RELEASE=1 BITS=64 CENTOS=uos编译




centos  安装软件 yum -y update  必要软件 yum -y install vim git wget net-tools gcc gcc-c++ gdb libstdc++-devel
安装工作中需要的额外库 yum -y install openssl-devel  yum -y install libuuid-devel  yum install telnet 安装telnet
yum -y install lrzsz    安装传输文件命令



systemd service配置
systemd 的配置文件大部分放置于 /usr/lib/systemd/system/ 目录内
以audit服务为例
[Unit]
Description=Security Auditing Service
DefaultDependencies=no
## If auditd.conf has tcp_listen_port enabled, copy this file to
## /etc/systemd/system/auditd.service and add network-online.target
## to the next line so it waits for the network to start before launching.
After=local-fs.target systemd-tmpfiles-setup.service
Conflicts=shutdown.target
Before=sysinit.target shutdown.target
RefuseManualStop=yes                                             #RefuseManualStop=yes，是不允许手动停止的
ConditionKernelCommandLine=!audit=0
Documentation=man:auditd(8) https://github.com/linux-audit/audit-documentation

[Service]
Type=forking
PIDFile=/var/run/auditd.pid
ExecStart=/sbin/auditd
## To not use augenrules, copy this file to /etc/systemd/system/auditd.service
## and comment/delete the next line and uncomment the auditctl line.
## NOTE: augenrules expect any rules to be added to /etc/audit/rules.d/
ExecStartPost=-/sbin/augenrules --load
#ExecStartPost=-/sbin/auditctl -R /etc/audit/audit.rules
ExecReload=/bin/kill -HUP $MAINPID
# By default we don't clear the rules on exit. To enable this, uncomment
# the next line after copying the file to /etc/systemd/system/auditd.service
#ExecStopPost=/sbin/auditctl -R /etc/audit/audit-stop.rules

[Install]
WantedBy=multi-user.target

说明
  [Unit]：这个项目内主要在规范服务启动的脚本、环境配置文件文件名、重新启动的方式等等。
  [Install]：这个项目就是将此 unit 安装到哪个 target 里面去的意思！
  [Service] 区块：启动行为
    启动命令
    ExecStart字段：定义启动进程时执行的命令
    ExecReload字段：重启服务时执行的命令
    ExecStop字段：停止服务时执行的命令
    ExecStartPre字段：启动服务之前执行的命令
    ExecStartPost字段：启动服务之后执行的命令
    ExecStopPost字段：停止服务之后执行的命令

    启动类型
    Type字段定义启动类型。它可以设置的值如下：
    simple（默认值）：ExecStart字段启动的进程为主进程
    forking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程（后台运行）
    oneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务
    dbus：类似于simple，但会等待 D-Bus 信号后启动
    notify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务
    idle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合

    重启行为
    Service区块有一些字段，定义了重启行为：
    KillMode字段：定义 Systemd 如何停止 sshd 服务：
    control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉
    process：只杀主进程
    mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号
    none：没有进程会被杀掉，只是执行服务的 stop 命令。
    Restart字段：定义了 sshd 退出后，Systemd 的重启方式

    Restart字段可以设置的值如下。
    no（默认值）：退出后不会重启
    on-success：只有正常退出时（退出状态码为0），才会重启
    on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启
    on-abnormal：只有被信号终止和超时，才会重启
    on-abort：只有在收到没有捕捉到的信号终止时，才会重启
    on-watchdog：超时退出，才会重启
    always：不管是什么退出原因，总是重启
    注：对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。
    RestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。

  [Install] 区块
    Install区块，定义如何安装这个配置文件，即怎样做到开机启动。
    WantedBy字段：表示该服务所在的 Target。
    Target的含义是服务组，表示一组服务。
    WantedBy=multi-user.target指的是：sshd 所在的 Target 是multi-user.target。
    这个设置非常重要，因为执行systemctl enable sshd.service命令时，sshd.service的一个符号链接，就会放在/etc/systemd/system目录下面的multi-user.target.wants子目录之中。
    Systemd 有默认的启动 Target。




内核报错kernel:NMI watchdog: BUG: soft lockup - CPU#1
  系统管理员电话通知，描述为一台服务器突然无法ssh连接，登录服务器带外IP地址并进入远程控制台界面后，提示Authentication error，重启后即可正常进入系统，进入后过20分钟又进入死循环
  出现死锁原因
    1、CPU高负载时间过长
    2、服务器电源供电不足，导致CPU电压不稳定
    3、vcpus超过物理cpu cores
    4、虚机所在的宿主机的CPU太忙或磁盘IO太高
    5、虚机机的CPU太忙或磁盘IO太高
    6、VM网卡驱动存在bug，处理高水位流量时存在bug导致CPU死锁
    7、BIOS开启了超频，导致超频时电压不稳，容易出现CPU死锁
    8、Linux kernel或KVM存在bug
    9、BIOS Intel C-State开启导致，关闭可解决
    10、BIOS spread spectrum开启导致
  询问了度娘，发现此报错为内核锁死，简称“死机”，询问管理员后得知，近期服务器安装了docker，可能由于负载过高导致
    Soft lockup：这个bug没有让系统彻底死机，但是若干个进程（或者kernel thread）被锁死在了某个状态（一般在内核区域），很多情况下这个是由于内核锁的使用的问题。
    内核参数kernel.watchdog_thresh（/proc/sys/kernel/watchdog_thresh）系统默认值为10。如果超过2*10秒会打印信息，注意：调整值时参数不能大于60
    Linux内核对于每一个cpu都有一个监控进程，在技术界这个叫做watchdog（看门狗）。通过ps –ef | grep watchdog能够看见，进程名称大概是watchdog/X（数字：cpu逻辑编号1/2/3/4之类的）。这个进程或者线程每一秒钟运行一次，否则会睡眠和待机。这个进程运行会收集每一个cpu运行时使用数据的时间并且存放到属于每个cpu自己的内核数据结构。在内核中有很多特定的中断函数。这些中断函数会调用soft lockup计数，他会使用当前的时间戳与特定（对应的）cpu的内核数据结构中保存的时间对比，如果发现当前的时间戳比对应cpu保存的时间大于设定的阀值，他就假设监测进程或看门狗线程在一个相当可观的时间还没有执。Cpu软锁为什么会产生，是怎么产生的？如果linux内核是经过精心设计安排的CPU调度访问，那么怎么会产生cpu软死锁？那么只能说由于用户开发的或者第三方软件引入，看我们服务器内核panic的原因就是qmgr进程引起。因为每一个无限的循环都会一直有一个cpu的执行流程（qmgr进程示一个后台邮件的消息队列服务进程），并且拥有一定的优先级。Cpu调度器调度一个驱动程序来运行，如果这个驱动程序有问题并且没有被检测到，那么这个驱动程序将会暂用cpu的很长时间。根据前面的描述，看门狗进程会抓住（catch）这一点并且抛出一个软死锁（soft lockup）错误。软死锁会挂起cpu使你的系统不可用。

  具体分析
    1.系统如下时间2个时间进行了重启:
      Mar  3 21:53:16 ser-node7 kernel: Linux version 3.10.0-957.el7.x86_64 (mockbuild@x86040.build.eng.bos.redhat.com)
      Mar  3 22:37:19 ser-node7 kernel: Linux version 3.10.0-957.el7.x86_64 (mockbuild@x86040.build.eng.bos.redhat.com)
      在重启前的一段时间均已经出现了cpu软锁的现象，而深入分析cpu软锁，我们依赖于kdump产生的vmcore数据.
        Mar  3 14:28:18 ser-node7 kernel: NMI watchdog: BUG: soft lockup - CPU#5 stuck for 22s! [runc[1:CHILD]:52902]
        Mar  2 18:14:59 ser-node7 kernel: NMI watchdog: BUG: soft lockup - CPU#3 stuck for 23s! [runc:[1:CHILD]:55961]

      ./systemctl_list-unit-files:kdump.service enabled
      如果您之前已经做过，那么请您额外修改/etc/sysctl.conf加入以下行:
      kernel.softlockup_panic = 1
      然后执行"sysctl -p"使参数生效。这样当系统出现cpu软锁现象时，会自动触发kernel panic，此时如果kdump可以正常工作，会生成vmcore.并自动重新启动系统

    2.另外在日志中我们还注意了存在如下的告警,其和上面的soft lockup问题无直接关系.
      # cat messages | grep "SLUB: Unable to allocate memory on node"
        Mar  2 18:04:45 ser-node7 kernel: SLUB: Unable to allocate memory on node -1 (gfp=0xd0)
        Mar  3 14:54:25 ser-node7 kernel: SLUB: Unable to allocate memory on node -1 (gfp=0xd0)
        Mar  3 14:54:25 ser-node7 kernel: SLUB: Unable to allocate memory on node -1 (gfp=0xd0)

      此为系统的已知BUG，具体请参考如下KB：
        SLUB: Unable to allocate memory on node -1 (gfp=0x20)
        https://access.redhat.com/solutions/4088471
        依据此KB，请将kernel升级到kernel-3.10.0-1062.4.1.el7或者更新.
        kernel-3.10.0-1062.4.1.el7下载地址为:
        https://access.redhat.com/errata/RHSA-2019:3055
        如何升级内核，请查看下面文档：
        How to update/upgrade the Red Hat Enterprise Linux kernel?
        https://access.redhat.com/solutions/20366

  解决方案
    百度大手子给的方案如下所示：
    vi /etc/sysctl.conf
    kernel.watchdog_thresh=30
    查看：# tail -1 /proc/sys/kernel/watchdog_thresh
    临时生效：# sysctl -w kernel.watchdog_thresh=30
    原厂建议尚在等待中

  解决办法2
    echo 30 > /proc/sys/kernel/watchdog_thresh
    echo "kernel.watchdog_thresh=30" >> /etc/sysctl.conf
    sysctl -w kernel.watchdog_thresh=30
    sysctl -q vm.swappiness
    sysctl -p

  解决办法3:脚本
    #!/bin/bash
    #修改阈值为30，写入文件
    echo 30 > /proc/sys/kernel/watchdog_thresh
    #修改阈值为30，临时生效
    sysctl -w kernel.watchdog_thresh=30

    #修改阈值为30，写入启动文件
    grep 'watchdog_thresh' /etc/sysctl.conf
    if [ $? -ne 0 ]; then
    	echo "kernel.watchdog_thresh=30" >> /etc/sysctl.conf
    else
    	echo "正常"
    fi





Linux查看进程内存空间分布 - pmap
The pmap command reports the memory map of a process or processes.
pmap 提供了进程的内存映射，用于显示一个或多个进程的内存状态，报告进程的地址空间和内存状态信息。

测试代码如下：

#include <iostream>
#include <unistd.h>

using namespace std;

int main()
{
    int i = 0;
    char a[100];
    for(int i = 0; i < sizeof(a); ++i)
    {
        a[i] = i;
    }

    while(1)
    {
        cout << "get pid " << getpid() << endl;
        int *ptr = new int[1000];
        sleep(1);
    }
    return 0;
}


使用pmap -d [PID]，表示以设备格式方式查看。

fzz@ubuntu:~/src/testCPP$ pmap -d 4106
4106:   ./testCPP
Address           Kbytes Mode  Offset           Device    Mapping
0000000000400000      12 r-x-- 0000000000000000 008:00001 testCPP
0000000000602000       4 r---- 0000000000002000 008:00001 testCPP
0000000000603000       4 rw--- 0000000000003000 008:00001 testCPP
000000000229a000     200 rw--- 0000000000000000 000:00000   [ anon ]
00007f7ec7414000    1056 r-x-- 0000000000000000 008:00001 libm-2.23.so
00007f7ec751c000    2044 ----- 0000000000108000 008:00001 libm-2.23.so
00007f7ec771b000       4 r---- 0000000000107000 008:00001 libm-2.23.so
00007f7ec771c000       4 rw--- 0000000000108000 008:00001 libm-2.23.so
00007f7ec771d000    1792 r-x-- 0000000000000000 008:00001 libc-2.23.so
00007f7ec78dd000    2048 ----- 00000000001c0000 008:00001 libc-2.23.so
00007f7ec7add000      16 r---- 00000000001c0000 008:00001 libc-2.23.so
00007f7ec7ae1000       8 rw--- 00000000001c4000 008:00001 libc-2.23.so
00007f7ec7ae3000      16 rw--- 0000000000000000 000:00000   [ anon ]
00007f7ec7ae7000      92 r-x-- 0000000000000000 008:00001 libgcc_s.so.1
00007f7ec7afe000    2044 ----- 0000000000017000 008:00001 libgcc_s.so.1
00007f7ec7cfd000       4 r---- 0000000000016000 008:00001 libgcc_s.so.1
00007f7ec7cfe000       4 rw--- 0000000000017000 008:00001 libgcc_s.so.1
00007f7ec7cff000    1868 r-x-- 0000000000000000 008:00001 libstdc++.so.6.0.28
00007f7ec7ed2000    2048 ----- 00000000001d3000 008:00001 libstdc++.so.6.0.28
00007f7ec80d2000      44 r---- 00000000001d3000 008:00001 libstdc++.so.6.0.28
00007f7ec80dd000      12 rw--- 00000000001de000 008:00001 libstdc++.so.6.0.28
00007f7ec80e0000      12 rw--- 0000000000000000 000:00000   [ anon ]
00007f7ec80e3000     152 r-x-- 0000000000000000 008:00001 ld-2.23.so
00007f7ec82eb000      24 rw--- 0000000000000000 000:00000   [ anon ]
00007f7ec8308000       4 r---- 0000000000025000 008:00001 ld-2.23.so
00007f7ec8309000       4 rw--- 0000000000026000 008:00001 ld-2.23.so
00007f7ec830a000       4 rw--- 0000000000000000 000:00000   [ anon ]
00007ffee87e4000     132 rw--- 0000000000000000 000:00000   [ stack ]
00007ffee8858000      12 r---- 0000000000000000 000:00000   [ anon ]
00007ffee885b000       8 r-x-- 0000000000000000 000:00000   [ anon ]
ffffffffff600000       4 r-x-- 0000000000000000 000:00000   [ anon ]
mapped: 13680K    writeable/private: 424K    shared: 0K


使用pmap -X [PID] 则可以查看更加详细的内存映像（扩展格式）

fzz@ubuntu:~/src/testCPP$ pmap -X 4363
4363:   ./testCPP
         Address Perm   Offset Device   Inode  Size  Rss Pss Referenced Anonymous LazyFree ShmemPmdMapped Shared_Hugetlb Private_Hugetlb Swap SwapPss Locked Mapping
        00400000 r-xp 00000000  08:01 1175070    12   12  12         12         0        0              0              0               0    0       0      0 testCPP
        00602000 r--p 00002000  08:01 1175070     4    4   4          4         4        0              0              0               0    0       0      0 testCPP
        00603000 rw-p 00003000  08:01 1175070     4    4   4          4         4        0              0              0               0    0       0      0 testCPP
        00ec7000 rw-p 00000000  00:00       0   200   96  96         96        96        0              0              0               0    0       0      0 [heap]
    7f9537874000 r-xp 00000000  08:01  926551  1056  176   3        176         0        0              0              0               0    0       0      0 libm-2.23.so
    7f953797c000 ---p 00108000  08:01  926551  2044    0   0          0         0        0              0              0               0    0       0      0 libm-2.23.so
    7f9537b7b000 r--p 00107000  08:01  926551     4    4   4          4         4        0              0              0               0    0       0      0 libm-2.23.so
    7f9537b7c000 rw-p 00108000  08:01  926551     4    4   4          4         4        0              0              0               0    0       0      0 libm-2.23.so
    7f9537b7d000 r-xp 00000000  08:01  926594  1792 1164  13       1164         0        0              0              0               0    0       0      0 libc-2.23.so
    7f9537d3d000 ---p 001c0000  08:01  926594  2048    0   0          0         0        0              0              0               0    0       0      0 libc-2.23.so
    7f9537f3d000 r--p 001c0000  08:01  926594    16   16  16         16        16        0              0              0               0    0       0      0 libc-2.23.so
    7f9537f41000 rw-p 001c4000  08:01  926594     8    8   8          8         8        0              0              0               0    0       0      0 libc-2.23.so
    7f9537f43000 rw-p 00000000  00:00       0    16    8   8          8         8        0              0              0               0    0       0      0
    7f9537f47000 r-xp 00000000  08:01  926430    92   88   2         88         0        0              0              0               0    0       0      0 libgcc_s.so.1
    7f9537f5e000 ---p 00017000  08:01  926430  2044    0   0          0         0        0              0              0               0    0       0      0 libgcc_s.so.1
    7f953815d000 r--p 00016000  08:01  926430     4    4   4          4         4        0              0              0               0    0       0      0 libgcc_s.so.1
    7f953815e000 rw-p 00017000  08:01  926430     4    4   4          4         4        0              0              0               0    0       0      0 libgcc_s.so.1
    7f953815f000 r-xp 00000000  08:01    6136  1868 1276  41       1276         0        0              0              0               0    0       0      0 libstdc++.so.6.0.28
    7f9538332000 ---p 001d3000  08:01    6136  2048    0   0          0         0        0              0              0               0    0       0      0 libstdc++.so.6.0.28
    7f9538532000 r--p 001d3000  08:01    6136    44   44  44         44        44        0              0              0               0    0       0      0 libstdc++.so.6.0.28
    7f953853d000 rw-p 001de000  08:01    6136    12   12  12         12        12        0              0              0               0    0       0      0 libstdc++.so.6.0.28
    7f9538540000 rw-p 00000000  00:00       0    12   12  12         12        12        0              0              0               0    0       0      0
    7f9538543000 r-xp 00000000  08:01  926314   152  152   1        152         0        0              0              0               0    0       0      0 ld-2.23.so
    7f953874b000 rw-p 00000000  00:00       0    24   24  24         24        24        0              0              0               0    0       0      0
    7f9538768000 r--p 00025000  08:01  926314     4    4   4          4         4        0              0              0               0    0       0      0 ld-2.23.so
    7f9538769000 rw-p 00026000  08:01  926314     4    4   4          4         4        0              0              0               0    0       0      0 ld-2.23.so
    7f953876a000 rw-p 00000000  00:00       0     4    4   4          4         4        0              0              0               0    0       0      0
    7ffc4ae5d000 rw-p 00000000  00:00       0   132   12  12         12        12        0              0              0               0    0       0      0 [stack]
    7ffc4af69000 r--p 00000000  00:00       0    12    0   0          0         0        0              0              0               0    0       0      0 [vvar]
    7ffc4af6c000 r-xp 00000000  00:00       0     8    4   0          4         0        0              0              0               0    0       0      0 [vdso]
ffffffffff600000 r-xp 00000000  00:00       0     4    0   0          0         0        0              0              0               0    0       0      0 [vsyscall]
                                              ===== ==== === ========== ========= ======== ============== ============== =============== ==== ======= ======
                                              13680 3140 340       3140       268        0              0              0               0    0       0      0 KB



Address: 内存开始地址
Kbytes: 分配的虚拟内存块大小（KB）
RSS（Resident Set Size - 常驻内存集）: 保留在内存的字节数（KB）,top命令输出中的RES和pmap输出中的RSS是一个东西。表征的是物理内存。
Dirty: 脏页的字节数（包括共享和私有的）（KB）
Mode: 内存的权限：read、write、execute
Mapping: 占用内存的文件、[anon]（匿名的，表示在磁盘上没有对应的文件）、[stack]（栈）
Offset: 文件偏移
Device: 设备名 (major:minor)
anonymous （anon 匿名的意思）：表示在磁盘上没有对应的文件，这些一般都是可执行文件或者动态库里的bss段、heap(堆)。当然有对应文件的mapping也有可能是anonymous，比如文件的数据段
