
http://ftp.twaren.net/                   # 台湾高品质学术研究网络
https://zhuanlan.zhihu.com/p/489812795   # 探讨关于Linux磁盘与文件系统原理
https://zhuanlan.zhihu.com/p/436454953   # Linux vDSO概述
https://zq99299.github.io/linux-tutorial/  # linux 系统教程学习笔记
https://awesome-programming-books.github.io/linux/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E7%AC%AC%E4%B8%89%E7%89%88).pdf # UNIX环境高级编程(第三版).pdf
https://www.zhihu.com/question/47528537/answer/2770074755 # linux的内存管理是怎么样的
https://zhuanlan.zhihu.com/p/488123510   # 一篇长文叙述Linux内核虚拟地址空间的基本概括
https://zhuanlan.zhihu.com/p/676385200   # 一口气搞懂【Linux内存管理】，就靠这60张图、59个问题了
https://gityuan.com/2015/12/20/signal/   # Linux信号(signal)机制

Linux版本
  内核版本
    uname -a  # -a 所有 -s 内核名称 -n 主机名 -r 内核发行号 -v 内核版本 -m 主机硬件架构 -p CPU类型 -i 硬件平台 -o 操作系统
    cat /proc/version        # 内核版本
  发行版本 Linux Standard Base (LSB)
    lsb_release -a           # 查看操作系统版本  适用所有Linux发行版，包括RedHat SUSE Debian Ubuntu等
    cat /etc/redhat-release  # 查看发行版本      只适合Redhat系的Linux
    cat /etc/issue           # 适用所有Linux发行版

cat /etc/.productinfo        # release是 V10 版本，为银河麒麟系统 release是 V7 版本，为中标麒麟系统
  麒麟V10的x86_64与aarch64架构不兼容
  x86_64需要在centos7上以make RELEASE=1 BITS=64 CENTOS=uos编译
  aarch64需要在120.46.130.85上以make RELEASE=1 BITS=64 CENTOS=uos编译



linux系统一般分为两大类
1 RedHat系列 RedHat RHEL Centos Fedora "Oracle Linux" 等
  常用的安装包为 rpm 包 安装命令为 "rpm -参数"
  包管理工具 yum
  支持tar包
2 Debian系列 Debian Ubuntu 等
  常用的安装包为 deb 包 安装命令为 "dpkg -参数"
  包管理工具 apt-get
  支持tar包



Linux查看系统开机时间
who -b          # 查看最后一次系统启动的时间   系统引导 2023-07-24 08:34
who -r          # 查看当前系统运行时间         运行级别 5 2023-07-24 08:35
last reboot     # 查看Linux系统历史启动的时间
top             # up后表示系统到目前运行了多久时间。
w               # up后表示系统到目前运行了多久时间。
uptime          # 命令查看
/proc/uptime    # 查看


关机
shutdown [-krhc] [时间 [警告信息]]  # 或 /sbin/shutdown 需要 root  下面简写为 xx
  k # 不要真的关机 只发送警告信息   shutdown -k '吓唬你的' 测试无效
  r # 服务停掉重新启动  xx -r now 立刻重启  xx -r 20:35 20:35重启  xx -r 5 5分钟后重启 同 xx -r +5
  h # 服务停掉立即关机  xx -h now 立刻关机  xx -h 20:35 20:35关机  xx -h 5 5分钟后关机
  c # 取消已经在进行的 shutdown 指令        xx -c 取消指令

halt       # 系统停止，屏幕可能会保留系统已经停止的信息；实测就是只显示一句话，像卡死了一样
poweroff   # 立刻关机
reboot     # 重启 这三个指令都是调用 systemctl 管理命令  man reboot 会同时显示着三个指令

systemctl [指令]
halt       # 系统停止，屏幕显示一句话，假死的样子
poweroff   # 进入关机模式
reboot     # 直接重新启动
suspend    # 进入休眠模式



登录信息
/var/run/utmp    记录当前登陆到系统的各个用户  登录时login程序写入 注销时init擦除    who命令读取
/vat/log/wtmp    追踪各个登录和注销事件       登录时login程序写入 注销时init追加    last命令读取
使用utmp结构体



文本文件的行尾与结束符
win/DOS      CRLF  \r\n  回车+换行 回车键=回车+换行，即 ^M$(\r对应符号^M，\n对应符号$)
UNIX/linux   LF    \n    换行      Line Feed
Mac          CR    \r    回车      Carriage Return   Mac OS X换行符采用 \n
很久以前，老式的电传打字机使用两个字符来另起新行，一个字符把滑动架移回首位(回车)，另一个字符把纸上移一行(换行)。
计算机问世后，UNIX决定用\n表示行尾；Apple规定了用\r；MS-DOS则决定沿用老式的\r\n。
Unix/Mac文件在win/DOS打开，可能变成一行；win/DOS文件在Unix/Mac打开，行尾可能会多车一个 ^M。

        换行符                             文件结束符
        unix(/n)    win/dos(/r/n)         unix   win/dos
Ctrl:   ^J          ^M^J                  ^D     ^Z
Dec:    10          13+10                 04     26
Hex:    0A          0D+0A                 04     1A
Code:   LF          CR+LF

Windows平台 三种文件换行符互换
UltraEdit  文件->转换       视图->显示换行符
Notepad++  编辑->档案格式转换(Edit->EOL Conversion)  视图->显示符号->显示行尾符(View->Show Symbol->Show End of Line)
VSCode     右下角 LF CRLF

Unix/Linux平台
dos2unix  dos2unix f1
sed       sed 's/^M//' f1 > f2  ^M回车Ctrl+V+M按出来的  或 sed 's/\r//' f1 > f2
          或 sed -i 's/\r//g' f1  或 sed -i 's/\r$//g' f1
vim       vim f1   :set fileformat=unix 或 :%s/^M//g   :set list显示特殊字符  二进制模式(vim -b f1)才显示出^M
  fileformat简写为ff   set ff=unix 使用unix换行符   set ff=dos 使用dos换行符
tr        cat -v f1 | tr -d '^M'  > f2  同 cat f1 |tr -d '\015' > f2 (八进制下，^m 是 015；^Z 是 032；tab 是 011；^是136)

cat -A f1  # -A(=-vET) 查看文本所有的字符 -T以^I显示tab -E 以$显示行尾 aaa bbbb^M$
cat -v f1  # -v 使用^显示出非打印字符 除了行尾符\n和tab    aaa bbbb^M



Linux一句命令之判断大小端序
1 echo -n I | od -o | head -n1 | cut -f2 -d" " | cut -c6
输出：1为小端模式，0为大端模式；
解析：od命令的作用为将指定内容以八进制、十进制、十六进制、浮点格式或ASCII编码字符方式显示；

2 echo -n I | od -o | head -n1 | awk '{print $2}'| cut -c6
输出：1为小端模式，0为大端模式；
解析：awk命令为文本处理。

3 lscpu | grep -i byte
输出：Byte Order:            Little Endian；
解析：grep -i 为不区分大小写匹配；
注意：在低版本的Linux可能不支持lscpu命令。

4 dpkg-architecture | grep -i end
输出：
      DEB_BUILD_ARCH_ENDIAN=little
      DEB_HOST_ARCH_ENDIAN=little
      DEB_TARGET_ARCH_ENDIAN=little
解析：dpkg-architecture命令是列出dpkg打包的一些环境参数；





系统编码
/etc/default/locale                  # Ubuntu系统默认编码配置文件
  LANG="zh_CN.UTF-8"                 # -> "en_US.UTF-8" 配置英文环境
  LANGUAGE="zh_CN:zh"                # -> "en_US:en"    修改这2项 重启生效
  LC_XX                              # 也可以 填写下面的十几种LC_变量 一般不用

LANG=en_US:UTF-8                     # 临时修改系统编码 重启失效
LANGUAGE=en_US:en                    # 若这2行 写入 /etc/profile 重启则永久有效

locale                               # 查看当前系统编码设置的详细资料
  LC_CTYPE                           # 语言符号及其分类
  LC_NUMERIC                         # 数字
  LC_COLLATE                         # 比较和排序习惯
  LC_TIME                            # 时间显示格式
  LC_MONETARY                        # 货币单位
  LC_MESSAGES                        # 信息主要是提示信息,错误信息, 状态信息, 标题, 标签, 按钮和菜单等
  LC_PAPER                           # 默认纸张尺寸大小
  LC_NAME                            # 姓名书写方式
  LC_ADDRESS                         # 地址书写方式
  LC_TELEPHONE                       # 电话号码书写方式
  LC_MEASUREMENT                     # 度量衡表达方式
  LC_IDENTIFICATION                  # 对locale自身包含信息的概述。

  设定locale就是设定12大类的locale分类属性，即 12个LC_*。除了这12个变量可以设定以外，还有两个变量：LC_ALL和LANG。
  它们之间有一个优先级的关系：LC_ALL > LC_* > LANG
  LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。

  locale: Cannot set LC_XX to default locale: No such file or directory  # 没安装所设置的编码

locale -a                            # 查看当前支持的字符集
sudo locale-gen en_US.UTF-8          # 安装en_US.UTF-8编码    zh_CN.GB18030 中文字符集添加
sudo locale-gen                      # 从配置更新
/usr/share/locales/install-language-pack zh_CN.UTF-8  # 安装某个语言包 (脚本)
/var/lib/locales/supported.d/        # 一个目录 下面有 zh-hans en 等文本文件
/etc/environment                     # 有的说 LANGUAGE LANG LC_CTYLE 等变量亦可写在这里
sudo apt-get install language-pack-zh-hans  # 安装中文语言包

zh_CN.GB18030 GB18030   # 最新汉字编码字符集，向下兼容GBK,GB2312
zh_CN.GBK GBK           # 汉字扩展编码,向下兼容GB2312, 并包含BIG5全部汉字
zh_CN.GB2312 GB2312     # 简化汉字编码字符集
zh_CN.GB18031 GB18031   # 数字键盘汉字编码输入,面向手持设备
zh_HK.BIG5 BIG5         # 繁体
zh_TW.BIG5 BIG5         # 繁体




iconv    # 语系编码转换
  iconv --list     # 支持的编码
  iconv -f 原本编码 -t 新编码 filename [-o newfile]
  iconv -f utf8 -t big5 big5.txt -o big5.txt.big5    # utf8 -> big5
  iconv -f big5 -t gb2312 | iconv -f gb2312 -t utf8 -o vi.gb.utf8




man n xxx             # 指定 section
man -f xxx            # 查询命令有那些条目  再用 man n xxx 查询  相当于 whatis xxx
man -k xxx            # 模糊匹配查询  相当于 apropos xxx
man man               # 显示man的分页选项
sudo mandb            # 建立 whatis 数据库 要 root 身份 (whatis apropos需要)
/usr/share/man        # man page 存放数据的通常目录
/etc/manpath.config   # man page 数据地址的配置文件 可修改 由于版本差异还可能是 /etc/manxxx

section 说明
  1 Executable programs or shell commands              # 可执行程序或 shell 命令
  2 System calls (functions provided by the kernel)    # 系统调用(内核提供的函数)
  3 Library calls (functions within program libraries) # 库调用(程序库中的函数)
  4 Special files (usually found in /dev)              # 特殊文件(通常位于 /dev)
  5 File formats and conventions eg /etc/passwd        # 配置文件格式与惯例 如passwd
  6 Games                                              # 游戏
  7 Miscellaneous (including macro packages and conventions), e.g. man(7),groff(7)  # 杂项包括宏包和规范,如environ
  8 System administration commands (usually only for root)  # 系统管理命令 通常只针对 root 用户 如ifconfig
  9 Kernel routines [Non standard]                     # 内核例程 非标准

man page 内容几个主要部分
  NAME        # 简短的指令、数据名称说明
  SYNOPSIS    # 简短的指令下达语法(syntax)简介
  DESCRIPTION # 较为完整的说明，会提到很多相关的资料与使用时机，很多小细节 最好仔细看
  OPTIONS     # 针对 SYNOPSIS 的所有可用的选项说明
  COMMANDS    # 当这个程序(软件)在执行的时候，可用在此程序中下达的指令
  FILES       # 这个程序或数据所使用或参考或链接到的某些文件
  SEE ALSO    # 可以参考的，跟这个指令或数据有相关的其他说明
  EXAMPLE     # 一些可以参考的范例

常用按键
  Page Down   # 向下翻页  同 空格键
  Page Up     # 向上翻页
  home        # 去第一页
  end         # 去到最后一页
  /str        # 向下搜寻 str  n 下一个搜寻 N 上一个
  ?str        # 向上搜寻 str  n 下一个搜寻 N 上一个
  q           # 结束



info xxx     # linux 中提供的另一种文档 与 man 类似
info info    # info 说明
/usr/share/info  # 文件默认存放目录

快捷按键
  page down   # 向下翻页 同 空格键
  page up     # 向上翻页
  tab         # 在 node 之间移动，有 node 的地方，通常有 * 显示
  enter       # 按回车进入选中 node
  b           # 移动光标到该 info 画面中当中的第一个 node 处
  e           # 移动光标到该 info 画面当中最后一个 node
  n           # 往下一个 node
  p           # 前往上一个 node
  u           # 向上移动一层
  s(/)        # 在 info page 当中进行搜索
  h,?         # 显示求助选单
  q           # 结束




目录
文件系统
链接库

文件系统---------------------------------------------------------------------

硬盘一般分为MBR格式和GPT格式
MBR分区表中第一个扇区很重要 前446b为MBR(Master boot record) 后64b为分区表(partition table) 最多建立4个分区
  https://blog.csdn.net/zt_xcyk/article/details/53669383
GPT分区表除了分区数量扩充较多外，支持的磁盘容量也可以超过 2 TB
分区槽格式 /dev/sd[a-p][1-128]   # sd为实体磁盘 vd为虚拟磁盘

MBR硬盘上ext4文件系统分布

MBR |  sector1 | sector2 | ...                            # 多个分区 下面为某个分区建立ext4文件系统
   ↙           ↘
boot sector(启动扇区) | block group1 | block group2 | ...  # 启动扇区可以安装开机管理程序
                    ↙                ↘
superblock | block bitmap | block table | inode bitmap| inode table | data block  # 每个 block group1
  superblock   # 超级区块 记录整个 filesystem 相关信息
  inode bitmap # 使用情况位图  block bitmap类似
  inode table  # 记录文件的属性和实际数据的 block 号码   block table类似
  data block   # 格式化时大小固定，1k 2k 4k 三种，都有编号，方便 inode 的记录   每个 block 内只能放置一个文件的数据




Linux下为什么目录的大小总是4096
在Linux下一切皆文件，因此目录也是文件。目录大小并非常规意义上包含其子文件的总大小，而是单纯指的是目录的大小。
需要从Linux文件的存储机制说明。
文件储存在硬盘上，硬盘的最小存储单位叫做“ 扇区 ”(Sector)。每个扇区储存512字节(相当于0.5KB)。
操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个“块”(block)。
这种由多个扇区组成的“ 块 ”，是 文件存取的最小单位 。“块”的大小，最常见的是4KB，即连续八个 sector组成一个block。
文件数据都储存在“块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。
这种储存文件元信息的区域就叫做 inode ，中文译名为“索引节点”。
每一个文件都有对应的inode，里面包含了与该文件有关的一些信息。
而Linux系统中，目录(directory)也是一种文件。打开目录，实际上就是打开目录文件。
目录文件的结构非常简单，就是一系列目录项(dirent)的列表。每个目录项，由两部分组成：文件名，以及该文件名对应的inode。
所以ls -al命令实际显示的就是目录文件的大小。又因为OS定义的文件最小存取单位“块”(block)是4KB，所以目录一般显示为4096B。



用户user
Linux用户分为管理员和普通用户，普通用户又分为系统用户和自定义用户。/etc/passwd来查看。
1、系统管理员：即root帐户，UID为0，拥有所有系统权限，它类似于Windows系统中的administrator帐户，是整个系统的所有者。
2、系统用户：linux为满足自身系统管理所内建的账号，通常在安装过程中自动创建，不能用于登录操作系统。UID为1-499(centos7为1-999)。
  像上面的sshd、pulse等等用户即是此类用户。它类似于Windows中的system帐户，当然权限远没有system帐户高。
3、自定义用户：由root创建供用户登录系统进行操作使用的账号，UID >500(centos7 >1000)。类似于Windows系统中users用户组中的帐户。



/etc/passwd  # 用户账户信息(名称、UID、主组ID等)
/etc/shadow  # 用户密码信息  pwconv 将passwd中的密码映射到了/etc/shadow  pwunconv 取消映射 密码仍然放在/etc/passwd中
/etc/group   # 组及其属性信息
/etc/gshadow # 组密码信息  group文件里的密码映射文件  格式 组名:组密码:组管理员列表:以当前组为附加组的用户列表 逗号分隔



/etc/passwd   文件结构   man 5 passwd
wangcai:x:502:503::/home/wangcai:/bin/bash    : 分隔
1 注册名(login_name)  # 用户名 惟一 很多系统限制8字符 大小写敏感 不能使用: 最好不用. 不以- +打头
2 口令(passwd)        # 密码 目前只存放 x 或 *  使用shadow技术，把真正加密密码放到/etc/shadow中。passwd命令更改密码
3 用户标识号(UID)     # 与用户名一一对应的整数。范围0-65535。0是root。
  若几个用户uid相同，系统将它们视为同一个用户，但它们可有不同的口令、不同的主目录以及不同的登录Shell等。
4 组标识号(GID)       # 当前用户基本组。用户还可同时属于多个附加组。/etc/group中指明一个组所包含用户。
5 注释性描述(users)   # 没有实际用途 是一段任意的注释性描述文字，用做finger命令的输出。
6 用户主目录(home_directory) # 用户起始工作目录 登录到系统之后所处的目录
7 登录Shell(Shell)    # 登录后启动命令解释器或某个特定的程序，若不指定系统默认sh，即/bin/sh。/sbin/nologin该用户无法登陆。

/etc/shadow   文件结构   man 5 shadow
bin:*:17834:0:99999:7:::
1 账户名称                  # 与 /etc/passwd 中账户名称对应
2 密码                      # 经过加密的密码 若为 * 或 ! 不能通过密码登录 可通过其他方式登录
3 最近修改密码日期           # 数值为自1970-01-01以来的天数 如 16559 表示 2015/05/04
4 密码不可被修改天数         # 与3相比  该密码最近修改之后，需要经过几天后才可以修改，0 标识不限制
5 密码有效天数              # 与3相比  该密码最近修改之后，超过这个天数则该密码为过期，不可使用  99999=273年
6 密码需要变更前警告天数     # 与5相比  在到期前n天，系统警告给该账户，还有n天密码过期，请尽快修改
7 密码过期后的账户宽限时间   # 与5相比 当密码过期几天后，无法登录  0 立刻失效，-1 永远不失效
8 账户失效日期              # 该账户在此规定的日期之后，将无法再使用 无论密码是否有过期  数值为自1970-01-01以来的天数
9 保留字段

/etc/group
在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。
adm:x:4:syslog,lixiang
1 组名           # 与 3字段 对应
2 组密码         # 通常不需要设置，如果非要设置，该配置也移动到 /etc/gshadow 文件中了。
3 组标识号(GID)  # 与 /etc/passwd 4字段 对应
4 组内用户列表   # 仅显示将该组作为附加组的用户

用户的主要组(primary group)        用户必须属于一个且只有一个组
用户的附加组(supplementary group)  一个用户可以属于多个或者零个附加组
而文件一般分为 所有者 所在组 其它组

/etc/gshadow
adm:*::syslog,lixiang
1 组名
2 密码             # 开头为 ! 标识无合法密码，所以无群组管理员
3 群组管理员的账户
4 有加入该群组支持的所属账户  # 与 /etc/group 内容相同



/dev/loop 循环设备
/dev/loop(或称vnd (vnode disk)、lofi(循环文件接口))是一种伪设备，这种设备使得文件可以如同块设备一般被访问。
使用前，循环设备必须与现存文件系统上文件相关联。这种关联提供给用户一个应用程序接口，接口将允许文件视为块特殊文件使用。
  因此，如果文件中包含一个完整的文件系统，那么这个文件就能如同磁盘设备一般被挂载。(参见设备文件系统)
这种设备文件经常被用于光盘或是磁盘镜像(IOS、IMG)。通过循环挂载来挂载包含文件系统的文件，便使处在这个文件系统中的文件得以被访问。
  这些文件将出现在挂载点目录。
在Linux中，有一种特殊的块设备叫loop device,这种loop device设备是通过影射操作系统上的正常的文件而形成的虚拟块设备。
  因为这种设备的存在，就为我们提供了一种创建一个存在于其他文件中的虚拟文件系统的机制。

/dev/loopX这些设备在Linux下被称为回环设备。
losetup -a  或者 losetup        # 查看所有与文件相关联的 loop 设备
apt autoremove --purge snapd    # ubuntu 删除所有的 /dev/loopX 设备

在一个目录上挂载包含包含文件系统的文件的步骤：
  losetup   # 使用一个循环设备(/dev/loop)连接文件
  mount     # 在目录上挂载该循环设备

例1 sample.img 包含文件系统的文件，/mnt/point 为目录，将 sample.img 挂载到 /mnt/point 上
  losetup /dev/loop0 sample.img
  mount /dev/loop0 /mnt/point
  mount -o loop sample.img /mnt/point   # 同以上两条命令
卸载
  umount /mnt/point
  losetup -d /dev/loop0

例2
  dd if=/dev/zero of=FS_on_file bs=1k count=10000   # 1 使用dd命令创建文件
  losetup /dev/loop0 FS_on_file   # 2 使用losetup命令创建一个loop device
  mkfs -t ext3 /dev/loop0         # 3 创建一个文件系统 或 mkfs.ext3 /dev/loop0
  mount /dev/loop0 /mnt/FS_file0  # 4 挂载这个文件系统  /mnt/FS_file0必须存在
删除刚才创建的这些对象，依次执行
  umount /dev/loop0
  losetup -d /dev/loop0   # 断开设备
  rm FS_on_file


linux 设备 /dev
字符设备 包括 键盘 传真 虚拟终端和串口调节器 特殊字符设备(裸设备raw)
块设备   包括 硬盘 cd-rom 内存等
伪设备   包括 null zero full loop random urandom stdin stdout stderr fd upd tcp udp等

字符设备
字符设备是指每次与系统传输1个字符的设备。这些设备节点通常为传真、虚拟终端和串口调制解调器、键盘之类设备提供流通信服务，
  它通常不支持随机存取数据。 字符设备在实现时，大多不使用缓存器。系统直接从设备读取／写入每一个字符。
  例如，键盘这种设备提供的就是一个数据流，当你敲入“cnblogs”这个字符串时，
  键盘驱动程序会按照和输入完全相同的顺序返回这个由七个字符组成的数据流。它们是顺序的，先返回c，最后是s。

块设备
块设备是指与系统间用块的方式移动数据的设备。这些设备节点通常代表可寻址设备，如硬盘、CD-ROM和内存区域。
块设备通常支持随机存取和寻址，并使用缓存器。操作系统为输入输出分配了缓存以存储一块数据。当程序向设备发送读取或写入数据的请求时，
  系统把数据中的每一个字符存储在适当的缓存中。当缓存被填满时，会采取适当的操作(把数据传走)，而后系统清空缓存。
  它与字符设备不同之处就是，是否支持随机存储。字符型是流形式，逐一存储。

伪设备
在类Unix操作系统中，设备节点并不一定要对应物理设备。没有这种对应关系的设备是伪设备。操作系统运用了它们提供的多种功能。

/dev/stdin  标准输入设备 指的就是键盘设备
  cat>teststdin</dev/stdin     # cat从/dev/stdin获得数据，然后将标准输出，输入的到teststdin文件  ctrl+D 结束
  cat>teststdin                # 不指定输入，默认输入设备就是/dev/stdinn
/dev/stdout 标准输出设备，默认输出到屏幕上
  cat test.sh >/dev/stdout |grep 'echo'  # /dev/stdout指向就是标准输出，重定向给它的数据，最终发送到屏幕上(fd1)
  cat test.sh  |grep 'echo'              # 同上
/dev/stderr 标准错误输出，默认输出到屏幕上，但是它的内容不能通过管道传递给grep，管道只能传递标准输出
  cat test.sh >/dev/stderr |grep 'echo'  # 原样输出 test.sh 文件 没有过滤 因为管道传递给grep，管道只能传递标准输出
/dev/null   空设备，黑洞设备,也称为位桶(bit bucket)，任何写入该设备数据都会被丢弃掉。从这个里面读取数据返回是空。
  cat test.sh >/dev/null     # 文件内容丢失，而不会输出到标准输出。
  cat /dev/null              # 什么都没输出
  badname 2> /dev/null       # 这样错误信息 [标准错误] 就被直接丢进垃圾桶了。
  cat $xx 2> /dev/null > /dev/null  # "$xx"不存在，将不会有任何错误信息提示； "$xx"存在，文件的内容不会打印到标准输出；
  cat /dev/null > /var/log/wtmp     # 自动清空日志文件的内容
/dev/zero   任何写入该设备数据都会被丢弃掉。读它会提供无限的空字符(NULL, ASCII NUL, 0x00)。
  其中的一个典型用法是用它提供的字符流来覆盖信息，另一个常见用法是产生一个特定大小的空白文件。
  dd if=/dev/zero of=testzero count=1024 bs=1024 # 创建一个1M文件，一个块是1024字节，一共是1024块 单位也可以为K M G
  dd if=/dev/zero of=/dev/磁盘分区 # 慎用，它是用\0x00填充整个分区。这样做数据是不可恢复的。
  cat /dev/zero>testinputzero     # 慎用，无限输出\0x00，用\0x00填充文件。若没有限制该用户磁盘配额。它将耗尽整个磁盘空间。
/dev/full   常满设备 向其写入时返回设备无剩余空间(错误码为ENOSPC)，读取时则与/dev/zero相似
  常被用来测试程序在遇到磁盘无剩余空间错误时的行为。
  echo 'chengmo' >/dev/full   # -bash: echo: write error: 设备上没有空间  echo $?   # 1
/dev/random[urandom] 可以用作随机数发生器或伪随机数发生器。它允许程序访问来自设备驱动程序或其它来源的背景噪声。
  原理是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。
  熵池指当前系统的环境噪音，熵指一个系统的混乱程度，系统噪音通过很多参数来评估，如内存使用，文件使用量，不同类型进程数量等等。
  若当前环境噪音变化的不是很剧烈或当前环境噪音很小，如刚开机，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好。
  /dev/urandom和/dev/random区别，后者在不能产生新的随机数时会阻塞程序，而前者不会。后者产生大量随机数的速度要慢。
  dd if=/dev/random of=random.dat bs=1024b count=1
  dd if=/dev/urandom of=random2.dat bs=1024b count=1    # 效果好很多
/dev/fd    记录用户打开的文件描述符
/dev/tcp[udp]/host/port  读取该类形式设备，将会创建一个连接host主机port端口的tcp[upd]连接。打开一个socket通讯接口。
/dev/loop    把loop文件，作为块设备挂载使用。
  mount -o loop xx.img /img  # 将img镜像文件挂载到/img目录下面，有了这个设备，不需要通过虚拟光驱就可以读虚拟磁盘格式的文件。






终端设备
终端是一种字符型设备，有多种类型,常用tty简称。源于Teletypes，或teletypewriters，原指电传打字机，是由Teletype公司生产的,
  是通过串行线用打印机和键盘阅读和发送信息的东西，后来被键盘和显示器取代，所以现在叫终端更合适。放在目录/dev/下。

1本地终端
  用VGA连接主机和显示器，用PS/2或者USB连接主机和键盘，这样的一个显示器/键盘组合就是一个本地终端。
2用串口连接的远程终端
  通过串口线把主机接到另外一个有显示器和键盘的主机，通过运行一个终端模拟程序，来将这台主机的显示器和键盘借给串口对端的主机。
3用TCP/IP承载的远程终端
  类似Telnet，SSH这般。
前两类都在本地就直接关联了物理设备，如VGA口，PS/2口，串口之类，称物理终端;
第三类在本地则没有关联任何物理设备，不要把物理网卡当成终端关联的物理设备，它只是隧道关联的物理设备，
  这里的物理网卡完全可以换成卡车，它们与终端并不直接相关，所以这类不直接关联物理设备的终端叫做伪终端。

终端：    输入和输出设备(键盘+显示器)
物理终端：直接连接在主机上的物理设备(键盘、显示器)
串行终端：与机器的串口对应，每一个串口对应的一个串行终端，串口对应的也是物理终端
虚拟终端：Linux默认有6个虚拟终端，用(Ctrl+Alt+F1~6)切换，tty(teletypewriter)命令显示(/dev/tty1~6)，它们共用一套物理终端设备
伪终端： 虚拟终端是有限的，但网络端口和图形端窗口的数目却是无限的，这是通过伪终端来实现的，使用SSH或者Telnet远程连接Linux时，
  使用的就是伪终端，伪终端使用pts(pseudo-terminal slave)显示，tty命令执行结果为pts则是伪终端，tty则是虚拟终端
控制终端：这是一个逻辑概念，即用户正在控制的终端，可以使串行终端、虚拟终端、伪终端
控制台终端：控制台终端可以认为是一台主机对应的一套键盘和显示器，所有虚拟终端是对应的都是同一控制台终端

1.1系统控制台(/dev/console)
/dev/console是系统控制台终端，系统的错误信息什么的都输出到这里。也就是开机终端，系统启动后的信息，都会输出到这个终端上。
直接连接它的，是主机显卡连接的显示器，实际上它输出在系统总线上。
一台电脑只有一个console，也就是输出到显卡上的那个终端，所以任何方法向/dev/console写入内容，都会输出到开机终端上。
echo "Hello.I'm tty_b" > /dev/console  # 需要root权限

1.2当前控制台终端(/dev/tty)
若当前进程有控制终端(Controlling Terminal)，那么/dev/tty就是当前进程的控制终端的设备特殊文件。
对于你登录的shell，/dev/tty就是你使用的终端，设备号是(5,0)。
它并不指任何物理意义上的控制台，/dev/tty会映射到当前设备(tty命令查看它具体对应哪个实际物理控制台设备)。
输出到/dev/tty的内容只会显示在当前工作终端上(无论是登录在ttyn中还是pty中)。
在控制台界面下(即字符界面下)那么dev/tty就是映射到dev/tty1-6之间的一个(取决于你当前的控制台号)，
在图形界面(Xwindows)，/dev/tty映射到的是/dev/pts的伪终端上。/dev/tty类似于到实际所使用终端设备的一个联接。不同于符号链接。
ps –ax    # 查看进程与哪个控制终端相连
tty       # 查看它具体对应哪个实际终端设备。
who 或 w  # 查看当前账户的终端。
/dev/tty  # 类似指针，指向你当前所用的终端。 如 echo "Hello.I'm tty_a" > /dev/tty  会输出到当前屏幕

1.3虚拟控制台终端(/dev/ttyn)
/dev/ttyn是进程虚拟控制台，它们共享同一个真实的物理控制台。控制台是指直接联系到主机的显示器＋键盘/鼠标。
如果在进程里打开一个文件且该文件不是其他进程的控制台时，那该文件就是这个进程的控制台。进程printf数据会输出到这里。
ctrl+alt+Fn切换控制台，感觉存在多个屏幕，这种虚拟控制台对应tty1~n，
Linux中，显示器通常被称为控制台终端(Console)。它仿真了类型为Linux的一种终端(TERM=Linux)，有设备特殊文件与之关联：ttyn等。
登录到不同的虚拟终端上，可让系统同时有几个不同的会话期存在。
/dev/tty0特殊，代表当前虚拟控制台(不包括伪终端)。因此不管当前正在使用哪个虚拟控制台，系统信息都会发送到/dev/tty0上。
  只有系统或超级用户root可以向/dev/tty0进行写操作。tty0是系统自动打开的，但不用于用户登录。
  在Framebuffer设备没有启用的系统中，可以使用/dev/tty0访问显卡。
  向/dev/tty0写入即等同于向/dev/console写入。如 echo "Hello.I'm tty_b" > /dev/tty0

/dev/tty1~63代表本地终端，即本机键盘显示器可以操作的终端。
焦点终端，被内核记录为全局变量，这样只要有键盘输入，就会把输入的字符交给焦点终端。
  通过ctrl+alt+Fn在本地终端之间切换，每切换到一个终端，该终端就是当前的焦点终端。
  对于串口，不存在焦点终端的概念，谁连了串口就是谁
  对于伪终端，一般client都运行在GUI环境，对于Windows那是微软的事，对于Linux，则有X系统完成同样的事。
/dev/console，表示当前焦点终端，内核的一个全局变量，不管在哪里往/dev/console里写，这些东西都出现在系统当前的焦点终端上。
/dev/tty，一个叫做自己的全局变量，无论你在哪个终端下工作，当你往/dev/tty里写东西的时候，它总是会马上出现在你的眼前。

2串行端口终端(/dev/ttySn)
串行端口终端(Serial Port Terminal)是使用计算机串行端口连接的终端设备。计算机把每个串行端口都看作是一个字符设备。
  这些串行端口所对应的设备名称是/dev/tts/0(或/dev/ttyS0)、/dev/tts/1(或/dev /ttyS1)等，设备号分别 (4,0)、(4,1)等，
  分别对应于DOS系统下的COM1、COM2等。若要向一个端口发送数据，可以在命令行上把标准输出重定向到这些特殊文件名上即可。
echo test >; /dev/ttyS1     # 会把单词”test”发送到连接在ttyS1(COM2)端口的设备上。

3伪终端(/dev/pts/n 或 /dev/pty/)
pty:虚拟终端  pseudo-tty
pts/ptmx:pts(pseudo-terminal slave)是pty的实现方法，和ptmx(pseudo-terminal master)配合使用实现pty。
一台服务器有多个tty，一个tty可以对多个pty(pts)
TELNET —> TTYP3(S3: slave) —> PTYP3(M3: master) —> GETTY
伪终端(Pseudo Terminal)是终端的发展，为满足现在需求(比如网络登陆、xwindow窗口的管理)。它是成对出现的逻辑终端设备(即master和slave设备, 对master的操作会反映到slave上)。它多用于模拟终端程序，是远程登陆(telnet、ssh、xterm等)后创建的控制台设备。
历史上，有两套伪终端软件接口：
BSD接口：较简单，master为/dev/pty[p-za-e][0-9a-f] ;slave为 /dev/tty[p-za-e][0-9a-f] ，它们都是配对的出现的。例如/dev/ptyp3和/dev/ttyp3。但由于在编程时要找到一个合适的终端需要逐个尝试，所以逐渐被放弃。
Unix 98接口：使用一个/dev/ptmx作为master设备，在每次打开操作时会得到一个master设备fd，并在/dev/pts/目录下得到一个slave设备(如 /dev/pts/3和/dev/ptmx)，这样就避免了逐个尝试的麻烦。由于可能有好几千个用户登陆，所以/dev/pts/*是动态生成的，不象其他设备文件是构建系统时就已经产生的硬盘节点(如果未使用devfs、udev、mdev等) 。第一个用户登陆，设备文件为/dev/pts/0，第二个为/dev/pts/1，以此类推。它们并不与实际物理设备直接相关。现在大多数系统是通过此接口实现pty。
我们在X Window下打开的终端或使用telnet 或ssh等方式登录Linux主机，此时均通过pty设备。例如，如果某人在网上使用telnet程序连接到你的计算机上，则telnet程序就可能会打开/dev/ptmx设备获取一个fd。此时一个getty程序就应该运行在对应的/dev/pts/*上。当telnet从远端获取了一个字符时，该字符就会通过ptmx、pts/*传递给 getty程序，而getty程序就会通过pts/*、ptmx和telnet程序往网络上返回“login:”字符串信息。这样，登录程序与telnet程序就通过“伪终端”进行通信。
telnet/dev/ptmx(master)pts/*(slave)getty
如果一个程序把 pts/*看作是一个串行端口设备，则它对该端口的读/写操作会反映在该逻辑终端设备对的另一个/dev/ptmx上，而/dev/ptmx则是另一个程序用于读写操作的逻辑设备。这样，两个程序就可以通过这种逻辑设备进行互相交流，这很象是逻辑设备对之间的管道操作。对于pts/*，任何设计成使用一个串行端口设备的程序都可以使用该逻辑设备。但对于使用/dev/ptmx的程序，则需要专门设计来使用/dev/ptmx逻辑设备。
通过使用适当的软件，就可以把两个甚至多个伪终端设备连接到同一个物理串行端口上。

伪终端(Pseudo Terminal)是成对的逻辑终端设备(即master和slave设备, 对master的操作会反映到slave上)，例如/dev/ptyp3和/dev/ttyp3(或设备文件系统中分别是/dev/pty/m3和/dev/pty/s3)。它们与实际物理设备并不直接相关。如果一个程序把ttyp3看作是一个串行端口设备，则它对该端口的读/写操作会反映在该逻辑终端设备对的另一个上面(ttyp3), 而ttyp3则是另一个程序用于读写操作的逻辑设备。
这样，两个程序就可以通过这种逻辑设备进行互相交流，而其中一个使用ttyp3的程序则认为自己正在与一个串行端口进行通信。这很象是逻辑设备对之间的管道操作。 对于ttyp3(s3)，任何设计成使用一个串行端口设备的程序都可以使用该逻辑设备。但对于使用ptyp3的程序，则需要专门设计来使用ptyp3(m3)逻辑设备。 
例如，如果某人在网上使用telnet程序连接到你的计算机上，则telnet程序就可能会开始连接到设备ptyp2(m2)上(一个伪终端端口上)。此时一个getty程序就应该运行在对应的ttyp2(s2)端口上。
当telnet从远端获取了一个字符时，该字符就会通过m2、s2传递给 getty程序，而getty程序就会通过s2、m2和telnet程序往网络上返回”login:”字符串信息。这样，登录程序与telnet程序就通过“伪终端”进行通信。
通过使用适当的软件，就可以把两个甚至多个伪终端设备连接到同一个物理串行端口上。 
在使用设备文件系统(device filesystem)之前，为了得到大量的伪终端设备特殊文件，使用了比较复杂的文件名命名方式。因为只存在16个ttyp(ttyp0—ttypf)的设备文件，为了得到更多的逻辑设备对，就使用了象q、r、s等字符来代替p。例如，ttys8和ptys8就是一个伪终端设备对。不过这种命名方式目前仍然在RedHat等Linux系统中使用着。
但Linux系统上的Unix98并不使用上述方法，而使用了”pty master”方式，例如/dev/ptm3。它的对应端则会被自动地创建成/dev/pts/3。这样就可以在需要时提供一个pty伪终端。目录 /dev/pts是一个类型为devpts的文件系统，并且可以在被加载文件系统列表中看到。虽然“文件”/dev/pts/3看上去是设备文件系统中的一项，但其实它完全是一种不同的文件系统。
即: TELNET —> TTYP3(S3: slave) —> PTYP3(M3: master) —> GETTY
实验：
1、在X下打开一个或N个终端窗口
2、#ls /dev/pt*
3、关闭这个X下的终端窗口，再次运行；比较两次输出信息就明白了。
在RHEL4环境下: 输出为/dev/ptmx /dev/pts/1存在一(master)对多(slave)的情况

关系
                        串行端口                                                          物理串口
                      | /dev/ttySn     ----------------------------------------------> | serial port
  |-----------------> | /dev/ttySACn   ----------------------------------------------> | serial port
  |              |--> | /dev/ttyOn     ----------------------------------------------> | serial port
  |              |
  |              |                                        实际的物理控制器                 虚拟控制器
/dev/tty         |    |              |-->/dev/tty1 ----------> │ │-------------------> | ALT-F1
  |              |    |              |-->/dev/tty2 ----------> │ │-------------------> | ALT-F2
  | /dev/console -- > | /dev/tty0--> |-->/dev/tty3 ----------> │X│-------------------> | ALT-F3
  |                   |              |-->/dev/tty4 ----------> │ │-------------------> | ALT-F4
  |                   |              |-->/dev/ttyn ----------> │ │-------------------> | GUI
  |                   —————————————————————————————————————————                           |
  |                             ↑
  |                             |                                                         |
  |--------------指向当前终端----------------------|                                       |
                                                  |                                       |
                          pty伪终端               |                                       |
                    |                    devpts   ↓            X界面下的shell终端          |
net -->| telnet --> |                  | -> /dev/pts/0 | --> |                   |        ↓
       | ssh    --> |-> /dev/ptmx <--> | -> /dev/pts/1 | --> |         X         | ----> 显示器
                    |                  | -> /dev/pts/2 | --> |                   |
                    |                  | -> /dev/pts/n | --> getty

历史上，console指主机本身的屏幕键盘，而tty指用电缆链接的其它位置的控制台(仅包含屏幕和键盘)
#include <fcntl.h> 
#include <unistd.h> 
int main() 
{ 
  int fd; 
  fd = open( "/dev/tty2 ", O_WRONLY | O_NOCTTY); 
  write(fd, "hello tty2\n ", 10); 
  return 0; 
}


某个tty卡住
ctrl + alt + Fn进入另一个 tty
tty登录卡住 ps -t tty(1~6) 一般只有agetty 这个进程 杀掉即可
sudo kill -9 pid

Ubuntu桌面卡死
按Ctrl+Alt+Fn可以进入tty终端
ps -t tty(1~6)查看进程，Xorg往往就是在tty2，记住Xorg的PID，使用kill PID 杀死进程即可
或者 sudo pkill Xorg  或者  sudo restart lightdm  #执行命令注销桌面重新登录

Ubuntu安全重启
1. 同时按住 Ctrl 和 Alt 键，按住不要放
2. 按一下 SysRq 键(有的键盘是PrtSc)
3. 按一下 R 键
4. 按一下 E 键
5. 依次按下 I , S , U , B 键
这些步骤做完后，系统就会安全重启





链接库------------------------------------------------------------------------------

程序的链接主要有以下三种：
静态链接        # 在程序运行之前先将各个目标模块以及所需要的库函数链接成一个完整的可执行程序，之后不再拆开。
装入时动态链接   # 源程序编译后所得到的一组目标模块，在装入内存时，边装入边链接。
运行时动态链接   # 原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接。
当动态库中的函数发生变化对于可执行程序来说时透明的，可执行程序无需重新编译，方便程序的发布/维护/更新。

链接过程中同一个库(名称相同)的静态和动态两种链接库，系统优先选择动态链接库

静态链接
编译后三个目标模块A、B、C,长度分别为 L、M、N。A中，有一条语句CALL B，用于调用模块B。B中，有一条语句CALL C, 用于调用模块C。
  B和C都属于外部调用符号，在将这几个目标模块链接装配成一个装入模块时，需要解决以下两个问题：
1 对相对地址进行修改
通常由编译程序产生的所有目标模块，其起始地址都为0，每个模块中的地址都是相对于0的。在链接成一个装入程序后，
  模块B和C的起始地址不再是0，而是L和L+M，此时需修改B和C中的相对地址，即模块B中的所有相对地址加上L，模块C中的相对地址都加上L+M。
2 变换外部调用符号
即将每个模块中所用的外部调用符号，都变换为相对地址，如把B的起始地址变换为L；C的起始地址变换为L+M。
  这种先进行链接所形成的一个完整的装入模块，又称为可执行文件。通常都不要拆开它，要运行时可直接将它装入内存。
  这种事先进行链接，以后不再拆开的链接方式，称为静态链接方式。

装入时动态链接(Load-Time Dynamic Linking)
用户源程序经编译后所得到的目标模块,是在装入内存时,边装入边链接的.即在装入一个目标模块时,若发生一个外部模块调用,
  将引起装入程序去找出相应的外部目标模块,并将它装入内存,还要修改目标模块中的相对地址。装入时动态链接方式有以下优点：
1 便与软件版本的修改和更新
在采用装入时动态链接方式时，要修改或更新各个目标模块，是件非常容易的事，但对于经静态链接以装配在一起的装入模块，
  如果要修改或更新其中的某个目标模块时，则要求重新打开装入模块，这不仅是低效的，而且有时是不可能的。
2 便于实现目标模块共享
若采用装入时动态链接方式，OS能够将一个目标模块链接到几个应用模块，即实现多个应用程序对该模块的共享；
  然而，采用静态链接方式时每个应用模块都必须含有该目标模块的拷贝，否则无法实现共享。

运行时动态链接(Run –Time Dynamic Linking)
动态装入方式，可将一个装入模块装入到内存的任何地方，但装入模块的结构是静态的，它主要表现在两个方面：一是在进程的整个执行期间，
  装入模块不改变；二是每次运行时的装入模块都是相同的。实际每次运行的模块可能是不相同的，但由于事先无法知道本次要运行哪些模块，
  故只能是将所有可能要运行到的模块，在装入时全部链接在一起。显然这是低效的，因为会有某些目标模块根本就不运行。
  比较典型的例子是错误处理模块，如果程序在整个运行过程中，都不出现错误，便不会用到该模块。
能有效的改变这种情况的链接方式是运行时动态链接方式。这种链接方式，可将某些目标模块的链接，推迟到执行时才进行。
  即在执行过程中，若发现一个被调用模块尚未装入内存时，由OS去找到该模块，将它装入内存，并把它连接到调用者模块上。


LD_PRELOAD > LD_LIBRARY_PATH > /etc/ld.so.cache > /lib > /usr/lib   # ld-linux.so加载动态链接库的顺序
export    LD_PRELOAD=yyy/libxxxx.so  # 写入环境变量，然后执行ldd命令来了解可执行程序所依赖的动态链接库
export -n LD_PRELOAD=yyy/libxxxx.so  # 删除环境变量 注意 此命令 只是删除取导出属性 由环境变量变为局部变量
ldconfig    # 重建 /etc/ld.so.cache 缓存 搜索/etc/ld.so.conf文件或/etc/ld.so.conf.d/目录下的文件
/sbin/ldconfig -v                    # 列出详细信息
ldd                                  # 查看依赖库
nm                                   # 查看库符号 符号有很多，常见的有三种
  1 用U表示 在库中被调用，但并没有在库中定义(表明需要其他库支持)
  2 用T表示 在库中定义的函数，这是最常见的
  3 用W表示 虽然在库中定义，但可能被其他库中的同名符号覆盖，所谓的“弱态”符号
man 8 ld-linux                       # ld 连接程序文档

动态库的路径问题 为了让执行程序顺利找到动态库，常用三种方法：
1 把库拷贝到/usr/lib和/lib目录下。
2 在LD_LIBRARY_PATH环境变量中加上库所在路径。 如 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/ting/lib
3 修改/etc/ld.so.conf文件，把库所在的路径加到文件末尾，并执行ldconfig刷新。这样，加入的目录下的所有库文件都可见。


LD_PRELOAD
Linux动态链接器会先读取LD_PRELOAD环境变量和默认配置文件/etc/ld.so.preload，并将读取到的动态链接库文件进行预加载。
  即使程序不依赖这些动态链接库，其指定的动态链接库依然会被加载，因为它的优先级最高，所以能够提前于用户调用的动态库载入。
这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。
在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），
  它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。
  通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。

LD_PRELOAD运用总结
1 定义与目标函数完全一样的函数，包括名称、变量及类型、返回值及类型等
2 将包含替换函数的源码编译为动态链接库 xx.so
3 通过命令 export LD_PRELOAD="pathx/xx.so"，设置要优先替换动态链接库
  如果找不替换库，可以通过 export LD_LIBRARY_PATH=库文件所在目录路径
  LD_LIBRARY_PATH 是一个由若干个路径组成的环境变量，设置系统查找库的目录 每个路径之间由冒号隔开。默认情况下为空
4 替换结束，要还原函数调用关系，用命令unset LD_PRELOAD 解除
5 ldd 程序 查询依赖关系

LD_DEBUG
该环境变量打开动态链接器的调试功能，当设置该变量时，动态链接器会在运行时打印出有用的信息，对于开发和调试共享库很有帮助。
files     # 显示整个装载过程     如 LD_DEBUG=files ./envTest
libs      # 显示共享库查找过程   如 LD_DEBUG=libs ./envTest
symbols   # 显示符号的查找过程   如 LD_DEBUG=symbols ./envTest
bindings  # 显示动态链接的符号绑定过程
versions  # 显示符号的版本依赖关系
reloc     # 显示重定位信息



ldconfig  # /sbin/下 通常在系统启动时运行，安装了一个新的动态链接库时，需要手工运行这个命令。
/lib和/usr/lib    # 1 默认搜寻目录
/etc/ld.so.conf   # 2 动态库配置文件
/etc/ld.so.cache  # 3 默认缓存文件 保存已排好序的动态链接库名字列表
搜索1和2指定目录的lib*.so*，然后更新3   # ldconfig 执行
搜索3，然后是2指定目录                  # ld.so 查找过程
  -v 显示正在扫描的目录及搜索到的动态链接库以及所创建的连接的名字
  -n 仅扫描命令行指定的目录，不扫描默认目录，也不扫描配置文件所列的目录
  -N 不重建缓存文件
  -X 不更新文件的连接
  -f  CONF 指定动态链接库的配置文件为CONF，系统默认为/etc/ld.so.conf
  -C  CACHE 指定生成的缓存文件为CACHE，系统默认的是/etc/ld.so.cache
  -r  ROOT 改变应用程序的根目录为ROOT
  -l 进入专家模式手工设置连接
  -p 打印出当前缓存文件所保存的所有共享库的名字
  -c FORMAT 指定缓存文件所使用的格式
  注意:以下4种方法 择一即可 最后调用ldconfig 其实就是系统刷新下so文件
  1 sudo ldconfig -v  # 在/lib和/usr/lib里面添加库文件，需要执行,否则无法找到库文件。
  2 echo "/usr/local/mysql/lib" >> /etc/ld.so.conf # 上述两个目录之外的路径添加库文件
  3 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/mysql/lib  # 使用环境变量
  4 touch opencv.conf;echo "/user/local/lib" > opencv.conf;sudo ldconfig   # 在/etc/ld.so.conf.d/目录下创建.conf文件来添加库路径



gcc  tiger.c /usr/lib/libm.a  -o tiger # 同 gcc  tiger.c -lm –o tiger

静态库
静态库是.o文件的一个集合，通常静态库以”.a”为后缀。静态库由程序ar生成
gcc -o tiger.o -c tiger.c  # 生成目标文件 tiger.o
ar rcs libadd.a tiger.o    # 生成静态库 libadd.a
在使用-l选项时，-o选项的目的名要在-l链接的库名之前，否则gcc会认为-l是生成的目标而出错
gcc 默认链接动态库，动态库不存在时，才链接静态库；指定静态库需要 -static
-L/xx/public (-L 后面没有空格)，-labc表示连接指定/xx/public下 libabc.so/libabc.a
静态库链接时搜索路径顺序
gcc参数-L > gcc的环境变量LIBRARY_PATH > 内定目录/lib /usr/lib /usr/local/lib

动态库
在程序执行期间需要调共享库时才加载到内存，可被多个程序共享使用；每个共享库都有三个文件名：real name、soname 和 linker name。
liba.so.57.24.102                  # real name  真正的库文件，包含库文件的完整版本号
liba.so.57 -> liba.so.57.24.102    # soname 符号链接的名字，只包含共享库的主版本号(主版本号相同，函数的接口是一致的)；
  因此应用程序的.dynamic段只记录共享库的soname，只要soname一致，这个共享库就可以用。
liba.so -> liba.so.57.24.102       # linker name 在编译链接时使用，gcc 的-L选项应该指定linker name所在目录

gcc -shared -fPIC a.c -o liba.so   # 创建动态库
gcc -c -fPIC a.cpp -o a.o    gcc -shared -fPIC a.o -o liba.so # 同上

/lib, /usr/lib/, /usr/local/lib    # 默认的动态库搜索路径
-L               #  指定连接时动态库的路径
LD_LIBRARY_PATH  # 动态库搜索路径
xxxxx undefined  # 连接时找不到某一个函数，即连接时找不到相应的动态库
gcc ... -Wl,-rpath  # 编译时指定动态库搜索路径   设置 ELF可执行文件中动态段中DT_RPATH指定的路径。
error while loading shared libraries  # 加载时找不到相应的动态库
/etc/ld.so.cache # 缓存的动态库路径 由 /etc/ld.so.conf 配置 -> ldconfig



静态库
gcc -c apuelib.c                                   # 用-c生成.o文件(用.o文件来生成库文件 包含静态库和动态库)
ar rcsv libapuelib.a apuelib.o                     # 库名要以lib开头 通过.o文件生成静态库文件
gcc -static –o myls myls.c -I ../ -L ../ -lapuelib # 通过生成的静态库文件进行对测试程序的导入并运行
  1 gcc 后必须先是-o，后接生成的文件名，而不能是.c文件
  2 -L表示库文件的路径
  3 使用库文件名时，将前面的lib简写为-l，后缀.a去掉。
  4 -I表示头文件的位置
  5 -static可以省略。

动态库
gcc -fPIC -Wall -c apuelib.c                # 生成.o文件
gcc -shared -o libapue.so apuelib.o         # 生成库
gcc -o myls myls.c -I ../ -L ../ -lapuelib  # 使用动态库


LD_LIBRARY_PATH  # 环境变量 指定运行时依赖库目录
-rpath-link      # gcc 选项 指定链接时依赖库目录 运行时无效
-rpath           # gcc 选项 指定链接时依赖库目录 运行时有效 目录信息写入 ELF 文件
-L               # gcc 选项 指定链接时依赖库目录 仅对gcc命令中显示指定的库

举例：
#include <stdio.h> void world(void) { printf("world.\n"); }    # world.c
#include <stdio.h> void world(void); void hello(void) { printf("hello\n"); world(); }    # hello.c
void main(void) { hello(); }                                   # test.c

gcc -c hello.c world.c                            # 生成动态库
gcc -shared -o libhello.so hello.o
gcc -shared -o libworld.so world.o

ldd libhello.so                                   # 虽然libhello.so中调用了libworld.so的函数 但是ldd中并没有体现出这种关系
gcc -shared -o libworld.so world.o -lhello -L .   # 显示在生成libhello.so时要链接到libworld.so
ldd libhello.so                                   # 此时在ldd中能够体现出这种关系 即有 libworld.so => not found

gcc test.c -lhello -L .                           # 编译出错 -L指定的路径找到了libhello.so 但libhello.so依赖libworld.so。
                                                    虽然它们都在同一目录下，但依然没办法自动找到libworld.so。
gcc test.c -lhello -lworld -L .                   # 没有报错，成功生成a.out
./a.out                                           # 运行出错 libhello.so => not found
export LD_LIBRARY_PATH=/home/liyihai/documents    # 再运行 ./a.out  OK
ldd ./a.out   # libhello.so已经通过LD_LIBRARY_PATH找到，并且libworld.so也出现在a.out的依赖中
结论：-L指定的是链接时的库路径，生成的可执行文件在运行时库的路径由LD_LIBRARY_PATH环境变量指定。

export LD_LIBRARY_PATH=                           # 清空LD_LIBRARY_PATH环境变量
gcc test.c -lhello -L . -Wl,-rpath .
./a.out                                           # 运行正常
ldd ./a.out                                       # libhello.so => ./libhello.so   libworld.so => ./libworld.so
  说明库的路径已经被编译进a.out中了。注意，libhello.so和libworld.so的路径都是通过-rpath指定的路径找到的

mdir lib_tmp                                      # 创建lib_tmp目录，将libhello.so和libworld.so移入
mv libhello.so lib_tmp/
mv libworld.so lib_tmp/

./a.out                                           # libhello.so => not found 且libworld.so没有出现在其中
  究其原因，要先找到libhello.so再去找libworld.so，因为是libhello.so依赖于libworld.so，而不是a.out依赖于libworld.so。
  可见，使用了-rpath参数指定库的路径后，生成的可执行文件的依赖库路径并非就固定不变了。
  而是执行时先从-rpath指定的路径去找依赖库，如果找不到，还是会报not fund。

export LD_LIBRARY_PATH=./lib_tmp
./a.out                # OK
ldd a.out              # libhello.so => ./lib_tmp/libhello.so    libworld.so => ./lib_tmp/libworld.so
  可见LD_LIBRARY_PATH还是起作用的,和使用-rpath指定路径的效果是一样的。

export LD_LIBRARY_PATH=                 # 清空LD_LIBRARY_PATH环境变量
mv lib_tmp/libworld.so /.               # libworld.so 放入当前目录 libhello.so依然在lib_tmp中

ldd a.out                               # libhello.so => not found   找不到libhello.so

export LD_LIBRARY_PATH=./lib_tmp/
ldd a.out              # libhello.so => ./lib_tmp/libhello.so   libworld.so => ./libworld.so  恢复正常
  此时，libhello.so是通过LD_LIBRARY_PATH找到的，而libworld.so则是通过-rpath指定的路径找到的。
  综上 LD_LIBRARY_PATH不仅指定可执行文件的库路径，还指定了库所依赖于其它库的路径。
  并非指定-rpath参数后，就抛弃LD_LIBRARY_PATH环境变量，只是多了个可选的依赖库路径而已。

export LD_LIBRARY_PATH=                 # 清空LD_LIBRARY_PATH环境变量
将libworld.so移入lib_tmp中，而libhello.so则留在 ./ 中
gcc test.c -lhello  -L . -Wl,-rpath-link ./lib_tmp  # 编译正常
ldd a.out                               # libhello.so => not found

export LD_LIBRARY_PATH=.
ldd a.out                               # libhello.so => ./libhello.so    libworld.so => not found
  可见，libhello.so已经通过LD_LIBRARY_PATH找到，但是libworld.so由于没有在LD_LIBRARY_PATH指定的路径中，
  而且编译时a.out又没有包含库的路径，因此找不到。

结论
-rpath和-rpath-link都可以在链接时指定库的路径；
但是运行可执行文件时，-rpath-link指定的路径就不再有效(链接器没有将库的路径包含进可执行文件中)，
而-rpath指定的路径还有效(因为链接器已经将库的路径包含在可执行文件中了。)
不管使用了-rpath还是-rpath-link，LD_LIBRARY_PATH还是有效的。



Linux下显式调用动态库
dlfcn.h              # 头文件
1 void* dlopen( const char * pathname, int mode )
  以指定模式打开指定的动态连接库文件，并返回一个句柄给调用进程,失败的话返回NULL。
  pathname  # 指定库的路径和名字。
  mode      # 打开模式。
    a.解析方式：
      RTLD_LAZY     # 暂缓决定，等有需要时再解出符号。
      RTLD_NOW      # 立即决定，返回前解除所有为决定的符号。
    b.作用范围，可与解析方式通过"|"组合使用
      RTLD_LOCAL    # 动态库中定义的符号不能被其后打开的其他库重定位，缺省为此。
      RTLD_GLOBAL   # 动态库中定义的符号可被其后打开的其他库重定位。
2 void* dlsym(void* handle,const char* symbol)
  根据动态链接库操作句柄(pHandle)与符号(symbol)，返回符号对应的地址。这个函数不但可以获取函数地址，也可以获取变量地址。
  handle是由dlopen打开动态链接库后返回的指针，symbol就是要求获取的函数名称，返回值是void*，指向函数的地址，供调用使用。
3 int dlclose(void *handle)
  关闭指定句柄的动态链接库，只有当此动态链接库的使用计数为0时,才会真正被系统卸载。
4 const char *dlerror(void)
  当动态链接库操作函数执行失败时，dlerror可以返回出错信息，返回值为NULL时表示操作函数执行成功。
  例子
  void *libc;
  void (*printf_call)();
  if(libc = dlopen("/usr/lib/libmyc.so",RTLD_LAZY))
  {
      print_call = dlsym(libc, "printf");
      (*print_call)("hello, world/n");
      dlclose(libc);
  }




getrusage的用法
https://blog.csdn.net/imred/article/details/50643022
sys/time.h(为了得到timeval结构体的声明，这个结构体实际上在bits/time.h中声明)，sys/resource.h
int getrusage(int who, struct rusage *usage);
描述
getrusage()返回who的系统资源用量，who可以取以下值：
RUSAGE_SELF：返回调用该函数进程的资源用量统计，会返回该进程下所有线程的资源用量之和。
RUSAGE_CHILDREN：返回调用该函数进程所有已终止且被回收子进程的资源用量统计。如果进程有孙子进程或更远的后代进程，且这些后代进程和这些后代进程与调用进程之间的中间进程也已终止且被回收，那么这些后代进程的资源用量也会被统计。
RUSAGE_THREAD(Linux 2.6.26起支持)：返回调用该函数线程的资源用量统计。
资源用量以以下结构体的形式返回到usage指针指向的空间：

struct rusage {
    struct timeval ru_utime; /* user CPU time used */
    struct timeval ru_stime; /* system CPU time used */
    long   ru_maxrss;        /* maximum resident set size */
    long   ru_ixrss;         /* integral shared memory size */
    long   ru_idrss;         /* integral unshared data size */
    long   ru_isrss;         /* integral unshared stack size */
    long   ru_minflt;        /* page reclaims (soft page faults) */
    long   ru_majflt;        /* page faults (hard page faults) */
    long   ru_nswap;         /* swaps */
    long   ru_inblock;       /* block input operations */
    long   ru_oublock;       /* block output operations */
    long   ru_msgsnd;        /* IPC messages sent */
    long   ru_msgrcv;        /* IPC messages received */
    long   ru_nsignals;      /* signals received */
    long   ru_nvcsw;         /* voluntary context switches */
    long   ru_nivcsw;        /* involuntary context switches */
};
有些字段并不被Linxu支持，但是为了兼容其他系统以及未来可能支持，这些字段仍被保留了下来，这些字段在函数执行后会被内核设为0。各个字段的解释如下：
ru_utime：返回进程在用户模式下的执行时间，以timeval结构的形式返回(该结构体在bits/timeval中声明)。
ru_stime：返回进程在内核模式下的执行时间，以timeval结构的形式返回(该结构体在bits/timeval中声明)。
ru_maxrss(Linux 2.6.32起支持)：返回最大驻留集的大小，单位为kb。当who被指定为RUSAGE_CHILDREN时，返回各子进程最大驻留集的大小中最大的一个，而不是进程树中最大的最大驻留集。
ru_ixrss：目前不支持
ru_idrss：目前不支持
ru_isrss：目前不支持
ru_minflt：缺页中断的次数，且处理这些中断不需要进行I/O；不需要进行I/O操作的原因是系统使用“reclaiming”的方式在物理内存中得到了之前被淘汰但是未被修改的页框。(第一次访问bss段时也会产生这种类型的缺页中断)
ru_majflt：缺页中断的次数，且处理这些中断需要进行I/O。
ru_nswap：目前不支持
ru_inblock(Linux 2.6.22起支持)：文件系统需要进行输入操作的次数。
ru_oublock(Linux 2.6.22起支持)：文件系统需要进行输出操作的次数。
ru_msgsnd：目前不支持
ru_msgrcv：目前不支持
ru_nsignals：目前不支持
ru_nvcsw(Linux 2.6起支持)：因进程自愿放弃处理器时间片而导致的上下文切换的次数(通常是为了等待请求的资源)。
ru_nivcsw(Linux 2.6起支持)：因进程时间片使用完毕或被高优先级进程抢断导致的上下文切换的次数。

返回值
执行成功返回0，发生错误返回-1，同时设置errno的值。

错误
EFAULT：usage指针指向不可访问地址。
EINVAL：who被指定为无效值。



