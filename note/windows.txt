

https://www.zhihu.com/question/63946754/answer/3371597011  # 检测内存泄露 VLD

win11 poweshell
C:\Windows\System32\WindowsPowerShell\v1.0    #目录下
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe       #不带工具栏
C:\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe   #带工具栏

wmic csproduct get name    #查看主机型号
wmic bios get serialnumber #查看主机序列号

显式调用动态库
1 LoadLibrary         加载dll 并获取模块句柄
2 GetProcAddress      获取指定的函数指针
3 FreeLibrary         使用完 释放dll句柄



SetUnhandledExceptionFilter()  函数让程序优雅崩溃


临界区 类似于加锁
CRITICAL_SECTION cs;
InitializeCriticalSection(&cs);    // 初始化
EnterCriticalSection(&cs);         // 进入
LeaveCriticalSection(&cs);         // 离开


线程
HANDLE handle[2];
handle[0] = ( HANDLE )_beginthreadex(NULL , 0, ThreadFun, ( void *)&参数, 0, NULL );
handle[1] = ( HANDLE )_beginthreadex(NULL , 0, ThreadFun, ( void *)&参数, 0, NULL );
WaitForMultipleObjects(2, handle, TRUE , INFINITE );


_beginthread/endthread和_beginthreadex/endthreadex创建/结束线程的区别
1 _beginthreadex更像CreateThread._beginthreadex比_beginthread多了3个参数
2 _beginthreadex的线程函数必须使用stdcall调用方式，且必须返回一个unsigned int的退出码
3 _beginthreadex创建线程失败时返回0，_beginthread失败返回-1
4 _beginthreadex/endthreadex创建/结束线程后，系统不自动释放线程句柄，需手动关闭；_beginthread/endthread系统自动关闭句柄
0 它们内部都调用CreateThread，不过内部所做的工作有所区别；

CreateThread()与_beginthread()两种线程方法的区别
CreateThread()/ExitThread()  Windows API
_beginthread()/_endthread()  MSVC CRT函数 源代码中的thread.c 是对API的包装 最终还是调用API 只是用额外的工作
1  调用CreateThread前申请一个_tiddata结构(mtdll.h定义)，_initptd()初始化之，并传递给_beginthread自己的线程函数_threadstart。
2  _threadstart把_tiddata结构指针保存到线程的显式TLS数组，然后它调用用户的线程入口真正开始线程。
3  用户线程结束后，_threadstart调用_endthread结束线程。用__try/__except包用户线程函数，捕获未处理的信号，交给CRT处理。
4  _tiddata保存线程ID、线程句柄、erron、strtok()的前一次调用位置、rand()函数的种子、异常处理等与CRT有关的而且是线程私有的信息。
5  CreateThread创建线程后调用CRT的strtok()函数，按理说应该会出错，因为strtok()所需要的_tiddata并不存在；
6  实际上strtok调用_getptd()时，若发现线程没有_tiddata，它就会申请这个结构并且负责初始化。
7  _tiddata释放位置？ExitThread不会，因为根本不知道；显然_endthread释放，这也正是CRT的做法。
8  CreateThread/ExitThread，也不会内存泄露，why？原来密码在CRT DLL的入口函数DllMain中。
9  当一个进程/线程开始/退出时，每个DLL的DllMain都会被调用一次，于是动态链接版的CRT就有机会在DllMain中释放线程的_tiddata。
10 静态链接CRT呢？这是造成使用CreateThread会导致内存泄露的一种情况，这种情况下，_tiddata在线程结束时无法释放，造成了泄露。
11 动态链接的CRT (/MD，/MDd)没问题，静态链接CRT (/MT，/MTd)，进程管理器中观察会发现内存用量不停地上升。
12 ExitThread改成_endthread就不会有上面问题，因为_endthread会将_tiddata释放。
13 总结：使用CRT时，请尽量使用_beginthread()/_beginthreadex()/_endthread()/_endthreadex()这组函数来创建线程。
14 MFC中，有一组类似的函数AfxBeginThread/AfxEndThread，同理，是MFC层面的线程包装函数，它们会维护线程与MFC相关的结构，
  当我们使用MFC类库时，尽量使用它提供的线程包装函数以保证程序运行正确。


创建线程后马上CloseHandle(threadhandle)起什么作用
HANDLE threadhandle = CreateThread(NULL, 0, RecvThreadProc, NULL, NULL, NULL);
CloseHandle(threadhandle);
创建线程后返回了线程句柄，新创建的线程内核对象的使用计数是2，一个是线程本身，一个是创建线程的线程，创建线程的线程closehandle后，
 新的线程的内核对象使用计数为1，当这个新线程结束运行后内核对象的使用计数还要减1，这时内核对象的使用计数是0，
 则系统会自动删除新线程的内核对象，这是正常的处理流程。
若不显示的调用closehandle，则新线程结束运行后，由于内核对象使用计数为1，所以不会删除内核对象，会造成内存泄露，
 不过当整个进程结束时操作系统会自动关闭该进程的所有的内核对象包括这个新线程的内核对象，所以你不调用closehandle问题不大，
 只是在你的进程运行的时候会造成内存泄露，进程结束后系统是会自动清理的。


Createthread和Closehandle
1 在程序中建立线程的概念，进程建立后，系统会为进程自动分配一个主线程。
  拿Main函数而言，当Main函数执行完后，此时主线程就退出了，主线程退出也同时意味着进程结束。
2 线程、内核对象、内核对象引用计数，创建线程成功，返回一个新的线程句柄。
=================================================================================
CreateThread后那个线程的引用计数不是1，而是2。
线程创建时，系统设置线程内核对象的引用计数为1，在Create函数返回前，将会打开线程句柄，所以线程的内核对象引用计数+1
  creating a new process causes the system to create a process kernel object
  and a thread kernel object. At creation time, the system gives each object
  an initial usage count of 1. Then, just before CreateProcess returns, the
  function opens the process object and the thread object and places the
  process-relative handles for each in the hProcess and hThread members of
  the PROCESS_INFORMATION structure. When CreateProcess opens these objects
  internally, the usage count for each becomes 2.     ---摘自《Windows核心编程》
================================================================================
3 CloseHandle
  1 CloseHandel(ThreadHandle )
  只是关闭了一个线程句柄对象，并没有结束线程，线程本身还在继续运行。CreateThread后要对这个线程做一些操作，如改变优先级，
   被其他线程等待，强制TermateThread等，就要保存这个句柄，使用完了再CloseHandle()。
  2 为什么要CreateThread()和CloseHandle()紧挨配套使用
  一，所有的内核对象(包括线程Handle)都是系统资源，用了要还，就是说用完后一定要CloseHandle关闭，否则系统的句柄资源很快就用光了。
  二，由于CreateThread后线程内核对象的引用计数是2，CloseHandle -1，内核对象引用计数仍不为0，不会被释放，所以线程仍运行，
   直到线程函数执行完毕后，引用计数再-1，线程结束




int printf (const char * szFormat, ...)
int sprintf (char * szBuffer, const char * szFormat, ...) 返回该字符串的长度  vs2015提示该函数可能不安全，建议使用sprintf_s
_snprintf # Microsoft 专用解决定义的字符串缓冲区必须足够大以存放结果，此函数引进了另一个参数，表示以字节计算的缓冲区大小。
_snprintf函数vs2015也提示该函数可能不安全，建议使用_snprintf_s函数
int vsprintf(char *string, char *format, va_list param); # sprintf 的一个变形 用于执行有不定数量参数的函数
  第三个参数是指向格式化参数队列的指针。实际上，该指针指向在堆栈中供函数调用的变量。
  va_list、va_start和va_end宏(在STDARG.H中定义)帮助我们处理堆栈指针。va_start宏将pArg设置为指向一个堆栈变量，该变量位址在堆栈参数szFormat的上面。
vsprintf 函数vs2015也提示该函数可能不安全，我们使用vsprintf_s函数
int _vscprintf(const char *format,va_list argptr);  返回格式化列表字符字节数
vsnprintf
_vsnprintf_s，





BOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved){ //windows 加载dll时 启动函数
  switch (ul_reason_for_call)  {
  case DLL_PROCESS_ATTACH:    _beginthread(IPMGM_InitData,0,NULL);    break;
  case DLL_THREAD_ATTACH:
  case DLL_THREAD_DETACH:
  case DLL_PROCESS_DETACH:
    break;  }
  return TRUE;
}
hModule参数：指向DLL本身的实例句柄；
lpReserved参数：为0表示隐式载入，1表示显式载入
ul_reason_for_call参数：指明了DLL被调用的原因，可以有以下4个取值：
DLL_PROCESS_ATTACH：
当DLL被进程 第一次 调用时，导致DllMain函数被调用，同时ul_reason_for_call的值为DLL_PROCESS_ATTACH，如果同一个进程后来再次调用此DLL时，操作系统只会增加DLL的使用次数，不会再用DLL_PROCESS_ATTACH调用DLL的DllMain函数
DLL_PROCESS_DETACH：
当DLL被从进程的地址空间解除映射时，系统调用了它的DllMain，传递的ul_reason_for_call值是DLL_PROCESS_DETACH。
DLL_THREAD_ATTACH：
当进程创建一线程时，系统查看当前映射到进程地址空间中的所有DLL文件映像，并用值DLL_THREAD_ATTACH调用DLL的DllMain函数。新创建的线程负责执行这次的DLL的DllMain函数，只有当所有的DLL都处理完这一通知后，系统才允许线程开始执行它的线程函数
DLL_THREAD_DETACH：
如果线程调用了ExitThread来结束线程(线程函数返回时，系统也会自动调用ExitThread)，系统查看当前映射到进程空间中的所有DLL文件映像，并用DLL_THREAD_DETACH来调用DllMain函数，通知所有的DLL去执行线程级的清理工作。

转发函数方法
#pragma comment(linker, "/EXPORT:[查找的函数名]=[函数实现所在的DLL模块].[实际导出的函数名],@序号")

dll劫持例子:
quazip2.dll中有方法??0QuaAdler32@@QEAA@AEBV0@@Z
新写一个dll 叫quazip2.dll 劫持quazip.dll的方法

//quazip2.dll 代码
#include<Windows.h>

#pragma comment(linker,"/EXPORT:??0QuaAdler32@@QEAA@AEBV0@@Z=quazip2.??0QuaAdler32@@QEAA@AEBV0@@Z,@1")
#pragma comment(linker,"/EXPORT:??0QuaAdler32@@QEAA@XZ=quazip2.??0QuaAdler32@@QEAA@XZ,@2")
#pragma comment(linker,"/EXPORT:??0QuaChecksum32@@QEAA@AEBV0@@Z=quazip2.??0QuaChecksum32@@QEAA@AEBV0@@Z,@3")

BOOL APIENTRY DllMain
(
    HMODULE hModule,
    DWORD urfc,
    LPVOID lpReserved
)
{
    switch (urfc)
    {
    case DLL_PROCESS_ATTACH:
        MessageBox(NULL, LPCSTR("劫持完成"), LPCSTR("Hijack"), MB_OK); //若这里创建一个新线程，并开启一个管道开启socket通讯执行反弹shell就能很好的隐藏运行这个后门。
        break;
    case DLL_PROCESS_DETACH:
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    default:
        break;
    }
    return TRUE;
}



静态库
1 通过vs生成一个静态库项目
2 头文件中声明接口 源文件中实现方法
3 结果就是生成的.lib文件，并用.h引用方法

动态库
1 通过vs生成一个动态库项目
2 多一个dllMain
  BOOL APIENTRY DllMain( HMODULE hModule,
                         DWORD  ul_reason_for_call,
                         LPVOID lpReserved
                       )
  {
      switch (ul_reason_for_call)
      {
      case DLL_PROCESS_ATTACH:
      case DLL_THREAD_ATTACH:
      case DLL_THREAD_DETACH:
      case DLL_PROCESS_DETACH:
          break;
      }
      return TRUE;
  }
3 头文件中的函数声明有导出 extern "C" __declspec(dllexport)
4 结果就是生成的.lib .dll文件，并用.h引用方法
5 动态库转成静态库
6 最近调试程序的经常弹出找不到DLL。只好一个个把DLL拷贝到程序目录下(我是拷贝到源文件目录，也有人说是Debug目录)。

visual studio中指定dll存放目录的几种方法
项目属性->配置属性->调试->工作目录。
1 选择当前工程，右击 属性 -> 配置属性 -> 调试，在 工作目录 设置dll的路径
  优点：跨平台(拷贝到其他平台不用改动)
  缺点：目录不能很干净，因为生成的文件会自动放到这个目录下
2 创建一个文件夹lib，里面放入所有需要的dll文件,右击 属性 -> 生成事件 -> 预先生成事件，
  输入命令xcopy $(SolutionDir)httpclient/bin $(OutDir) /a /F /I /Y /C",在预处理的时候把dll文件拷贝到Debug目录下。
  优点：跨平台(拷贝到其他平台不用改动)
  缺点：dll文件太多，文件太大的情况下，拷贝会很费时。
3 把dll文件目录设置到环境变量或者把dll文件拷贝到system32目录下(64位系统好像是拷贝到system64中)
  优点：项目无需太多改动
  缺点：不能跨平台，系统侵入
4 设置项目的环境变量，选择当前工程，右击 属性 -> 配置属性 -> 调试，在 环境 添加dll路径，如：path=%path%;../httpclient/bin





函数调用方式
调用函数时，计算机常用栈来存放函数执行需要的参数，由于栈的空间大小是有限的，在windows下，栈是向低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，如果申请的空间超过栈的剩余空间时，将提示overflow。
在函数调用时，第一个进栈的是主函数中后的下一条指令(函数调用语句的下一条可执行语句)的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的！
VC中默认调用是 __cdecl 方式，Windows API 使用 __stdcall 调用方式，在 DLL 导出函数中，为了跟 Windows API 保持一致，建议使用 __stdcall 方式。
C/C++ 函数调用约定，主要是对以下两个方面进行了约定：
1、当参数个数多于一个时，按照什么顺序把参数压入堆栈。---调用函数时，参数的入栈顺序。
2、函数调用后，由谁来把堆栈恢复原状。---调用结束后，由谁(调用者还是被调用者)负责将参数出栈。

__stdcall的全称是standard call。是C++的标准调用方式。
stdcall 调用方式又被称为 Pascal 调用方式。在Microsoft C++系列的C/C++编译器中，使用 PASCAL 宏，WINAPI 宏和 CALLBACK 宏来指定函数的调用方式为 stdcall。
int _stdcall function(int a, int b);
函数参数的入栈顺序为从右到左入栈。函数返回时使用retn x指令，其中x为调整堆栈的字节数。这种方式叫做自动清栈。即被调用的函数的参数个数是固定的，调用者必须严格按照定义传递参数，一个不多，一个不少。
(1)参数从右向左依次压入堆栈.
(2)由被调用函数自己来恢复堆栈，称为自动清栈。
(3)函数名自动加前导下划线，后面紧跟着一个@，其后紧跟着参数的大小。

__cdecl的全称是C Declaration，即C语言默认的函数调用方式。
int function(int a, int b) // 不加修饰符就是C调用方式
int _cdecl function(int a, int b) // 明确指定用C调用方式
函数参数的入栈顺序为从右到左入栈。函数返回时作用ret指令。由调用者手动清栈。被调用的函数支持可变参数。调用者根据调用时传入参数的个数，手动平衡堆栈。
(1)参数从右向左依次压入堆栈.
(2)由调用者恢复堆栈，称为手动清栈。
(3)函数名自动加前导下划线。

相同点
参数入栈顺序相同：从右到左

不同点
堆栈平衡方式不同：__stdcall自动清栈，__cdecl手动清栈。
返回指令不同：_stdcall使用retn x, __cdecl使用ret
编译后函数的修饰名不同： 假设有函数int foo(int a, int b), 采用__stdcall编译后的函数名为_foo@8，而采用__cdecl编译后的函数名为_foo。

实例
支持可变参数的函数必须定义为__cdecl，如：
int printf(char *fmt, ...);

在windef.h中对__stdcall和__cdecl的定义
 #define CALLBACK   __stdcall
 #define WINAPI    __stdcall
 #define WINAPIV   __cdecl
 #define APIENTRY   WINAPI
 #define APIPRIVATE  __stdcall
 #define PASCAL    __stdcall
 #define cdecl _cdecl
 #ifndef CDECL
 #define CDECL _cdecl
 #endif


fastcall
fastcall 按照名字上理解就可以知道，它是一种快速调用方式，因为它通过 CPU 寄存器来传递参数。此方式的函数的第一个和第二个DWORD参数通过ecx和edx传递，后面的参数从右向左的顺序压入栈。被调用函数清理堆栈。
其声明语法为：
int fastcall function(int a, int b);

thiscall
thiscall 调用方式是唯一一种不能显示指定的修饰符。它是C++类成员函数缺省的调用方式。由于成员函数调用还有一个this指针，因此必须用这种特殊的调用方式。
thiscall调用方式意味着：
(1)参数从右向左压入栈。
(2)如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压入栈后被压入栈。参数个数不定的，由调用者清理堆栈，否则由函数自己清理堆栈。可以看到，对于参数个数固定的情况，它类似于stdcall，不定时则类似于cdecl。


1. _cdecl
(1). 是C Declaration的缩写，表示C语言默认的函数调用方法，实际上也是C++的默认的函数调用方法。
(2). 所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。具体所示：调用方的函数调用->被调用函数的执行->被调用函数的结果返回->调用方清除调整堆栈。
(3). 被调用函数无需要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。总的来说函数的参数个数可变的(就像printf函数一样)，因为只有调用者才知道它传给被调用函数几个参数，才能在调用结束时适当地调整堆栈。
(4). 因为每个调用的地方都需要生成一段调整堆栈的代码，所以最后生成的文件较大。
2. _stdcall(CALLBACK/WINAPI)
(1). 是Standard Call的缩写，要想函数按照此调用方式必须在函数名加入_stdcall，通常win32 api 应该是_stdcall调用规则。通过VC++编写的DLL欲被其他语言编写的程序调用，应将函数的调用方式声明为_stdcall 方式，WINAPI都采用这种方式。
(2). 所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。具体所示：调用方的函数调用->被调用函数的执行-> 被调用方清除调整堆栈->被调用函数的结果返回。
(3). 这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。
(4). 函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。总的来说，就是函数的参数个数不能是可变的。是从 _cdecl 修改而来, _stdcall 不支持可变参数,并且清栈由被调用者负责,其他的都一样
(5). 因为只需在被调用函数的地方生成一段调整堆栈的代码，所以最后生成的文件较小。
3． PASCAL 是Pascal语言的函数调用方式，也可以在C/C++中使用，参数压栈顺序与前两者相反。返回时的清栈方式忘记了。。。
4. _fastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传
递比较费时。因此_fastcall通常规定将前两个(或若干个)参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。
5. _thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。
6. _fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。
7. C中不加说明默认函数为_cdecl方式(C中也只能用这种方式)，C++也一样，但是默认的调用方式可以在IDE环境中设置。
8. 带有可变参数的函数必须且只能使用_cdecl方式，例如下面的函数:
int printf(char * fmtStr, ...);
int scanf(char * fmtStr, ...);
9. 函数名修饰
(1). _cdecl ：对于_cdecl而言，如果对于定义在C程序文件(编译器会通过后缀名为.C判断)的输出函数，函数名会保持原样；对于定义在C++程序文件中的输出函数，函数名会被修饰(见10)。为使函数名不被修饰，有两种方法：A.可通过在前面加上extern “c”以去除函数名修饰；B. 可通过.def文件去除函数名修饰。
(2). _stdcall：无论是C程序文件中的输出函数还是C++程序文件中的输出函数，函数名都会被修饰。对于定义在C++程序文件中的输出函数，好像更复杂，和_cdecl的情况类似。去除函数名修饰方法：只能通过.def文件去除函数名修饰。
10. 函数名修饰规则：
(1). 为什么要函数名修饰：
函数名修饰就是编译器在编译期间创建的一个字符串，用来指明函数的定义和原型。LINK程序或其他工具有时需要指定函数的名字修饰来定位函数的正确位置。多少情况下程序员并不需要知道函数的名字修饰，LINK程序或其他工具会自动区分他们。当然，在某些情况下需要指定函数名修饰，例如在c++程序中，为了让LINK程序或其他工具能够匹配到正确的函数名字，就必须为重载函数后一些特殊函数(如构造函数和析构函数)指定名字修饰。另一种需要指定函数名修饰的情况是在汇编程序中调用C或C++函数。
(2). C语言：
 对于_stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其参数的字节数，例如_functionname@number。_cdecl调用约定仅在输出函数名前加上一个下划线前缀，例如_functionname。_fastcall调用约定在输出函数名前加上一个 “@“符号，后面也是一个”@“符号和其参数的字节数，例如@functionname@number。
(3). C++语言：
   C++的函数名修饰规则有些复杂，但是信息更充分，通过分析修饰名不仅能够知道函数的调用方式，返回值类型，参数个数甚至参数类型。不管__cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字，再后面是参数表的开始标识和按照参数类型代号拼出的参数表。对于__stdcall方式，参数表的开始标识是“@@YG”，对于__cdecl方式则是“@@YA”，对于__fastcall方式则是“@@YI”。参数表的拼写代号如下所示： X--void     D--char     E--unsigned char     F--short     H--int     I--unsigned int     J--long     K--unsigned long(DWORD) M--float     N--double     _N—bool U—struct ....
指针的方式有些特别，用PA表示指针，用PB表示const类型的指针。后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复。U表示结构类型，通常后跟结构体的类型名，用“@@”表示结构类型名的结束。函数的返回值不作特殊处理，它的描述方式和函数参数一样，紧跟着参数表的开始标志，也就是说，函数参数表的第一项实际上是表示函数的返回值类型。参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。
下面举两个例子，假如有以下函数声明：
int Function1(char *var1,unsigned long); 其函数修饰名为“?Function1@@YGHPADK@Z”，
而对于函数声明： oid Function2(); 其函数修饰名则为“?Function2@@YGXXZ” 。
对于C++的类成员函数(其调用方式是thiscall)，函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名；其次是参数表的开始标识不同，公有(public)成员函数的标识是“@@QAE”,保护(protected)成员函数的标识是“@@IAE”,私有(private)成员函数的标识是“@@AAE”，如果函数声明使用了const关键字，则相应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。如果参数类型是类实例的引用，则使用“AAV1”，对于const类型的引用，则使用“ABV1”。
11. 查看函数的名字修饰
有两种方式可以检查你的程序中的函数的名字修饰：使用编译输出列表或使用Dumpbin工具。使用/FAc，/FAs或/FAcs命令行参数可以让编译器输出函数或变量名字列表。使用dumpbin.exe /SYMBOLS命令也可以获得obj文件或lib文件中的函数或变量名字列表。此外，还可以使用 undname.exe 将修饰名转换为未修饰形式。
12. _beginthread需要_cdecl的线程函数地址，_beginthreadex和_CreateThread需要_stdcall的线程函数地址。
13. #define CALLBACK __stdcall //这就是传说中的回调函数
#define WINAPI __stdcall //这就是传说中的WINAPI #define WINAPIV __cdecl
#define APIENTRY WINAPI //DllMain的入口就在这里 #define APIPRIVATE __stdcall #define PASCAL __stdcall



对_stdcall 的理解
在C语言中，假设我们有这样的一个函数：int function(int a,int b)
调用时只要用result = function(1,2)这样的方式就可以使用这个函数。但是，当高级语言被编译成计算机可以识别的机器码时，有一个问题就凸现出来：在CPU中，计算机没有办法知道一个函数调用需要多少个、什么样的参数，也没有硬件可以保存这些参数。也就是说，计算机不知道怎么给这个函数传递参数，传递参数的工作必须由函数调用者和函数本身来协调。为此，计算机提供了一种被称为栈的数据结构来支持参数传递。
栈是一种先进后出的数据结构，栈有一个存储区、一个栈顶指针。栈顶指针指向堆栈中第一个可用的数据项(被称为栈顶)。用户可以在栈顶上方向栈中加入数据，这个操作被称为压栈(Push)，压栈以后，栈顶自动变成新加入数据项的位置，栈顶指针也随之修改。用户也可以从堆栈中取走栈顶，称为弹出栈(pop)，弹出栈后，栈顶下的一个元素变成栈顶，栈顶指针随之修改。函数调用时，调用者依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中取得数据，并进行计算。函数计算结束以后，或者调用者、或者函数本身修改栈，使堆栈恢复原装。
在参数传递中，有两个很重要的问题必须得到明确说明：
当参数个数多于一个时，按照什么顺序把参数压入堆栈函数调用后，由谁来把堆栈恢复原装。在高级语言中，通过函数调用约定来说明这两个问题。常见的调用约定有：
stdcall，cdecl，fastcall，thiscall，naked call
stdcall调用约定：
stdcall很多时候被称为pascal调用约定，因为pascal是早期很常见的一种教学用计算机程序设计语言，其语法严谨，使用的函数调用约定就是stdcall。在Microsoft C++系列的C/C++编译器中，常常用PASCAL宏来声明这个调用约定，类似的宏还有WINAPI和CALLBACK。
stdcall调用约定声明的语法为(以前文的那个函数为例)：
int __stdcall function(int a,int b)
stdcall的调用约定意味着：1)参数从右向左压入堆栈，2)函数自身修改堆栈 3)函数名自动加前导的下划线，后面紧跟一个@符号，其后紧跟着参数的尺寸。
以上述这个函数为例，参数b首先被压栈，然后是参数a，函数调用function(1,2)调用处
翻译成汇编语言将变成：
push 2 第二个参数入栈
push 1 第一个参数入栈
call function 调用参数，注意此时自动把cs:eip入栈
而对于函数自身，则可以翻译为：
push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复mov ebp,esp 保存堆栈指针mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp + 0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 8
而在编译时，这个函数的名字被翻译成_function@8
注意不同编译器会插入自己的汇编代码以提供编译的通用性，但是大体代码如此。其中在函数开始处保留esp到ebp中，在函数结束恢复是编译器常用的方法。
从函数调用看，2和1依次被push进堆栈，而在函数中又通过相对于ebp(即刚进函数时的堆栈指针)的偏移量存取参数。函数结束后，ret 8表示清理8个字节的堆栈，函数自己恢复了堆栈。
cdecl调用约定：
cdecl调用约定又称为C调用约定，是C语言缺省的调用约定，它的定义语法是：
int function (int a ,int b) //不加修饰就是C调用约定
int __cdecl function(int a,int b)//明确指出C调用约定
在写本文时，出乎我的意料，发现cdecl调用约定的参数压栈顺序是和stdcall是一样的，参数首先由有向左压入堆栈。所不同的是，函数本身不清理堆栈，调用者负责清理堆栈。由于这种变化，C调用约定允许函数的参数的个数是不固定的，这也是C语言的一大特色。对于前面的function函数，使用cdecl后的汇编码变成：
调用处
push 1
push 2
call function
add esp,8 注意：这里调用者在恢复堆栈
被调用函数_function处push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复
mov ebp,esp 保存堆栈指针
mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp + 0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 注意，这里没有修改堆栈
MSDN中说，该修饰自动在函数名前加前导的下划线，因此函数名在符号表中被记录为_function，但是我在编译时似乎没有看到这种变化。由于参数按照从右向左顺序压栈，因此最开始的参数在最接近栈顶的位置，因此当采用不定个数参数时，第一个参数在栈中的位置肯定能知道，只要不定的参数个数能够根据第一个后者后续的明确的参数确定下来，就可以使用不定参数，例如对于CRT中的sprintf函数，定义为：
int sprintf(char* buffer,const char* format,...)
由于所有的不定参数都可以通过format确定，因此使用不定个数的参数是没有问题的。

fastcall
fastcall调用约定和stdcall类似，它意味着：
函数的第一个和第二个DWORD参数(或者尺寸更小的)通过ecx和edx传递，其他参数通过
从右向左的顺序压栈
被调用函数清理堆栈
函数名修改规则同stdcall
其声明语法为：int fastcall function(int a,int b)
thiscall
thiscall是唯一一个不能明确指明的函数修饰，因为thiscall不是关键字。它是C++类成
员函数缺省的调用约定。由于成员函数调用还有一个this指针，因此必须特殊处理，th
iscall意味着：
参数从右向左入栈
如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针
在所有参数压栈后被压入堆栈。
对参数个数不定的，调用者清理堆栈，否则函数自己清理堆栈
为了说明这个调用约定，定义如下类和使用代码：

class A
{
public:
int function1(int a,int b);
int function2(int a,...);
};
int A::function1 (int a,int b)
{
return a+b;
}
＃i nclude
int A::function2(int a,...)
{
va_list ap;
va_start(ap,a);
int i;
int result = 0;
for(i = 0 i < a i ++)
{
result += va_arg(ap,int);
}
return result;
}
void callee()
{
A a;
a.function1 (1,2);
a.function2(3,1,2,3);
}

callee函数被翻译成汇编后就变成：
//函数function1调用
0401C1D push 2
00401C1F push 1
00401C21 lea ecx,[ebp-8]
00401C24 call function1 注意，这里this没有被入栈
//函数function2调用
00401C29 push 3
00401C2B push 2
00401C2D push 1
00401C2F push 3
00401C31 lea eax,[ebp-8] 这里引入this指针
00401C34 push eax
00401C35 call function2
00401C3A add esp,14h
可见，对于参数个数固定情况下，它类似于stdcall，不定时则类似cdecl
naked call


这是一个很少见的调用约定，一般程序设计者建议不要使用。编译器不会给这种函数增加初始化和清理代码，更特殊的是，你不能用return返回返回值，只能用插入汇编返回结果。这一般用于实模式驱动程序设计，假设定义一个求和的加法程序，可以定义为：
__declspec(naked) int add(int a,int b)
{
__asm mov eax,a
__asm add eax,b
__asm ret
}
注意，这个函数没有显式的return返回值，返回通过修改eax寄存器实现，而且连退出函数的ret指令都必须显式插入。上面代码被翻译成汇编以后变成：
mov eax,[ebp+8]
add eax,[ebp+12]
ret 8
注意这个修饰是和__stdcall及cdecl结合使用的，前面是它和cdecl结合使用的代码，对于和stdcall结合的代码，则变成：
__declspec(naked) int __stdcall function(int a,int b)
{
__asm mov eax,a
__asm add eax,b
__asm ret 8 //注意后面的8
}
至于这种函数被调用，则和普通的cdecl及stdcall调用函数一致。函数调用约定导致的常见问题如果定义的约定和使用的约定不一致，则将导致堆栈被破坏，导致严重问题，下面是两种常见的问题：
函数原型声明和函数体定义不一致
DLL导入函数时声明了不同的函数约定
以后者为例，假设我们在dll种声明了一种函数为：
__declspec(dllexport) int func(int a,int b);//注意，这里没有stdcall，使用的是
cdecl
使用时代码为：
typedef int (*WINAPI DLLFUNC)func(int a,int b);
hLib = LoadLibrary(...);
DLLFUNC func = (DLLFUNC)GetProcAddress(...)//这里修改了调用约定
result = func(1,2);//导致错误
由于调用者没有理解WINAPI的含义错误的增加了这个修饰，上述代码必然导致堆栈被破坏，MFC在编译时插入的checkesp函数将告诉你，堆栈被破坏了。



extern "C" __declspec(dllexport)

一、__declspec(dllexport):
将一个函数声名为导出函数，就是说这个函数要被其他程序调用，即作为DLL的一个对外函数接口。通常它和extern "C" 合用，形式如下：
extern "C"{__declspec(dllexport) RETURN_TYPE FUNCTION(){}}
这是由于在制作DLL导出函数时由于C++存在函数重载，因此__declspec(dllexport)    FUNCTION(int,int)    在DLL会被decorate，例如被decorate成为    function_int_int，而且不同的编译器decorate的方法不同，造成了在用GetProcAddress取得FUNCTION地址时的不便，使用extern    "C"时，上述的decorate不会发生，因为C没有函数重载，如此一来被extern"C"修饰的函数，就不具备重载能力。

二、以下内容摘自MSDN：
“在 32 位编译器版本中，可以使用__declspec(dllexport) 关键字从 DLL 导出数据、函数、类或类成员函数。__declspec(dllexport)将导出指令添加到对象文件(即obj文件)，若要导出函数，__declspec(dllexport)关键字必须出现在调用约定关键字的左边(如果指定了关键字)。例如：
__declspec(dllexport) void __cdecl Function1(void);
若要导出类中的所有公共数据成员和成员函数，关键字必须出现在类名的左边，如下所示：

class __declspec(dllexport) CExampleExport : public CObject
{ ... class definition ... };

生成 DLL 时，通常创建一个包含正在导出的函数原型和/或类的头文件，并将__declspec(dllexport)添加到头文件中的声明。
若要提高代码的可读性，请为__declspec(dllexport)定义一个宏并对正在导出的每个符号使用该宏：
#define DllExport   __declspec( dllexport ) ”

三、__declspec(dllexport) 与 .def
模块定义 (.def) 文件是包含一个或多个描述各种 DLL 属性的 Module 语句的文本文件。
1、二者的目的都是将公共符号导入到应用程序中或从 DLL 导出函数。
2、添加 __declspec(dllexport)是为了提供不使用.def文件从 .EXE 或 .DLL 导出函数的简单方法。
3、如果不使用 __declspec (dllimport) 或 __declspec(dllexport) 导出 DLL 函数，则 DLL 需要.def文件。
4、并不是任何时候选择添加 __declspec(dllexport)而放弃.def的方式都是好的。如果DLL是提供给VC++用户使用的，只需要把编译DLL时产生的.lib提供给用户，它可以很轻松地调用你的DLL。但是如果DLL是供VB、PB、Delphi用户使用的，那么会产生一个小麻烦。因为VC++对于__declspec(dllexport) 声明的函数会进行名称转换，如下面的函数：
     __declspec(dllexport) int __stdcall IsWinNT()
     会转换为IsWinNT@0，这样你在VB中必须这样声明：
     Declare Function IsWinNT Lib "my.dll" Alias "IsWinNT@0" () As Long
     @的后面的数由于参数类型不同而可能不同。这显然不太方便。所以如果要想避免这种转换，就要使用.def文件方式。





