
github
ssh -T git@github.com   配置好ssh之后 验证
github 默认分支修改 切换到要修改的库->settings->branches->Default branch下的双箭头


本地文件上传/同步到github
1 git init   建立git仓库，cd到你的本地项目根目录下，执行git命令
2 git add .  将项目的所有文件添加到仓库中 或者git add *.c *.cpp makefile* 添加部分文件
3 git commit -m "注释语句"   将add的文件commit到仓库
4 github上创建自己的Repository，点击Clone or download按钮，复制弹出的地址git@github.com:***/test.git，
  记得要用SSH的地址，尽量不要用HTTPS的地址
5 git remote add origin git@github.com:***/test.git 将本地的仓库关联到github上---把上一步复制的地址放到下面
6 git pull origin master 上传github之前，要先pull一下 也可以不用
7 git push -u origin master 上传代码到github远程仓库


期间可能需要配置
git config --global user.name 'your_name'
git config --global user.email 'your_email'

本地生成的或者是远程上传的密钥文件 在连接github时 有错误 是权限问题
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/Users/tudouya/.ssh/vm/vm_id_rsa.pub' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
bad permissions: ignore key: /Users/tudouya/.ssh/vm/vm_id_rsa.pub
Permission denied (publickey,password).
chmod 400 ~/.ssh/id_rsa             设置只读权限

git mv OLD-FILENAME NEW-FILENAME    文件重命名
git add -u                          只暂存已修改的文件 不管未追踪的文件
git add xxx                         git commit之前一定要add 即使是修改过的文件
git remote                          显示远程库别名
git remote -v                       查看远程库链接地址
git remote add origin 远程库地址     增加远程库别名
git remote rm origin                删除远程库
git remote rename master ttt        修改远程仓别名 从 master -> ttt
git rm xxx                          删除文件
git rm -r --cached .                对所有文件都取消跟踪 不删除本地文件
git rm -r --f .                     对所有文件都取消跟踪 删除本地文件
git rm --cached readme1.txt         删除readme1.txt的跟踪，并保留在本地
git rm --f readme1.txt              删除readme1.txt的跟踪，并且删除本地文件
.gitignore 文件                     忽略要提交的文件 每一行代表忽略一个或者一种
git config --list --show-origin     显示配置 包含文件位置

关于push -u的解释  -u为上游分支
git branch --set-upstream-to=origin/master    手动设置当前分支的上游分支分支
git push -u origin master                     1 设置上游分支 2 push
设置了上游分支 每次pull 或者 push的时候就不用每次手动指定 git pull origin master 简化为 git pull
在配置文件中体现为
[branch "master"]
    remote = origin
    merge = refs/heads/develop
git config --global push.default 'option'   可选值 nothing, current, upstream, simple, matching
nothing - push操作无效，除非显式指定远程分支，例如git push origin develop。
current - push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支。
upstream - push当前分支到它的upstream分支上（这一项其实用于经常从本地分支push/pull到同一远程仓库的情景，
  这种模式叫做central workflow）。
simple - simple和upstream是相似的，只有一点不同，simple必须保证本地分支和它的远程
upstream分支同名，否则会拒绝push操作。
matching - push所有本地和远程两端都存在的同名分支。
因此如果我们使用了git2.0之前的版本，push.default = matching，git push后则会推送当前分支代码到远程分支，
  而2.0之后，push.default = simple，如果没有指定当前分支的upstream分支，就会收到上文的fatal提示。



改变远程库的地址
1 进入git_test根目录 通过命令直接修改远程地址
git remote set-url origin http://192.168.100.235:9797/john/git_test.git
2 进入git_test根目录 通过命令先删除再添加远程仓库
git remote rm origin
git remote add origin http://192.168.100.235:9797/john/git_test.git
3 进入git_test根目录 直接修改配置文件
vim config .git/config
4 通过第三方git客户端修改
以SourceTree为例，点击 仓库 -> 仓库配置 -> 远程仓库 即可管理此项目中配置的所有远程仓库
而且这个界面最下方还可以点击编辑配置文件，同样可以完成方法三。

三个区的切换命令 Workspace工作区 Index/Stage暂存区 Repository仓库区(或本地仓库) Remote远程仓库
git add readme.md Test1.py  工作区->暂存区
git checkout -- file        暂存区->工作区 git checkout . 撤销所有工作区修改
git commit -m "commit last" 暂存区->版本区
git reset --soft d5d43ff    版本区 本地仓回滚到Y版本 但是暂存区和工作区保持不变
git reset --mixed d5d43ff   版本区->暂存区(默认)可以不写--mixed 本地仓和暂存区都回滚到Y版本号 工作区代码不受影响
git reset --hard d5d43ff    版本区->暂存区->工作区 本地仓 暂存区 工作区都回滚 撤销工作区中所有修改


git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。
git clean -df #返回到某个节点，（未跟踪文件的删除）
git clean 参数
    -n 不实际删除，只是进行演练，展示将要进行的操作，有哪些文件将要被删除。（可先使用该命令参数，然后再决定是否执行）
    -f 删除文件
    -i 显示将要删除的文件
    -d 递归删除目录及文件（未跟踪的）
    -q 仅显示错误，成功删除的文件不显示
git reset 删除的是已跟踪的文件，将已commit的回退。
git clean 删除的是未跟踪的文件

git rebase -i commitid 丢弃指定提交 针对想撤销中间某次commit的情况 如:git rebase -i HEAD~2
  commitid 是要修改的某个commit的前一个id  如提交顺序为A->B->C->D D为HEAD 要删除B 则commitid为A
  `rebase -i`是 `rebase --interactive` 的缩写；
  `git rebase -i` 不仅可以删除commit， 还可以修改commit。 具体的可以查看rebase 中提示的参数
  删除了中间的commit 有时候需要解决冲突 如提交顺序为A->B->C->D 删除了B 可能需要解决 AC冲突 也有可能后续继续解决D的冲突
git commit --amend 命令修订当前的提交
git rebase --continue 命令继续代码的提交(推荐),执行之后,需要重新提交,
  解决一下当前的代码冲突之后重新提交直至没有rebase提示,就可以正常提交了


git show commitId            #查看某个commit的修改
git show commitId fileName   #查看某次commit中具体某个文件的修改



回滚提交
git reset --hard [commit id] 通过git log查看提交id  也可以用下面的参数
  HEAD^   最新提交HEAD位置往回数一个提交 HEAD当前版本 HEAD^ 上一个版本 HEAD^^ 上上一个版本 以此类推
  HEAD~n  最新提交HEAD位置往回数n个提交  HEAD~0 表示当前版本 HEAD~1 上一个版本 HEAD~2 上上一个版本 以此类推
  可以发现 reset 命令只能回滚最新的提交 若最后一次commit需要保留 而只想回滚之前的某次commit reset命令可能就无法满足了
git push --force  本地修改强制推送到远端
  完成这2步 本地和远程都回滚了

如何撤销上一次push
此时用--soft参数比较合适，只回滚本地仓到上一个版本，然后通过git push -f命令，撤销上次的push，最后更改好代码后重新push。
git reset --soft HEAD~1     // 1将本地仓回滚到上一个版本号
git push origin master -f   // 2通过-f命令，将回滚后的版本号强制推送上去 相当于撤销了最新的push
// 修改代码
// 修改好后，重新add，commit，push即可。



本地修改了一些文件 (并没有使用 git add 到暂存区)，想放弃修改
git checkout -- filename    #单个文件/文件夹
git checkout .              #所有文件/文件夹

本地新增了一些文件 (并没有 git add 到暂存区)，想放弃修改
rm  -rf filename            #单个文件/文件夹 删除新增的文件，如果文件已经已经 git add 到暂存区，并不会删除！
git clean -xdf              #所有文件  本命令删除新增的文件和文件夹，如果文件已经已经 git add 到暂存区，并不会删除！

本地修改/新增了一些文件，已经 git add 到暂存区，想要把暂存区的修改回退到工作区
git reset HEAD filename    #单个文件/文件夹  HEAD表示最新的版本
git reset HEAD .           #所有文件/文件夹

本地通过 git add 和 git commit 后，想要撤销此次 commit
git reset commit_id        #撤销 commit, 同时保留该 commit 修改
  这个 commit_id 是你想要回到的那个节点，可以通过 git log 查看，可以只选前 6 位。
  撤销之后，你所做的已经 commit 的修改还在工作区！
git reset --hard commit_id  #撤销 commit, 同时本地删除该 commit 修改
  这个 commit_id 是你想要回到的那个节点，可以通过 git log 查看，可以只选前6位
  [谨慎操作] 撤销之后，你所做的已经 commit 的修改将会清除，仍在工作区/暂存区的代码也将会清除！
