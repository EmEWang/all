
https://git-scm.com/
https://git-scm.com/docs
https://blog.csdn.net/qq_35246620/article/details/66973794    # 史上最简单的 GitHub 教程


github
ssh -T git@github.com  # 配置好ssh keys之后 验证绑定是否成功
github 切换到要修改的库->settings->branches->Default branch下的双箭头  # 默认分支修改
github 个人头像->Settins->SSH and GPG keys->SSH keys中增删改          # 修改ssh keys

本地文件上传/同步到github
1 git init             # 建立本地git仓库，cd 目录，执行git命令
2 git add .            # 整个目录添加到仓库  git add *.c *.cpp makefile* 添加部分文件
3 git commit -m "xxx"  #  将add的文件commit到仓库
4 github创建Repository，Clone or download按钮，地址git@github.com:*/*.git，要用SSH的地址
5 git remote add origin git@github.com:*/*.git    # 将本地的仓库关联到github上
6 git pull origin master    # 先pull 也可以不用
7 git push -u origin master # 上传到github

git config --global user.name 'your_name'     # 期间可能需要配置
git config --global user.email 'your_email'

https://stackoverflow.com/questions/29933918/ssh-key-permissions-0644-for-id-rsa-pub-are-too-open-on-mac
本地生成的或者是远程上传的密钥文件 在连接github时 有错误 是权限问题
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/Users/tudouya/.ssh/vm/vm_id_rsa.pub' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
bad permissions: ignore key: /Users/tudouya/.ssh/vm/vm_id_rsa.pub
Permission denied (publickey,password).
chmod 400 ~/.ssh/id_rsa             # 设置只读权限

涉及到将GitHub的文件夹删掉重新提交的问题：则在本地仓库中直接删除，然后再提交一次（commit 时显示del ），
接着将要上传的文件夹再次复制到本地仓库，最后提交，完成。
现在就可以显示本人提交了：


配置文件
https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git
/etc/gitconfig  # 系统级配置文件       git config --system 读写该文件。
~/.gitconfig    # 单用户全局配置文件   git config --global 读写该文件。
.git/config     # 当前本地仓库配置文件  git config--local 写该文件。
三层配置(系统、全局、本地)都会覆盖掉上一层次的配置，如.git/config中的值会覆盖掉/etc/gitconfig中所对应的值。
.gitignore      # 忽略要本地提交的文件 每一行代表忽略一个或者一种


git config --list               # 显示配置 global和local都显示 --list简写-l
git config --list --show-origin # 显示配置 --show-origin显示文件位置
git config --list --local       # 显示本地设置  --local本地
git config --list --global      # 显示全局设置  --global全局
git config user.name/email      # 设置本地用户名/邮箱  或 ./.git/config手动修改
git config --global user.name "Your Name"           # 设置全局用户名  或 ~/.gitconfig手动修改
git config --global user.email "email@example.com"  # 设置全局邮箱
*** Please tell me who you are. # 如报错 需要设置用户名和邮箱

git status                      # 查看状态
git clone url                   # 克隆仓库到本地 在本地主机生成一个目录 与远程版本库同名
git clone url dir               # 克隆仓库到本地指定的目录
git add xxx                     # 将xxx写入缓存区
git add -u                      # 只暂存追踪的已修改的文件 未追踪的文件不管
git mv name1 name2              # 文件重命名
git rm xxx                      # 删除文件
git rm -r --cached .            # 对所有文件都取消跟踪 不删除本地文件 -r递归  --cached索引
git rm -r --f .                 # 对所有文件都取消跟踪 删除本地文件  -f强制
git rm --cached 1.txt           # 删除1.txt的跟踪，并保留在本地
git rm --f 1.txt                # 删除1.txt的跟踪，并且删除本地文件
git commit                      # 将暂存区的改动提交到本地版本库 生成40位哈希值commit-id 前6位就够用 reset回到这里
git commit -m 'xxx'             # -m添加备注信息 单括号之间的信息可换行
git commit --amend              # 可以修改上一次的提交信息  可以将最近的修改追加到上一次的提交上
git commit -a -m "massage"      # 所有跟踪文件的修改/删除都提交到本地仓库 未追踪的文件不受影响 同 --all

git show commitId               # 查看某个commit的修改
git show commitId file1         # 查看某次commit中具体某个文件的修改
git show -n                     # 查看最近n次commit的具体内容

git remote                      # 显示远程库别名
git remote -v                   # 查看远程库链接地址
git remote add origin url       # 增加远程库别名
git remote rm origin            # 删除远程库
git remote rename master ttt    # 修改远程仓别名  master -> ttt
git remote set-url origin http://xxx/test.git  # 改变远程库的地址
git remote rm origin            # 同上  先删除再添加远程仓库
git remote add origin http://xxx/test.git
vim config .git/config          # 同上  直接修改配置文件

git log                         # 查看提交log
git log --raw --oneline         # 提交消息中指定了哪些文件发生变化
git log --raw -n                # 最近n此提交消息中指定了哪些文件发生变化
git log -p -n                   # n为数字，表示最近n次的修改内容
git log BSmod/gather.cpp        # 查看一个文件的修改提交记录
git log -n BSmod/gather.cpp     # 查看一个文件的最近n此修改提交记录
git log -p BSmod/gather.cpp     # 查看一个文件的详细修改提交记录
git log -p -n BSmod/gather.cpp  # 查看一个文件的最近n此详细修改提交记录
git log --pretty=oneline BSmod/gather.cpp  # 一行展示某个任务的提交记录

git reflog show --date=iso <branch>  # 查看指定分支的历次更改记录，最下面一条的时间即是分支创建时间
git reflog --date=local | grep <branch>    # 查看当前分支是从哪个分支拉下来的
git log --graph --decorate --oneline --all # 查看当前分支来查看是从哪个分支拉的

git  merge --abort              # 丢弃当前合并
git  reflog                     # 查询回退到的版本号
git  reset  --hard  f82cfd2     # 回退到这个版本号

git stash                       # 把所有没有提交的修改暂存到stash里面。
git stash pop                   # 恢复
git rebase -i commitid          # 丢弃指定提交 针对想撤销中间某次commit的情况 如 git rebase -i HEAD~2
  commitid 是要修改的某个commit的前一个id  如提交顺序为A->B->C->D D为HEAD 要删除B 则commitid为A
  rebase --interactive简写rebase -i   git rebase -i 不仅可以删除commit，还可以修改commit。
  删除了中间的commit 有时要解决冲突 如提交顺序为A->B->C->D 删除了B 可能需要解决 AC冲突 也有可能后续继续解决D的冲突
git rebase --continue 命令继续代码的提交(推荐),执行之后,需要重新提交,解决冲突后重新提交直至没有rebase提示


合并某个提交commit到指定的分支上
git log                   # 查看提交的信息 记住commit id
git checkout 到要修改的分支 # 如 git checkout master
git cherry-pick 某个commit id  #  如 git cherry-pick 62ecb3 把某个commit id的提交合并到当前分支
cherry-pick和merge比较类似 如git不能合并代码改动（如遇到合并冲突） 需要手动解决冲突并添加commit

合并某个分支上的一系列commits
这种情况下就不要选择cherry-pick了，rebase 更适合
首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit 如需要合并feature分支的commit76cada~62ecb3到master分支
git checkout -b newbranch 62ecb3
然后，rebase这个新分支的commit到master（--ontomaster）。76cada^ 指明你想从哪个特定的commit开始。
git rebase --ontomaster 76cada^
得到的结果就是feature分支的commit 76cada ~ 62ecb3 都被合并到了master分支。



git branch                      # 查看本地分支   前面带 * 的是当前分支
git branch -a                   # 查看所有分支
git branch -r                   # 查看远程分支
git checkout b1                 # 转换到b1分支
git checkout -b b1              # 创建本地分支b1
git checkout -b b1 origin/b1    # 创建本地分支b1,自动切换到b1,且建立本地分支b1和远程分支b1的映射关系
git fetch origin 远程分支x:本地分支x # 创建本地分支x,不自动切换到x,且不建立本地分支和远程分支的映射关系
git checkout --track origin/b1  # 本地新建分支b1,自动跟踪远程同名分支b1,若本地没有该分支。

git push --set-upstream origin b1 # 推送分支
git push origin :b1             # 上传本地分支b1到仓库origin
git push origin HEAD            # 上传当前的分支
git push origin [远程分支名]:[本地分支名]  # 推送到远程分支
git config --global push.default current # 设置默认推送分支为当前分支

git branch -m oldName newName     # 1 本地分支重命名 1-4重命名远程分支(假定远程和本地分支同名且已推动到远端)
git push --delete origin oldName  # 2 删除远程分支
git push origin newName           # 3 上传新命名的本地分支
git branch --set-upstream-to origin/newName # 4 把修改后的本地分支与远程分支关联

git branch -vv                  # 查看当前本地分支与远程分支的映射关系
git branch -u origin/远程分支    # 手动关联当前本地分支和远程分支映射关系
git branch -u origin/远程分支 本地分支 # 手动关联本地分支和远程分支
git branch --set-upstream-to=origin/分支名 # 当前分支关联指定的远程分支
git branch --set-upstream-to=origin/远程分支 本地分支 # 本地关联远程分支
git branch --unset-upstream     # 删除当前本地分支与远程分支的映射关系
git branch --unset-upstream 本地分支 # 删除本地某个分支与远程分支的映射关系

git branch -d b1                # 删除b1分支  需要先切换到其他分支
git branch -r -d origin/b1      # 删除远程端分支
git push origin : b1            # 把本地的操作推送到远程来执行 看到b1分支被删除了
git branch -D b1                # 强制删除分支

git branch --delete dev         # 删除本地分支 --delete简写-d
   该分支必须完全和它的上游分支merge完成,如果没有上游分支,必须要和HEAD完全merge
   --delete --force简写-D,这样写可以在不检查merge状态的情况下删除分支
   --force简写-f,作用是将当前branch重置到初始点(startpoint),如果不使用--force的话,git分支无法修改一个已经存在的分支.
git push origin --delete branch # 删除远程分支  该指令也会删除追踪分支 origin 为git地址的标志



tag标签
指Git提交历史的某个点的引用(即里程碑)。代表某一时刻一个特殊分支的版本，可以将其视为不变的branch。
git tag                         # 列出所有标签 -l或--list使用正则表达式过滤标签 如git tag -l "1.0*"
git show t1                     # 获取标签t1的详细信息  会显示作者、标签消息、各自的commit、日期和其它详细信息
git tag -a t1 -m "xxx"          # 带注解的标签(Annonated Git tags) -a 标签名 -m 标签说明
git tag t1                      # 轻量级标签(Lightweight Git tags) 只保存引用的commit的名字和hash 默认HEAD 可指定commit
git tag t1 <commit_sha>         # 在某个commit上打标签
git push origin t1              # 推送本地标签t1到远程
git push origin --tags          # 推送全部未推送过的本地标签到远程版本库
git tag -d t1                   # 本地删除标签
git push origin :refs/tags/t1   # 本地tag删除了，再执行该句，删除远程tag
git fetch --tags                # 拉取标签  将远程仓库的标签拉取到当前分支
git checkout t1                 # 切换tag  可能会提示当前处于"detached HEAD"状态。tag相当于快照，不能更改它的代码。
git checkout -b b1 t1           # 用tag创建一个分支，然后就能操作了。如在tag代码的基础上做修改

git branch b1 t1                # 根据tag创建新的分支
git checkout b1                 # 切换到新的分支。
git push origin b1              # 推送本地分支到远程仓库



diff   查看执行 git status 的结果的详细信息
git diff                        # 尚未缓存的改动
git diff --cached               # 查看已缓存的改动
git diff HEAD                   # 查看已缓存的与未缓存的所有改动
git diff --stat                 # 只显示摘要
git diff commit-id-1 commit-id-2 # 两个commit之间的差异 "-"开头表示2相对1减少了的内容 "+"开头的表示2相对1增加了的内容
git diff branch1 branch2 --stat # 显示出所有有差异的文件列表
git diff branch1 branch2 文件名(带路径) # 显示指定文件的详细差异
git diff branch1 branch2        # 显示出所有有差异的文件的详细差异



clean 删除所有没有被追踪(tracked)的文件。
git reset --hard   # 影响被 track 过的文件  回退到上一个 commit
git clean          # 影响没有被 track 过的文件 清除未被 add 或被 commit 的本地修改
  -n # 显示将要被删除的文件
  -d # 删除未跟踪的目录及文件 （将.gitignore文件标记的文件全部删除）
  -f # 强制运行
  -x # 删除没有被 track 的文件 (不考虑.gitignore设置)
  -X # Remove only files ignored by Git
  -q # 仅显示错误，成功删除的文件不显示
  -i # 显示将要删除的文件

git clean -n        # 显示将要被删除的文件，不会真的删除
git clean -f        # 删除当前目录没有 track 过的文件和文件夹;不会删除 .gitignore 指定的,不管其有没有被 track 过
git clean -f dir    # 删除指定路径下的没有被 track 过的文件
git clean -df       # 删除当前目录下没有被 track 过的文件和文件夹
git clean -xf       # 删除当前目录下所有没有 track 过的文件 不管是否是 .gitignore 文件里面指定的文件夹和文件
git clean           # 对于刚编译过的项目也非常有用

git reset --hard    # 这3条全部还原
git clean -df
git status



三个区的切换命令 Workspace工作区 Index/Stage暂存区 Repository仓库区(本地仓库) Remote远程仓库
git add file1             # 工作区->暂存区  仓库区
git checkout -- file1     # 工作区<-暂存区  仓库区 git checkout . 撤销所有工作区修改
git commit -m "xxx"       # 工作区  暂存区->仓库区
git commit -a -m "xxx"    # 工作区->暂存区->仓库区
git reset --soft d5d43ff  # 工作区  暂存区  仓库区 本地仓库回滚到Y版本 暂存区和工作区不变
git reset --mixed d5d43ff # 工作区  暂存区<-仓库区 (默认) 本地仓和暂存区都回滚到Y版本 工作区不变
git reset --hard d5d43ff  # 工作区<-暂存区<-仓库区 本地仓库 暂存区 工作区都回滚 撤销工作区中所有修改

git reset HEAD filename   # 单个文件 HEAD表示最新的版本
git reset HEAD .          # 所有文件
git reset HEAD^           # 回退到上一个版本
git reset commit_id       # 撤销 commit, 同时保留该 commit 修改
  撤销之后，你所做的已经 commit 的修改还在工作区！
git reset --hard commit_id # 撤销 commit, 同时本地删除该 commit 修改
  撤销之后，你所做的已经 commit 的修改将会清除，仍在工作区/暂存区的代码也将会清除！

git reset --hard [commit id]  # 回滚提交  git log查看提交id  也可用下面的参数
  HEAD^  最新提交HEAD位置上一个提交 HEAD当前版本 HEAD^上个版本 HEAD^^上上个版本 以此类推
  HEAD~n 最新提交HEAD位置上n个提交  HEAD~0 表示当前版本 HEAD~1 上个版本 HEAD~2 上上个版本 以此类推
  reset 只能回滚最新的提交 若最后一次commit需要保留 而只想回滚之前的某次commit reset可能就无法满足了
git push --force  本地修改强制推送到远端  完成这2步 本地和远程都回滚了

撤销上一次push 用--soft，只回滚本地仓到上一个版本，然后git push -f，撤销上次的push，修改代码，重新push。
git reset --soft HEAD~1     # 1将本地仓回滚到上一个版本号
git push origin master -f   # 2通过-f命令，将回滚后的版本号强制推送上去 相当于撤销了最新的push



push -u 上游分支
git push origin master                      # 不会定义当前本地分支的upstream分支
git branch --set-upstream-to=origin/master  # 手动设置当前分支的上游分支分支
git push -u origin master                   # 1 设置上游分支 2 push
git pull origin master 简化为 git pull      # 设置了上游分支 pull 或 push时 就不用每次手动指定
在配置文件中表现为
  [branch "master"]
    remote = origin
    merge = refs/heads/master


https://segmentfault.com/a/1190000002783245  详细解释
1 git push的默认行为
在git的全局配置中，有一个push.default属性，其决定了git push操作的默认行为。
git config --global push.default 'option' # 可选值 nothing, current, upstream, simple, matching
  nothing  # push操作无效，除非显式指定远程分支，例如git push origin develop。
  current  # push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支。
  upstream # push当前分支到它的upstream分支上（实用于经常从本地分支push/pull到同一远程仓库的情景，叫central workflow）。
  simple   # 和upstream相似，不同点，simple必须保证本地分支和它的远程upstream分支同名，否则会拒绝push操作。
  matching # push所有本地和远程两端都存在的同名分支。
git2.0之前，push.default = matching；2.0之后，push.default = simple，没指定当前分支的upstream分支，会收到fatal提示。

upstream和downstream，如把仓库A中x分支push到仓库B分支y，则B中y叫A中x的upstream，x叫y的downstream。
注意这个upstream分支可以不同名，但通常都会使用同名分支作为upstream。


2 git pull的默认行为
git pull = git fetch + git merge，fetch更新本地仓库的remote tracking，即refs/remotes，refs/heads则无影响。
merge，若没设定当前分支的upstream，git不知道要合并哪个分支到当前分支，下面为设置上游分支
git branch --set-upstream-to=origin/<branch> develop 或 git push --set-upstream origin develop

若没有指定upstream，merge时会访问git config中当前分支merge的默认配置，配置下面内容指定某个分支的默认merge操作
  [branch "develop"]
      remote = origin
      merge = refs/heads/develop   # [1]为什么不是refs/remotes/develop?
git config branch.develop.merge refs/heads/develop   # 或者通过command-line直接设置
在develop分支git pull时，没指定upstream分支，根据config去merge origin/develop；指定upstream，则忽略config。

# [1]为什么merge = refs/heads/develop 而不是refs/remotes/develop?
因为这里merge指代的是我们想要merge的远程分支，是remote上的refs/heads/develop，文中即是origin上的refs/heads/develop，
这和我们在本地直接执行git merge是不同的(本地执行git merge origin/develop则是直接merge refs/remotes/develop)。




TortoiseGit
新建分支
  右键->拉取
  右键->新建分支 f_ipmgmmod
  右键->推送
  右键->切换     f_ipmgmmod

删除分支
  1 切换到其它分支 右键switch/checkout
  2 右键Browsereferences，或1时选branch后面的单个点按钮 "..."
  3 删除本地分支 选择heads  右侧列出所有本地分支 右键 选择Delete branch进行删除
  4 删除远程分支 选择remote 右侧列出所有远程分支 右键 选择Delete remote branch进行删除

不同分支合并代码
  现在有主分支master和分支day2.现在要把day2上的变更合并到主分支master上
  1 首先切换到目标分支master上。
  2 在master分支上查看提交记录,即show log一下。 右键 显示日志
  3 切换到源分支上                              点击右上角的分支
  4 选中你所有的提交，右键，Cherry pick selected commits
  5 选中你的提交记录
  这里要注意的一点就是：你想合并到哪个分支上，就要首先切换到该分支！

  此操作与上面的一样
  1 切换到要修改的分支
  2 显示日志
  3 点击左上角 切换到要复制的分支上
  4 找到目标提交
  5 右键 Cherry pick(摘取此提交)
  6 continue done

  如果采用
  右键 merge commit 某个提交 可能合并多个提交进来

还原
  1 没有commit的 右键 revert 选择文件
  2 已经commit的 右键 log 对某个提交 reset "XXX" to this 然后在执行上一步

右键没有pull
  选择revert，还原代码
  选择切换分支，如果 报git did not exit cleanly (exit code 128) ，选择clean up,清除一下。
  完成后，选择切换分支，之后再次切回原分支，即可显示pull。

使用Tortoise结合Git比较两个版本的差异
1、右键项目，TortoiseGit -------> Diff with previous version
2、单击出分支选择弹窗，进行选择要比较的两个分支
3、比较同个分支的两个不同的版本
    show log ----->通过按Shift 和鼠标左键, 可以选中两个版本, 接着再按鼠标右键, 选中Compare revisions, 就可以比较两个revision 了.

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all

查看当前分支是从哪个分支拉的
  TortoiseGit->pull->remote branch ...->remote branch  选定拉取的拉取远程分支

