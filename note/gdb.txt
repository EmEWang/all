


gdb启动
1 gdb ./my_exe         # 直接启动  run/r运行gdb调试
2 gdb ./my_exe core1   # 同时调试程序和core文件
3 gdb ./my_exe pid     # attach 到运行中的进程
4 gdb -p pid           # 调试正在运行的程序 同 gdb attach pid

gdb启动传递参数程序调试
1 gdb ./my_exe   # run [arg]
2 gdb --args ./my_exe [arg]   # run/r
3 gdb # exec-file my_exe -> set args [arg] -> run/r  # show args 查看设置的运行参数


gdb 启动参数  # gdb [opts] ./my_exe    gdb --help
--args              # 设置程序的运行参数
--symbols=SYMFILE   # 从指定文件中读取符号表   同 -s file
--se=FILE           # 从指定文件中读取符号表信息，并把他用在可执行文件中
--core=COREFILE     # 调试时core dump的core文件  同 -c file
--directory=DIR     # 加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径 同 -d dir
  以gdb ./my_exe方式启动，gdb会在PATH路径和当前目录中搜索my_exe的源文件，可用list/l命令，看gdb是否能列出源代码。



gdb调试命令 /后面表示命令的简写
help/h [cmd]          # 帮助
list/l  [line][func]  # 查看源码   l n 第n行前后10行;l 4,6 行范围;l func 查看函数
  l file:line ; l file:func 指定文件
info/i                # 查看各种信息
quit/q                # 退出gdb

break/b [line][func]  # 打断点   b n 第n行断点; b func 函数入口断点; b file:n; b file:func 指定文件
  b +offset/-offset 在当前行前/后offset停止; b addr 地址处停止; b 下一行停止
b where if condition  # 条件断点 如 循环体中break ... if i = 100 设置循环次数
i b                   # 显示断点
delete/d b_id         # 关闭断点
disable/enable b_id   # 禁用/启用断点，同时断点信息的 (Enb)域将变为 n、y
clear                 # 删除刚才停止处的断点
commands              # 命中断点时，列出将要执行的命令

set args [arg]        # 设置程序的参数   如 set args 1 2 3
show args             # 查看程序的参数
start                 # 运行程序，停在第一执行语句
restart/r             # 重新运行程序
run/r [arg]           # 运行程序  run-text 加载文本文件;run-bin 加载二进制文件
set var=val           # 设置变量  如 print n=1 或 set var n=1 后一种在变量名与gdb预定变量名一样时使用
print/p               # 显示变量/表达式的值
display               # 程序停止时显示变量和表达时
undisplay             # 不要显示表达式
examine/x             # 查看内存
backtrace/bt          # 显示堆栈

next/n                # 不进入的单步执行
step/s                # 进入的单步执行
finish                # 运行程序，直到当前函数完成返回到函数调用点，打印函数返回时的堆栈地址和返回值以及参数信息
until                 # 退出当前的循环体
i t                   # 显示线程
thread/t id           # 进入线程 id从1开始 后面有对应系统的tid 可用top -Hp pid查看当前进程的所有线程
continue/c            # 继续执行程序
ctrl+c                # 暂停
jump                  # 在源程序中的另一点开始运行
kill                  # 异常终止在gdb 控制下运行的程序
ptype                 # 显示一个数据结构（如一个结构或C++类）的内容
signal                # 将一个信号发送到正在运行的进程
watch                 # 设置一个监测点(数据断点) 被设置观察点的变量发生修改时，打印显示
i watch               # 显示观察点
whatis                # 显示变量或函数类型

frame/f               # 切换函数的栈帧
up                    # 上移栈帧，使另一函数成为当前函数
down                  # 下移栈帧，使得另一个函数成为当前函数

search text           # 显示在当前文件中包含text串的下一行
reverse-search text   # 该命令可以显示包含text 的前一行
call func             # 调用代码函数，显示函数返回值(若不是void) 如 call add(3,5)

path <dir>            # 设定程序的运行路径
show paths            # 查看程序的运行路径
set environment varname [=value]  # 设置环境变量 如 set env USER=hchen
show environment [varname]        # 查看环境变量。
cd <dir>              # 改变当前工作目录 相当于shell的cd命令。
pwd                   # 显示当前的所在目录。
i terminal            # 显示你程序用到的终端的模式。
使用重定向控制程序输出  # 如 run > outfile
tty                   # 可以指写输入输出的终端设备 如 tty /dev/ttyb

set follow-fork-mode child  # Makefile项目管理：选择跟踪父子进程（fork()）




1 查看变量/表达式
print/p  expr         # 查看变量 或 表达式
print/p  *array@len   # 查看数组（array是数组指针，len是需要数据长度）
print/p file::var     # 查看file中的变量var
print/p func::var     # 查看func中的变量var
print [opt --] [/fmt] expr #
opt            参数        功能
-address       on默认|off  查看指针变量值时，是否同时打印其内存地址。等同于单独执行 set print address on|off。
-array         on|off默认  是否以便于阅读的格式输出数组中的元素。等同于单独执行 set printf array on|off。
-array-indexes on|off默认  对于非字符类型数组，在打印数组中每个元素值的同时，是否同时显示每个元素对应的数组下标。
                           等同于单独执行 set print array-indexes on|off。
-pretty        on|off默认  以便于阅读的格式打印某个结构体变量的值。等同于单独执行 set print pretty on|off。
/fmt    功 能
  /x  # 以十六进制的形式打印出整数。
  /d  # 以有符号、十进制的形式打印出整数。
  /u  # 以无符号、十进制的形式打印出整数。
  /o  # 以八进制的形式打印出整数。
  /t  # 以二进制的形式打印出整数。
  /f  # 以浮点数的形式打印变量或表达式的值。
  /c  # 以字符形式打印变量或表达式的值。
opt 参数和 /fmt 或者 expr 之间，必须用--分隔
print不指定任何opt参数时，print和/fmt之间不用添加空格，如 print/x num # 以十六进制的形式输出num整形变量的值


display expr       # 查看变量或表达式的值 每当程序暂停执行时，GDB调试器都会自动帮我们打印出来，print不会
display/fmt expr   # /fmt 用法同print
display和/fmt之间不要留有空格。以 /x 为例，应写为 display/x expr。
info display       # 对于使用 display 命令查看的目标变量或表达式，都会被记录在一张列表（称为自动显示列表）中
  Auto-display expressions now in effect:
  Num Enb Expression
  2:      y      /t result
  1:      y      num
  Num   # 为各变量或表达式的编号，GDB 调试器为每个变量或表达式都分配有唯一的编号；
  Enb   # 当前各个变量/表达式是处于激活状态y还是禁用状态n，每次程序停止执行，y则会打印其值；反之不会。
  Expression # 表示查看的变量或表达式。
  undisplay num1 num2   # 删除自动显示列表中的变量或表达式 同 delete display num1 num2
  disable display num1 num2  # 禁用自动显示列表中处于激活状态下的变量或表达式
  enable display num1 num2   # 激活当前处于禁用状态的变量或表达式


2 查看内存
examine /<n/f/u>  <addr>  # 简写为 x
  n # 正整数，表示需要显示的内存单元的个数，即从当前地址向后显示n个内存单元的内容，一个内存单元的大小由第三个参数u定义。
  f # 表示输出格式(见上/fmt)
  u # 多少个字节作为一个内存单元(b 单字节；h 双字节；w 四字节 默认；g 八字节)
  addr # 内存地址
  x /10cw pFilePath  # pFilePath为一个字符串指针，指针占4字节


3 查看栈信息
backtrace [-n][n]     # 简写bt
  n         # 表示只打印栈顶上n层的栈信息
  -n        # 表示只打印栈底上n层的栈信息
  无参数     # 表示打印所有栈信息





