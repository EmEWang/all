



TCP/IP的分层
用户进程   用户进程   用户进程   用户进程     应用层
------------------------↑---------------------------
                  TCP   |   UDP               运输层
---------------------↖↘-↓-↙↗-----------------------
               ICMP ← → IP ← → IGMP　　　　　 网络层
------------------------?---------------------------
             ARP ← → 硬件接口 ← → RARP        链路层
------------------------?--------------------------
                      媒体                    物理层

大多数Unix系统的文件/etc/services都包含了人们熟知的端口号    grep telnet /etc/services   telnet 23/tcp  使用tcp端口号23

协议中校验和算法
1将校验和字段置为0。
2将每两个字节（16位）相加（二进制求和）直到最后得出结果，若出现最后还剩一个字节继续与前面结果相加。
3(溢出)将高16位与低16位相加，直到高16位为0为止。
4将最后的结果（二进制）取反。




服务器和客户端程序的流程
https://blog.csdn.net/chen1415886044/article/details/104455919

client                                   server
------------------------------------------------------- 三次握手
connect()   | --- SYN seq=x ----------> | LISTEN listen()
SYN_SENT    |                           | SYN_RCVD
            | ↙-- SYN seq=y, ACK=x+1 -↗ |
ESTABLISHED | --- ACK=y+1 ------------↘ |
            |                           | ESTABLISHED
---------------- -------------------------------------- 数据传输
write()     | --- seq=x+1 ACK=y+1 ----↘ |
            | <---- ACK=x+2 ----------- | read()
---------------- -------------------------------------- 四次挥手
close()     | -- FIN seq=x+2 ACK=y+1 -↘ |
FIN_WAIT_1  |                         ↗ | CLOSE_WAIT
            | ↙---- ACK=x+2 --------↗   | close()
FIN_WAIT_2  | ↙- FIN seq=y+1----------↗ | LAST_ACK
TIME_WAIT   |                           |
            | ↖-- ACK=y+1 ------------↘ |
CLOSED      |                           | CLOSED

代码见test2/client.c server.c




深刻理解socket编程中的read&&write https://zhuanlan.zhihu.com/p/71799852

1 总图
socket IO -> | nread = read(sock_fd, buf, buflen)           <--- read
             | nwrite = write(sock_fd, buf, tosend - nsend) <--- write  tosend > nsend
             blocking的write只有在缓冲区足以放下整个buffer时才返回 与blocking read并不相同
             nonblock write 则是返回能够放下的字节数 之后在调用返回 -1(errno = EAGAIN 或 WOULDBLOCK)
             对于blocking write 有个特例 当write正阻塞等待时对面关闭了socket
             则write会立即将剩余缓冲区填满并返回所写的字节数，在调用write失败(connection reset by peer)


read -> | 过程 | nread > 0  读取到正常数据
               | nread == 0 套接字关闭 读到 FIN break
               | nread < 0 | errno == EINTR 表示操作被中断 可以继续读取
                           | errno == EWOULDBLOCK 当套接字sock_fd是非阻塞时且当前没有数据可以读取 返回这个错误码
                                                  如果阻塞时 表示这个操作本来会被阻塞住
                           | errno == EAGAIN  表示现在没有数据 过会再重试
                                              EAGAIN == EWOULDBLOCK
        | 阻塞&非阻塞区别 | 只要接收缓冲区(receive buffer)有数据 立即返回
                         | (receive buffer)为空时 blocking模式才会等待
                         | nonblock模式下会立即返回 -1 errno = (EAGAIN 或 EWOULDBLOCK)
        | 异常处理 | 客户端主动关闭 发送FIN
                  | 服务端收到EOF 返回
                  | 虽然客户端发送了FIN 表示客户端不会主动发送数据了 但是服务端可以继续写
                  | 加入客户端是异常终止的(OS帮助发送FIN) 当机器再次收到该socket的消息时 客户端会回应RST
                    因为拥有该socket的进程已经终止 服务端继续写 操作系统会给进程发送SIGPIP 导致服务端异常终止
                  | 如果OS异常崩溃之类问题 服务器收不到FIN信号 可能永远卡住 所以服务器最好需要设计自动检测机制
                    或者心跳机制 来实现TCP通信的完全可控

write-> | nwrite > 0 | 发送成功 nsend += nwrite
        | nwrite == 0 | 套接字关闭 FIN break
        | 其他 | errno == EINTR 连接正常 操作被中断 可以继续发送 continue
               | errno == (EAGAIN 或 EWOULDBLOCK) 连接正常 但发送区没有空间 等待下一次发送 continue
               | 其他 出错 break

2 read/write 回溯
  2.1 write成功返回，只是buf中的数据被复制到了kernel中的TCP发送缓冲区。
  至于数据什么时候被发往网络，什么时候被对方主机接收，什么时候被对方进程读取，系统调用层面不会给予任何保证和通知。
  2.2 对于每个socket，拥有自己的send buffer和receive buffer。
  sysctl net.core.wmem_default  #同sysctl net/core/wmem_default  同手动操作/proc/sys/net/core/wmem_default
  sysctl net.core.wmem_max      #sysctl  修改/proc/sys/下的系统变量 . 可以用 / 代替
  2.3 已经发送到网络的数据依然暂存在send buffer中，只有收到对方的ack后，kernel才从buffer中清除这一部分数据，为后续发送数据腾出空间。
  接收端将收到的数据暂存在receive buffer中，自动进行确认。

3 blocking（默认）和nonblock模式下read/write行为的区别
  3.1 read总是在接收缓冲区有数据时立即返回，而不是等到给定的read buffer填满时返回。返回值就是读取的字节数，同时内核receivebuffer空间会增加相应的大小。只有当receive buffer为空时，blocking模式才会等待，而nonblock模式下会立即返回-1（errno = EAGAIN或EWOULDBLOCK）
  3.2 阻塞与非阻塞write返回值没有区分，都是 <0：出错，=0：连接关闭，>0发送数据大小，特别：返回值 <0时并且(errno == EINTR || errno == EWOULDBLOCK || errno == EAGAIN)的情况下认为连接是正常的，继续发送。只是阻塞模式下write会阻塞着发送数据，非阻塞模式下如果暂时无法发送数据会返回，不会阻塞着 write，因此需要循环发送。

对于blocking的write有个特例：当write正阻塞等待时对面关闭了socket，则write则会立即将剩余缓冲区填满并返回所写的字节数，再次调用则write失败（connection reset by peer）

4 read/write对连接异常的反馈行为：
对应用程序来说，与另一进程的TCP通信其实是完全异步的过程：
  1 我并不知道对面什么时候、能否收到我的数据
  2 我不知道什么时候能够收到对面的数据
  3 我不知道什么时候通信结束（主动退出或是异常退出、机器故障、网络故障等等）
对于1和2，采用write() -> read() -> write() -> read() ->...的序列，通过blocking read或者nonblock read+轮询的方式，应用程序基于可以保证正确的处理流程。而且对于3，kernel将这些事件的“通知”通过read/write的结果返回给应用层。这个也是TCP通信的难点。

假设A机器上的一个进程a正在和B机器上的进程b通信,当b进程终止时，无论应用程序是否显式关闭了socket（OS会负责在进程结束时关闭所有的文件描述符，对于socket，则会发送一个FIN包到对面）。
  1 同步通知：进程a对已经收到FIN的socket调用read，如果已经读完了receive buffer的剩余字节，则会返回EOF:0
  2 异步通知：如果进程a正阻塞在read调用上（前面已经提到，此时receive buffer一定为空，因为read在receive buffer有内容时就会返回），则read调用立即返回EOF，进程a被唤醒。

socket在收到FIN后，虽然调用read会返回EOF，但进程a依然可以其调用write，因为根据TCP协议，收到对方的FIN包只意味着对方不会再发送任何消息。 在一个双方正常关闭的流程中，收到FIN包的一端将剩余数据发送给对面（通过一次或多次write），然后关闭socket。但是事情远远没有想象中简单。
假如b进程是异常终止的，发送FIN包是OS代劳的，b进程已经不复存在，当机器再次收到该socket的消息时，会回应RST（因为拥有该socket的进程已经终止）。a进程对收到RST的socket调用write时，操作系统会给a进程发送SIGPIPE，默认处理动作是终止进程，知道你的进程为什么毫无征兆地死亡了吧
不同于b进程退出（此时OS会负责为所有打开的socket发送FIN包），当B机器的OS崩溃（注意不同于人为关机，因为关机时所有进程的退出动作依然能够得到保证）/主机断电/网络不可达时，a进程根本不会收到FIN包作为连接终止的提示。
如果a进程阻塞在read上，那么结果只能是永远的等待。
如果a进程先write然后阻塞在read，由于收不到B机器TCP/IP栈的ack，TCP会持续重传12次（时间跨度大约为9分钟），然后在阻塞的read调用上返回错误：ETIMEDOUT/EHOSTUNREACH/ENETUNREACH
假如B机器恰好在某个时候恢复和A机器的通路，并收到a某个重传的pack，因为不能识别所以会返回一个RST，此时a进程上阻塞的read调用会返回错误ECONNREST恩，socket对这些错误还是有一定的反馈能力的，前提是在对面不可达时你依然做了一次write调用，而不是轮询或是阻塞在read上，那么总是会在重传的周期内检测出错误。如果没有那次write调用，应用层永远不会收到连接错误的通知。

5 还需要做什么
  5.1 使用TCP的KEEPALIVE功能
cat /proc/sys/net/ipv4/tcp_keepalive_time    #7200    每2小时（7200秒）启动一次，发送第一个probe（探测包）
cat /proc/sys/net/ipv4/tcp_keepalive_intvl   #75      如果在75秒内没有收到对方应答则重发probe
cat /proc/sys/net/ipv4/tcp_keepalive_probes  #9       当连续9个probe没有被应答时，认为连接已断
  5.2 进行应用层的心跳



混杂模式
默认接收数据，目的MAC是本地地址，才会接收。若想接收所有经过网卡的数据流，而不论其目的MAC是否是它，这需要设置网卡为混杂模式。
ifconfig eth0 promisc   设置混杂模式 (需要管理员权限)
ifconfig eth0 -promisc  取消混杂模式
ifconfig                查看  flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500 是否有 PROMISC

通过代码给 Linux 网卡设置混杂模式
#include <net/if.h>// struct ifreq
#include <sys/ioctl.h> // ioctl、SIOCGIFADDR
#include <sys/socket.h> // socket
#include <netinet/ether.h> // ETH_P_ALL
#include <netpacket/packet.h> // struct sockaddr_ll

struct ifreq ethreq;    //网络接口地址

strncpy(ethreq.ifr_name, "eth0", IFNAMSIZ);         //指定网卡名称
if(-1 == ioctl(sock_raw_fd, SIOCGIFINDEX, &ethreq)) //获取网络接口
{
  perror("ioctl");
  close(sock_raw_fd);
  exit(-1);
}

ethreq.ifr_flags |= IFF_PROMISC;
if(-1 == ioctl(sock_raw_fd, SIOCSIFINDEX, &ethreq)) //网卡设置混杂模式
{
  perror("ioctl");
  close(sock_raw_fd);
  exit(-1);
}


获取链路层的数据包
ssize_t recvfrom(int sockfd, void *buf, size_t nbytes,int flags,struct sockaddr *from, socklen_t *addrlen);
参数：
sockfd:原始套接字
buf：接收数据缓冲区
nbytes:接收数据缓冲区的大小
flags：套接字标志(常为0)
from：这里没有用，写 NULL
addrlen：这里没有用，写 NULL

返回值：
成功：接收到的字符数
失败：-1

unsigned char buf[1024] = {0};
int sock_raw_fd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
int len = recvfrom(sock_raw_fd, buf, sizeof(buf), 0, NULL, NULL); //获取链路层的数据包
printf("len = %d\n", len);


发送自定义的数据包：
ssize_t sendto(int sockfd,const void *buf,size_t nbytes,int flags,const struct sockaddr *to,socklen_t addrlen);
参数：
sockfd： 原始套接字
buf： 发送数据缓冲区
nbytes: 发送数据缓冲区的大小
flags： 一般为 0
to： 本机网络接口，指发送的数据应该从本机的哪个网卡出去，而不是以前的目的地址
addrlen：to 所指向内容的长度

返回值
成功：发送数据的字符数
失败：-1

struct sockaddr_ll sll;                 //原始套接字地址结构
bzero(&sll, sizeof(sll));
sll.sll_ifindex =ethreq.ifr_ifindex;   //将网络接口赋值给原始套接字地址结构

// send_msg, msg_len 这里还没有定义，模拟一下
int len = sendto(sock_raw_fd, send_msg, msg_len, 0 , (struct sockaddr *)&sll, sizeof(sll));  // 发送数据
if(len == -1)
{
  perror("sendto");
}


IP结构体:
struct iphdr
{
#if __BYTE_ORDER == __LITTLE_ENDIAN
    unsigned int ihl:4;
    unsigned int version:4;
#elif __BYTE_ORDER == __BIG_ENDIAN
    unsigned int version:4; //版本号
    unsigned int ihl:4; //首部长度(4字节为单位)
#else
# error "Please fix "
#endif
    u_int8_t tos; //服务类型
    u_int16_t tot_len; //IP包总长度
    u_int16_t id; //标识
    u_int16_t frag_off; //是否分片
    u_int8_t ttl; //生存时间
    u_int8_t protocol; //上层协议
    u_int16_t check; //校验和
    u_int32_t saddr; //源IP地址
    u_int32_t daddr; //目的IP地址
};

UDP首部:
#ifdef __FAVOR_BSD
struct udphdr
{
u_int16_t uh_sport;
u_int16_t uh_dport;
u_int16_t uh_ulen;
u_int16_t uh_sum;
};
else
struct{
u_int16_t source; //源端口
u_int16_t dest; //目的端口
u_int16_t len;  //UDP包的长度
u_int16_t check; //校验和
};
#endif

TCP首部:
struct tcphdr
{
    u_int16_t source;   //TCP源端口
    u_int16_t dest;      //TCP目的端口
    u_int32_t seq;       //序列号
    u_int32_t ack_seq;  //确认序列号
# if __BYTE_ORDER == __LITTLE_ENDIAN
    u_int16_t res1:4;
    u_int16_t doff:4;
    u_int16_t fin:1;
    u_int16_t syn:1;
    u_int16_t rst:1;
    u_int16_t psh:1;
    u_int16_t ack:1;
    u_int16_t urg:1;
    u_int16_t res2:2;
# elif __BYTE_ORDER == __BIG_ENDIAN
    u_int16_t doff:4;
    u_int16_t res1:4;
    u_int16_t res2:2;
    u_int16_t urg:1;
    u_int16_t ack:1;
    u_int16_t psh:1;
    u_int16_t rst:1;
    u_int16_t syn:1; //请求连接标志
    u_int16_t fin:1;
# else
#   error "Adjust your defines"
# endif
    u_int16_t window;  //滑动窗口的大小
    u_int16_t check;   //校验和
    u_int16_t urg_ptr;  //紧急字段指针
};

ICMP:
struct icmp
{
u_int8_t  icmp_type;    /* type of message, see below 类型 */
u_int8_t  icmp_code;    /* type sub code 代码*/
u_int16_t icmp_cksum;    /* ones complement checksum of struct校验和 */
union
{
u_char ih_pptr;        /* ICMP_PARAMPROB */
struct in_addr ih_gwaddr;    /* gateway address */
struct ih_idseq        /* echo datagram */
{
u_int16_t icd_id;
u_int16_t icd_seq;
} ih_idseq;
u_int32_t ih_void;

/* ICMP_UNREACH_NEEDFRAG -- Path MTU Discovery (RFC1191) */
struct ih_pmtu
{
u_int16_t ipm_void;
u_int16_t ipm_nextmtu;
} ih_pmtu;

struct ih_rtradv
{
u_int8_t irt_num_addrs;
u_int8_t irt_wpa;
u_int16_t irt_lifetime;
} ih_rtradv;
} icmp_hun;
#define    icmp_pptr    icmp_hun.ih_pptr
#define    icmp_gwaddr    icmp_hun.ih_gwaddr
#define    icmp_id        icmp_hun.ih_idseq.icd_id
#define    icmp_seq    icmp_hun.ih_idseq.icd_seq
#define    icmp_void    icmp_hun.ih_void
#define    icmp_pmvoid    icmp_hun.ih_pmtu.ipm_void
#define    icmp_nextmtu    icmp_hun.ih_pmtu.ipm_nextmtu
#define    icmp_num_addrs    icmp_hun.ih_rtradv.irt_num_addrs
#define    icmp_wpa    icmp_hun.ih_rtradv.irt_wpa
#define    icmp_lifetime    icmp_hun.ih_rtradv.irt_lifetime
union
{
struct
{
u_int32_t its_otime;
u_int32_t its_rtime;
u_int32_t its_ttime;
} id_ts;
struct
{
struct ip idi_ip;
/* options and then 64 bits of data */
} id_ip;
struct icmp_ra_addr id_radv;
u_int32_t   id_mask;
u_int8_t    id_data[1]; //icmp数据
} icmp_dun;
#define    icmp_otime    icmp_dun.id_ts.its_otime
#define    icmp_rtime    icmp_dun.id_ts.its_rtime
#define    icmp_ttime    icmp_dun.id_ts.its_ttime
#define    icmp_ip        icmp_dun.id_ip.idi_ip
#define    icmp_radv    icmp_dun.id_radv
#define    icmp_mask    icmp_dun.id_mask
#define    icmp_data    icmp_dun.id_data
};

IP首部长度为20个字节,TCP首部长度为20个字节，UDP首部长度为8个字节, ICMP的首部长度为8个字节。




原始套接字
https://blog.51cto.com/u_13291771/2792605
sock_raw（注意一定要在root下使用）原始套接字编程可以接收到本机网卡上的数据帧或者数据包,一共可以有3种方式创建这种socket
  1.socket(AF_INET, SOCK_RAW, IPPROTO_TCP|IPPROTO_UDP|IPPROTO_ICMP) 可得到原始的IP包 可以自己组织TCP,UDP,ICMP包
  不能用IPPROTO_IP，因为如果是用了IPPROTO_IP，系统根本就不知道该用什么协议。   基于IP 数据包的编程
  2.socket(PF_PACKET, SOCK_RAW, htons(ETH_P_IP|ETH_P_ARP|ETH_P_ALL))  PF_PACKET 是基于数据链路层的编程
  能收到发往本地的MAC帧 能收到从本机发出去的MAC帧(第3个参数为ETH_P_ALL) 能接收到非发住本地的MAC帧(网卡设置为promisc混杂模式)
  ETH_P_IP    0X800  只接收发往本机的mac的ip类型的数据帧
  ETH_P_ARP   0X806  只接收发往本机的arp类型的数据帧
  ETH_P_RARP  0x8035 只接受发往本机的rarp类型的数据帧
  ETH_P_ALL   0X0003 接收发往本机的MAC所有类型ip,arp,rarp数据帧，接收从本机发出去的数据帧，混杂模式打开的情况下，会接收到非发往本地的MAC数据帧
  此时设备无关的物理地址使用struct sockaddr_ll
  3.socket(AF_INET, SOCK_PACKET, htons(ETH_P_IP|ETH_P_ARP|ETH_P_ALL))过时了,不要用啊

1.介绍
在linux中提供了PF_PACKET接口可以操作链路层的数据。
2.使用方法
sock_raw = socket(PF_SOCKET, SOCK_RAW, htons(ETH_P_ALL));  #定义
int len = recvfrom(sock_raw, buf, sizeof(buf), 0, NULL, NULL); #就可以利用函数sendto和recefrom来读取和发送链路层的数据包了
发送ARP包为htons(ETH_P_ARP)，IP包为ETH_P_IP，可查看文件/usr/include/linux/if_ether.h文件看到所有支持的协议。

链路层数据包的其中一种情况
unsigned char buf[1024] = {
    0xb8, 0x88, 0xe3, 0xe1, 0x10, 0xe6, // dst_mac: b8:88:e3:e1:10:e6
    0xc8, 0x9c, 0xdc, 0xb7, 0x0f, 0x19, // src_mac: c8:9c:dc:b7:0f:19
    0x08, 0x00,                         // 类型：0x0800 IP协议    前14个字节为mac组
    // …… ……
};
sprintf(dst_mac,"%02x:%02x:%02x:%02x:%02x:%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]); #从buf里提取目的mac
sprintf(src_mac,"%02x:%02x:%02x:%02x:%02x:%02x", buf[6], buf[7], buf[8], buf[9], buf[10], buf[11]); #从buf里提取源mac
if(buf[12]==0x08 && buf[13]==0x00){}     #判断是否为IP数据包
if(buf[12]==0x08 && buf[13]==0x06){}     #判断是否为ARP数据包
if(buf[12]==0x80 && buf[13]==0x35){}     #判断是否为RARP数据包

3.在使用SOCK_RAW, SOCK_DGRAM和SOCK_PACKET的区别
在socket的第一个参数使用PF_PACKET的时候，上述三种socket的类型都可以使用。但是有区别。
  (1)使用SOCK_RAW发送的数据必须包含链路层的协议头，接受得到的数据包，包含链路层协议头。而使用SOCK_DGRAM则都不含链路层的协议头。
  (2)SOCK_PACKET也是可以使用的，但是已经废弃，以后不保证还能支持，不推荐使用。
  (3)在使用SOCK_RAW或SOCK_DGRAM和SOCK_PACKET时，在sendto和recvfrom中使用的地址类型不同，前两者使用sockaddr_ll类型的地址，而后者使用sockaddr类型的地址。
  (4)如socket的第一个参数使用PF_INET，第二个参数使用SOCK_RAW，则可以得到原始的IP包。




AF_INET和PF_INET的细微不同
    AF 表示ADDRESS FAMILY 地址族
    PF 表示PROTOCL FAMILY 协议族
但这两个宏定义是一样的 所以使用哪个都没有关系

Winsock2.h中
#define AF_INET 0
#define PF_INET AF_INET
所以在windows中AF_INET与PF_INET完全一样

而在Unix/Linux系统中，在不同的版本中这两者有微小差别
对于BSD,是AF,对于POSIX是PF
在函数socketpair与socket的domain参数中有AF_UNIX,AF_LOCAL,AF_INET,PF_UNIX,PF_LOCAL,PF_INET.
这几个参数有AF_UNIX=AF_LOCAL, PF_UNIX=PF_LOCAL, AF_LOCAL=PF_LOCAL, AF_INET=PF_INET.
**建议:对于socketpair与socket的domain参数,使用PF_LOCAL系列,
而在初始化套接口地址结构时,则使用AF_LOCAL.
例如:
     z = socket(PF_LOCAL, SOCK_STREAM, 0);
     adr_unix.sin_family = AF_LOCAL;


setsockopt\getsockopt
int getsockopt(int sock, int level, int optname, void *optval, socklen_t *optlen);
int setsockopt(int sock, int level, int optname, const void *optval, socklen_t optlen);
获取或者设置与某个套接字关联的选 项。选项可能存在于多层协议中，它们总会出现在最上面的套接字层。当操作套接字选项时，选项位于的层和选项的名称必须给出。为了操作套接字层的选项，应该 将层的值指定为SOL_SOCKET。为了操作其它层的选项，控制选项的合适协议号必须给出。例如，为了表示一个选项由TCP协议解析，层应该设定为协议号TCP。
参数：
sock：将要被设置或者获取选项的套接字。
    level：选项所在的协议层。
    optname：需要访问的选项名。
    optval：对于getsockopt()，指向返回选项值的缓冲。对于setsockopt()，指向包含新选项值的缓冲。
    optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。作为出口参数时，选项值的实际长度。对于setsockopt()，现选项的长度。
    参数详细说明：
        SOL_SOCKET:通用套接字选项.
        IPPROTO_IP:IP选项.
        IPPROTO_TCP:TCP选项.
        optname指定控制的方式(选项的名称),我们下面详细解释
        optval获得或者是设置套接字选项.根据选项名称的数据类型进行转换
返回说明：
    成功执行时，返回0。失败返回-1，errno被设为以下的某个值
        EBADF：sock不是有效的文件描述词
        EFAULT：optval指向的内存并非有效的进程空间
        EINVAL：在调用setsockopt()时，optlen无效
        ENOPROTOOPT：指定的协议层不能识别选项
        ENOTSOCK：sock描述的不是套接字

SO_RCVBUF和SO_SNDBUF每个套接口都有一个发送缓冲区和一个接收缓冲区，使用这两个套接口选项可以改变缺省缓冲区大小。
// 接收缓冲区
int nRecvBuf=32*1024; //设置为32K
setsockopt(s,SOL_SOCKET,SO_RCVBUF,(const char*)&nRecvBuf,sizeof(int));
//发送缓冲区
int nSendBuf=32*1024;//设置为32K
setsockopt(s,SOL_SOCKET,SO_SNDBUF,(const char*)&nSendBuf,sizeof(int));
注意：当设置TCP套接口接收缓冲区的大小时，函数调用顺序是很重要的，因为TCP的窗口规模选项是在建立连接时用SYN与对方互换得到的。对于客 户，O_RCVBUF选项必须在connect之前设置；对于服务器，SO_RCVBUF选项必须在listen前设置。

用法
    1.closesocket（一般不会立即关闭而经历TIME_WAIT的过程）后想继续重用该socket：
    BOOL bReuseaddr=TRUE;
    setsockopt(s,SOL_SOCKET ,SO_REUSEADDR,(const char*)&bReuseaddr,sizeof(BOOL));

　　2. 如果要已经处于连接状态的soket在调用closesocket后强制关闭，不经历TIME_WAIT的过程：
BOOL bDontLinger = FALSE;
setsockopt(s,SOL_SOCKET,SO_DONTLINGER,(const char*)&bDontLinger,sizeof(BOOL));

　　3.在send(),recv()过程中有时由于网络状况等原因，发收不能预期进行,而设置收发时限：
　　int nNetTimeout=1000;//1秒
　　//发送时限
　　setsockopt(socket，SOL_S0CKET,SO_SNDTIMEO，(char *)&nNetTimeout,sizeof(int));
　　//接收时限
　　setsockopt(socket，SOL_S0CKET,SO_RCVTIMEO，(char *)&nNetTimeout,sizeof(int));

　　4.在send()的时候，返回的是实际发送出去的字节(同步)或发送到socket缓冲区的字节
    (异步);系统默认的状态发送和接收一次为8688字节(约为8.5K)；在实际的过程中发送数据
    和接收数据量比较大，可以设置socket缓冲区，而避免了send(),recv()不断的循环收发：
　　// 接收缓冲区
　　int nRecvBuf=32*1024;//设置为32K
　　setsockopt(s,SOL_SOCKET,SO_RCVBUF,(const char*)&nRecvBuf,sizeof(int));
　　//发送缓冲区
　　int nSendBuf=32*1024;//设置为32K
　　setsockopt(s,SOL_SOCKET,SO_SNDBUF,(const char*)&nSendBuf,sizeof(int));

　　5. 如果在发送数据的时，希望不经历由系统缓冲区到socket缓冲区的拷贝而影响程序的性能：
　　int nZero=0;
　　setsockopt(socket，SOL_S0CKET,SO_SNDBUF，(char *)&nZero,sizeof(nZero));

　　6.同上在recv()完成上述功能(默认情况是将socket缓冲区的内容拷贝到系统缓冲区)：
　　int nZero=0;
　　setsockopt(socket，SOL_S0CKET,SO_RCVBUF，(char *)&nZero,sizeof(int));

　　7.一般在发送UDP数据报的时候，希望该socket发送的数据具有广播特性：
　　BOOL bBroadcast=TRUE;
　　setsockopt(s,SOL_SOCKET,SO_BROADCAST,(const char*)&bBroadcast,sizeof(BOOL));

　　8.在client连接服务器过程中，如果处于非阻塞模式下的socket在connect()的过程中可以设置connect()延时,直到accpet()被呼叫(本函数设置只有在非阻塞的过程中有显著的作用，在阻塞的函数调用中作用不大)
　　BOOL bConditionalAccept=TRUE;
　　setsockopt(s,SOL_SOCKET,SO_CONDITIONAL_ACCEPT,(const char*)&bConditionalAccept,sizeof(BOOL));

　　9.如果在发送数据的过程中(send()没有完成，还有数据没发送)而调用了closesocket(),以前我们一般采取的措施是"从容关 闭"shutdown(s,SD_BOTH),但是数据是肯定丢失了，如何设置让程序满足具体应用的要求(即让没发完的数据发送出去后在关闭 socket)？
　　struct linger {
　　　　u_short l_onoff;
　　　　u_short l_linger;
　　};
　　linger m_sLinger;
　　m_sLinger.l_onoff=1;//(在closesocket()调用,但是还有数据没发送完毕的时候容许逗留)
　　// 如果m_sLinger.l_onoff=0;则功能和2.)作用相同;
　　m_sLinger.l_linger=5;//(容许逗留的时间为5秒)
　　setsockopt(s,SOL_SOCKET,SO_LINGER,(const char*)&m_sLinger,sizeof(linger));




sockaddr/sockaddr_in/in_addr

struct sockaddr (/usr/include/bits/socket.h)
{
    unsigned short sa_family;   /* address family, AF_xxx */
    char sa_data[14];           /* 14 bytes of protocol address */
};

sa_family是地址家族，一般都是“AF_xxx”的形式。通常都是AF_INET，AF_INET表示为ip地址类型。
备注:/usr/include/bits/sockaddr.h
typedef unsigned short int sa_family_t;
#define __SOCKADDR_COMMON(sa_prefix) sa_family_t sa_prefix##family

sa_data是14字节协议地址。此数据结构用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息。
但一般编程中并不直接针对此数据结构操作，而是使用另一个与sockaddr等价的数据结构sockaddr_in

sockaddr的缺陷是 sa_data把目标地址和端口信息混在一起了
sockaddr_in解决了sockaddr的缺陷，把port和addr 分开储存在两个变量中
二者的占用的内存大小是一致的，因此可以互相转化，从这个意义上说，他们并无区别。
sockaddr常用于bind、connect、recvfrom、sendto等函数的参数，指明地址信息。是一种通用的套接字地址。
sockaddr_in 是internet环境下套接字的地址形式。所以在网络编程中我们会对sockaddr_in结构体进行操作。使用sockaddr_in来建立所需的信息，最后使用类型转化就可以了。
一般先把sockaddr_in变量赋值后，强制类型转换后传入用sockaddr做参数的函数：sockaddr_in用于socket定义和赋值；sockaddr用于函数参数。
二者长度一样，都是16个字节，即占用的内存大小是一致的，因此可以互相转化。二者是并列结构，指向sockaddr_in结构的指针也可以指向sockaddr。

struct sockaddr_in ((/usr/include/netinet/in.h))
{
    short int sin_family;               /* Address family */
    unsigned short int sin_port;        /* Port number */
    struct in_addr sin_addr;            /* Internet address */
    unsigned char sin_zero[8];          /* Same size as struct sockaddr */
};

struct in_addr
{
    in_addr_t; s_addr;
};

typedef uint32_t in_addr_t;(/usr/include/netinet/in.h)

sin_port和sin_addr都必须是网络字节序（NBO），一般可视化的数字都是主机字节序（HBO）
in_addr 用来存放32位IP地址

typedef struct in_addr
{
    union
    {
        struct
        {
            unsigned char s_b1,
            s_b2,
            s_b3,
            s_b4;
        } S_un_b;  //An IPv4 address formatted as four u_chars.
        struct
        {
            unsigned short s_w1,
            s_w2;
        } S_un_w;  //An IPv4 address formatted as two u_shorts
        unsigned long S_addr;
    } S_un;
} IN_ADDR;



sin_family指代协议族，在socket编程中只能是AF_INET
sin_port存储端口号（使用网络字节顺序）
sin_addr存储IP地址，使用in_addr这个数据结构
sin_zero是为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节。
s_addr按照网络字节顺序存储IP地址

sockaddr_in和sockaddr是并列的结构，指向sockaddr_in的结构体的指针也可以指向
sockadd的结构体，并代替它。也就是说，你可以使用sockaddr_in建立你所需要的信息,
在最后用进行类型转换就可以了bzero((char*)&mysock,sizeof(mysock));//初始化
mysock结构体名
mysock.sa_family=AF_INET;
mysock.sin_addr.s_addr=inet_addr("192.168.0.1");
……
等到要做转换的时候用：
（struct sockaddr*）mysock


inet_addr()作用是将一个IP字符串转化为一个网络字节序的整数值，用于sockaddr_in.sin_addr.s_addr。
inet_ntoa()作用是将一个sin_addr结构体输出成IP字符串(network to ascii)
htons()作用是将端口号由主机字节序转换为网络字节序的整数值。(host to net)
htonl()作用和htons()一样，不过它针对的是32位的（long），而htons()针对的是两个字节，16位的（short）。
与htonl()和htons()作用相反的两个函数是：ntohl()和ntohs()。


三种给socket复制地址等方法
inet_aton(server_addr_string, &myaddr.sin_addr);
myaddr.sin_addr.s_addr = inet_addr("192.168.1.2");
INADDR_ANY转不转NBO随便
myaddr.sin_addr.s_addr = htons(INADDR_ANY);
myaddr.sin_addr.s_addr = INADDR_ANY;

两种给socket复制端口的方法
myaddr.sin_port = htons(1234);
0 随机端口 转不转NBO随便
myaddr.sin_port = htons(0);
myaddr.sin_port = 0;
————————————————





socket
   1.socket()
   2.bind()
   3.connect()
   4.listen()
   5.accept()
   6.send() 和recv()
   7.sendto() 和recvfrom()
   8.close() 和shutdown()
   9.getpeername()
   10.gethostname()

   1.socket()
我们使用系统调用socket()来获得文件描述符：
#include<sys/types.h>
#include<sys/socket.h>
int socket(int domain,int type,int protocol);
第一个参数domain设置为“AF_INET”。
第二个参数是套接口的类型：SOCK_STREAM或SOCK_DGRAM。
第三个参数设置为0。
系统调用socket()只返回一个套接口描述符，如果出错，则返回-1。

    2.bind()
一旦你有了一个套接口以后，下一步就是把套接口绑定到本地计算机的某一个端口上。但如果你只想使用connect()则无此必要。
下面是系统调用bind()的使用方法：
#include<sys/types.h>
#include<sys/socket.h>
int bind(int sockfd,struct sockaddr*my_addr,int addrlen);
第一个参数sockfd是由socket()调用返回的套接口文件描述符。
第二个参数my_addr是指向数据结构sockaddr的指针。数据结构sockaddr中包括了关于你的地址、端口和IP地址的信息。
第三个参数addrlen可以设置成sizeof(structsockaddr)。
下面是一个例子：
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#define MYPORT 3490
main()
{
    int sockfd;
    struct sockaddr_in my_addr;
    sockfd=socket(AF_INET,SOCK_STREAM,0);/*do some error checking!*/
    my_addr.sin_family=AF_INET;/*host byte order*/
    my_addr.sin_port=htons(MYPORT);/*short,network byte order*/
    my_addr.sin_addr.s_addr=inet_addr("132.241.5.10");
    bzero(&(my_addr.sin_zero),8);/*zero the rest of the struct*/
    /*don't forget your error checking for bind():*/
    bind(sockfd,(struct sockaddr*)&my_addr,sizeof(struct sockaddr));
...
如果出错，bind()也返回-1。
如果你使用connect()系统调用，那么你不必知道你使用的端口号。当你调用connect()时，它检查套接口是否已经绑定，如果没有，它将会分配一个空闲的端口。

    3.connect()
系统调用connect()的用法如下：
#include<sys/types.h>
#include<sys/socket.h>
int connect(int sockfd,struct sockaddr* serv_addr,int addrlen);
第一个参数还是套接口文件描述符，它是由系统调用socket()返回的。
第二个参数是serv_addr是指向数据结构sockaddr的指针，其中包括目的端口和IP地址。
第三个参数可以使用sizeof(structsockaddr)而获得。
下面是一个例子：
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#defineDEST_IP"132.241.5.10"
#defineDEST_PORT23
main()
{
    int sockfd;
    struct sockaddr_in dest_addr;/*will hold the destination addr*/
    sockfd=socket(AF_INET,SOCK_STREAM,0);/*do some error checking!*/
    dest_addr.sin_family=AF_INET;/*hostbyteorder*/
    dest_addr.sin_port=htons(DEST_PORT);/*short,network byte order*/
    dest_addr.sin_addr.s_addr=inet_addr(DEST_IP);
    bzero(&(dest_addr.sin_zero),8);/*zero the rest of the struct*/
    /*don'tforgettoerrorchecktheconnect()!*/
    connect(sockfd,(struct sockaddr*)&dest_addr,sizeof(struct sockaddr));
...
同样，如果出错，connect()将会返回-1。

    4.listen()
如果你希望不连接到远程的主机，也就是说你希望等待一个进入的连接请求，然后再处理它们。这样，你通过首先调用listen()，然后再调用accept()来实现。
系统调用listen()的形式如下：
intl isten(int sockfd,int backlog);
第一个参数是系统调用socket()返回的套接口文件描述符。
第二个参数是进入队列中允许的连接的个数。进入的连接请求在使用系统调用accept()应答之前要在进入队列中等待。这个值是队列中最多可以拥有的请求的个数。大多数系统的缺省设置为20。你可以设置为5或者10。当出错时，listen()将会返回-1值。
当然，在使用系统调用listen()之前，我们需要调用bind()绑定到需要的端口，否则系统内核将会让我们监听一个随机的端口。所以，如果你希望监听一个端口，下面是应该使用的系统调用的顺序：
socket();
bind();
listen();
/*accept()goeshere*/

    5.accept()
系统调用accept()比较起来有点复杂。在远程的主机可能试图使用connect()连接你使用listen()正在监听的端口。
但此连接将会在队列中等待，直到使用accept()处理它。调用accept()之后，将会返回一个全新的套接口文件描述符来处理这个单个的连接。
这样，对于同一个连接来说，你就有了两个文件描述符。原先的一个文件描述符正在监听你指定的端口，新的文件描述符可以用来调用send()和recv()。
调用的例子如下：
#include<sys/socket.h>
int accept(int sockfd,void* addr,int* addrlen);
第一个参数是正在监听端口的套接口文件描述符。
第二个参数addr是指向本地的数据结构sockaddr_in的指针。调用connect()中的信息将存储在这里。通过它你可以了解哪个主机在哪个端口呼叫你。
第三个参数同样可以使用sizeof(structsockaddr_in)来获得。
如果出错，accept()也将返回-1。下面是一个简单的例子：
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#define MYPORT3490/*theportuserswillbeconnectingto*/
#define BACKLOG10/*howmanypendingconnectionsqueuewillhold*/
main()
{
    int sockfd,new_fd;/*listenonsock_fd,newconnectiononnew_fd*/
    struct sockaddr_in my_addr;/*myaddressinformation*/
    struct sockaddr_in their_addr;/*connector'saddressinformation*/
    int sin_size;
    sockfd=socket(AF_INET,SOCK_STREAM,0);/*dosomeerrorchecking!*/
    my_addr.sin_family=AF_INET;/*hostbyteorder*/
    my_addr.sin_port=htons(MYPORT);/*short,networkbyteorder*/
    my_addr.sin_addr.s_addr=INADDR_ANY;/*auto-fillwithmyIP*/
    bzero(&(my_addr.sin_zero),8);/*zerotherestofthestruct*/
    /*don'tforgetyourerrorcheckingforthesecalls:*/
    bind(sockfd,(struct sockaddr*)&my_addr,sizeof(structsockaddr));
    listen(sockfd,BACKLOG);
    sin_size=sizeof(struct sockaddr_in);
    new_fd=accept(sockfd,&their_addr,&sin_size);
...
下面，我们将可以使用新创建的套接口文件描述符new_fd来调用send()和recv()。

    6.send() 和recv()
系统调用send()的用法如下：
int send(int sockfd,const void* msg,int len,int flags);
第一个参数是你希望给发送数据的套接口文件描述符。它可以是你通过socket()系统调用返回的，也可以是通过accept()系统调用得到的。
第二个参数是指向你希望发送的数据的指针。
第三个参数是数据的字节长度。第四个参数标志设置为0。
下面是一个简单的例子：
char*msg="Beejwashere!";
intlen,bytes_sent;
..
len=strlen(msg);
bytes_sent=send(sockfd,msg,len,0);
...
系统调用send()返回实际发送的字节数，这可能比你实际想要发送的字节数少。如果返回的字节数比要发送的字节数少，你在以后必须发送剩下的数据。当send()出错时，将返回-1。
系统调用recv()的使用方法和send()类似：
int recv(int sockfd,void* buf,int len,unsigned int flags);
第一个参数是要读取的套接口文件描述符。
第二个参数是保存读入信息的地址。
第三个参数是缓冲区的最大长度。第四个参数设置为0。
系统调用recv()返回实际读取到缓冲区的字节数，如果出错则返回-1。
这样使用上面的系统调用，你可以通过数据流套接口来发送和接受信息。

    7.sendto() 和recvfrom()
因为数据报套接口并不连接到远程的主机上，所以在发送数据包之前，我们必须首先给出目的地址，请看：
int sendto(int sockfd,const void* msg,int len,unsigned int flags,const struct sockaddr* to,int tolen);
除了两个参数以外，其他的参数和系统调用send()时相同。
参数to是指向包含目的IP地址和端口号的数据结构sockaddr的指针。
参数tolen可以设置为sizeof(structsockaddr)。
系统调用sendto()返回实际发送的字节数，如果出错则返回-1。
系统调用recvfrom()的使用方法也和recv()的十分近似：
int recvfrom(int sockfd,void* buf,int len,unsigned int flags, struct sockaddr* from,int* fromlen);
参数from是指向本地计算机中包含源IP地址和端口号的数据结构sockaddr的指针。
参数fromlen设置为sizeof(struct sockaddr)。
系统调用recvfrom()返回接收到的字节数，如果出错则返回-1。

    8.close() 和shutdown()
你可以使用close()调用关闭连接的套接口文件描述符：
close(sockfd);
这样就不能再对此套接口做任何的读写操作了。
使用系统调用shutdown()，可有更多的控制权。它允许你在某一个方向切断通信，或者切断双方的通信：
int shutdown(int sockfd,int how);
第一个参数是你希望切断通信的套接口文件描述符。第二个参数how值如下：
0—Further receives are disallowed
1—Further sends are disallowed
2—Further sends and receives are disallowed(likeclose())
shutdown()如果成功则返回0，如果失败则返回-1。

    9.getpeername()
这个系统的调用十分简单。它将告诉你是谁在连接的另一端：
#include<sys/socket.h>
int getpeername(int sockfd,struct sockaddr* addr,int* addrlen);
第一个参数是连接的数据流套接口文件描述符。
第二个参数是指向包含另一端的信息的数据结构sockaddr的指针。
第三个参数可以设置为sizeof(structsockaddr)。
如果出错，系统调用将返回-1。
一旦你获得了它们的地址，你可以使用inet_ntoa()或者gethostbyaddr()来得到更多的信息。

    10.gethostname()
系统调用gethostname()比系统调用getpeername()还简单。它返回程序正在运行的计算机的名字。系统调用gethostbyname()可以使用这个名字来决定你的机器的IP地址。
下面是一个例子：
#include<unistd.h>
int gethostname(char*hostname,size_tsize);
如果成功，gethostname将返回0。如果失败，它将返回-1。
