
https://docs.docker.com/
https://docs.docker.com/engine/reference/commandline/docker/
https://www.cnblogs.com/Can-daydayup/p/16472375.html
https://www.zhihu.com/question/628245655/answer/3271205799   # 为什么要使用Docker
https://blog.csdn.net/kwdecsdn/article/details/121354765     # Docker基本介绍
https://www.cnblogs.com/cocowool/p/make-your-own-image.html  # docker 从入门到实践
https://pythondjango.cn/python/tools/2-docker-dockerfile/    # Docker命令大全及Dockerfile详解(附示例)
https://www.freecodecamp.org/chinese/news/the-docker-handbook/  # Docker 完全手册
https://www.runoob.com/docker/docker-tutorial.html           # Docker 教程


# 设置存储库
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg lsb-release  # 安装必备的软件包以允许apt通过HTTPS使用存储库
sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg # 添加Docker官方版本库的GPG密钥
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null  # 设置存储库

# 安装Docker
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

# 切换阿里云镜像源安装Docker
sudo apt-get remove docker docker-engine docker-ce docker.io  # 卸载docker
curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -  # 添加阿里云的GPG密钥
sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable  # 设置存储库
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin  # 安装最新版本的Docker


# 启动Docker
systemctl status docker            # 查看docker运行状态
sudo systemctl enable docker       # 设置Docker服务在每次开机时自动启动
sudo systemctl start docker        # 启动 Docker
service docker restart             # 重启docker

#
sudo groupadd docker               # 建立 docker 组
sudo usermod -aG docker $USER      # 将当前用户加入 docker 组


# 验证
sudo docker run hello-world # 验证Docker是否运行正常
docker version              # 检查docker的版本信息

# image
docker search ubuntu        # 搜索镜像 ubuntu最新版
docker search ubuntu:20.04  # 搜索镜像 ubuntu版本为20.04

docker pull ubuntu          # 拉取镜像 ubuntu最新版
docker pull ubuntu:20.04    # 拉取镜像 ubuntu版本为20.04

docker images --help        # 帮助
docker images               # 显示镜像 当前系统所有 同 docker image ls
docker images ubuntu        # 显示镜像 根据仓库名
docker images ubuntu:18.04  # 显示镜像 根据仓库名和标签
docker images -a            # 显示镜像 --all 包括中间层镜像在内的所有
docker images --digests     # 显示摘要
docker images -f dangling=true     # 过滤显示虚悬镜像(dangling image) 也就是 none 镜像  --filter
  docker images -f since=mongo:3.2 # 过滤显示mongo:3.2 之后建立的镜像  before查看某个位置之前的镜
  docker images -f label=lb1       # 过滤显示镜像 通过label来过滤 如果镜像构建时 定义了label
docker images -q            # 只显示镜像ID --quiet  配合 -f 可过滤id范围
docker images --format "{{.ID}}:{{.Repository}}"  # 自定义格式化输出
  docker images --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}"  # table 显示表头

docker image --help         # 帮助
docker image rm 501         # 删除镜像 根据 ID 一般取前3位足够区分了 同 docker rmi
  docker image rm centos    # 删除镜像 根据镜像名，<仓库名>:<标签>
  docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228  # 删除镜像 根据摘要
docker rmi [opt] 镜像        # 删除镜像 或多个 -f 强制删除   --no-prune 不移除该镜像的过程镜像，默认移除
  docker rmi -f  $(docker images | grep "none" | awk '{print $3}')   # 删除none镜像
  docker rmi -f mongo:3.2   # 强制删除本地镜像 mongo:3.2
docker image prune          # 删除 所有未被 tag 标记和未被容器使用的镜像
  docker image prune -a     # 删除 所有未被容器使用的镜像



# 容器
docker ps                   # 显示运行中容器
docker ps -a                # 显示正在运行或过去运行的所有容器

docker run -it ubuntu:latest /bin/bash      # 启动容器 -i 交互式 -t 终端 后接镜像 和 命令
  docker run -v $PWD:/all -it image_my /bin/bash # -v 挂载当前目录到容器下/all 同--volume
  docker run -it --rm image_my /bin/bash    # --rm 停止时移除容器 默认不立即删除，除非手动 docker rm
  docker run -d image_my    # -d 后台运行容器 返回容器ID 仅限于启动全新的容器，启动关闭的容器是不可以的
  docker run --name webserver -d -p 80:80 nginx  # 启动nginx容器，命名为 webserver，并映射了80端口
  docker run --rm -v "$PWD/data":/var/lib/mysql --name mysql -e MYSQL_ROOT_PASSWORD=admin-password -e MYSQL_DATABASE=my-database -p 3306:3306 mysql:8.0.28-debian
    -e MYSQL_DATABASE=my-database 设置一个环境变量，自动创建一个名为my-database的新数据库
    -e MYSQL_ROOT_PASSWORD=admin-password 设置一个环境变量来设置管理密码

docker exec -it 775c7c9ee1e1 /bin/bash  # 进入运行中的容器 775c7c9ee1e1为容器ID ps命令查

exit                        # 在容器内退出容器
Ctrl + p + q                # 暂时离开容器 此时状态容器状态还是 up 运行中

docker rm [opt] 容器        # 删除一个或多个 容器
  docker rm -f db01 db02    # 强制删除容器db01、db02  -f 通过SIGKILL信号强制删除一个运行中的容器
  docker rm -l db01         # 移除容器 my-nginx 对容器db01的连接，连接名db01  -l 移除容器间的网络连接，而非容器本身
  docker rm -v my-nginx     # 删除容器 my-nginx，并删除容器挂载的数据卷  -v 删除与容器关联的卷
  docker rm $(docker ps -a | grep "Exited" | awk '{print $1 }')      # 删除容器

docker stop $(docker ps -a | grep "Exited" | awk '{print $1 }')    # 停止容器

docker logs [opt] 容器 # -f 跟踪日志输出  --since 显示某个开始时间的所有日志  -t 显示时间戳  --tail 最新N条容器日志
  docker logs --since="2016-07-01" --tail=10 mynginx

本机与容器传输文件
docker ps       # 1 查询 CONTAINER ID 或 NAMES 两者任意之一   或 docker ps -a
docker inspect -f '{{.Id}}' xxx   # 2 根据1的结果查询 ID长长全称
docker cp 本地文件路径 ID全称:容器路径  # 传文件到容器
docker cp ID全称:容器文件路径 本地路径  # 从容器拉文件


# system
docker system df      # 显示镜像、容器、数据卷所占用的空间
  docker system df -v # 使用verbose选项 -v 获得更多信息
docker system prune      # 清理大部分docker资源，保留有标签的镜像 只删除悬空的镜像，是没有标记的镜像，与其他镜像没有关系
  docker system prune -a # 尽可能地清理，不包括正在使用的组件 -a 包括未使用的和悬空的容器

docker image prune       #  清理未使用和悬空的镜像
  docker image prune -a  #  只清理悬空的镜像
docker container prune   #  清理停止运行的容器   删除所有停止运行的容器
docker volume prune      #  清理不再使用的卷   删除所有未被挂载的卷
docker network prune        # 删除 所有网络

http://blog.51yip.com/cloud/1859.html  # 删除none镜像
docker stop $(docker ps -a | grep "Exited" | awk '{print $1 }')   // 1 停止容器
docker rm   $(docker ps -a | grep "Exited" | awk '{print $1 }')   // 2 删除容器
docker rmi  $(docker images | grep "none"  | awk '{print $3}')    // 3 删除镜像



docker目录挂载的总结
https://www.cnblogs.com/ivictor/p/4834864.html
docker run -it -v /test:/soft centos /bin/bash # 启动centos容器 主机的/test目录挂载到容器的/soft目录
1 主机目录:容器目录
  1.1 主机目录若不存在，则会自动生成；容器目录必须是绝对路径
  1.2 主机目录若为相对路径 其相对路径指的是/var/lib/docker/volumes/，与宿主机的当前目录无关。
    通过docker inspect命令，查看容器“Mounts”那一部分 有 "Source": "/var/lib/docker/volumes/test1/_data"
2 若只指定一个目录 即 -v dir1
  2.1 dir1 代表容器目录/dir  绝对目录 相对目录 都可以
  2.2 主机目录为/var/lib/docker/volumes/xxx/_data # xxx随机目录名 查询同1.2
3 容器内修改了目录的属主和属组，那么对应的挂载点是否会修改呢？ 跟随UID改变
4 容器销毁了，在宿主机上新建的挂载目录是否会消失？
  4.1 指定主机目录，即 -v /test:/soft。即便容器销毁了，新建的挂载目录不会消失。
      如果主机目录的属主和属组发生了变化，容器销毁后，宿主机目录的属主和属组不会恢复到挂载之前的状态。
  4.2 没指定主机目录，即-v /soft。销毁容器，看目录是否存在；即便重启了docker服务，该目录依旧存在。
5 挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission denied”。
  可通过两种方式解决：
  5.1 关闭selinux。
    临时关闭：# setenforce 0
    永久关闭：修改/etc/sysconfig/selinux文件，将SELINUX的值设置为disabled。
  5.2 以特权方式启动容器
    指定--privileged参数
    如：# docker run -it --privileged=true -v /test:/soft centos /bin/bash


Docker容器中安装软件并在退出容器后保留更改
docker run -it <image_name> bash      # 1 启动一个Docker容器
docker exec -it <container_id> bash   # 2 这个命令将会以交互模式进入到<container_id>对应的容器中
apt-get update                        # 3 安装需要的软件
apt-get install -y vim
exit                                  # 4 退出容器
docker ps -a                          # 5 查找容器的ID  要保留软件安装的更改，需要创建一个新的镜像，以保存容器的状态。
docker commit <container_id> <new_image_name>:<tag>  # 6 创建一个新的镜像，它基于<container_id>对应的容器，并且命名为<new_image_name>，并且可以选择添加一个标签<tag>来区分不同的版本。



docker build -f ./dockertest2/Dockerfile_  -t wjg:1 ./dockertest  # 指定构造文件和指定目录去构造镜像

生成最简单的镜像 Docker中直接运行程序
https://developer.aliyun.com/article/582488
https://www.cnblogs.com/cocowool/p/make-your-own-image.html
1 创建目录
  mkdir hello-docker    # 创建应用程序目录
  cd hello-docker       # 进入该目录
2 编写程序
  vim hello.c
3 源码
  #include<stdio.h>
  int main ()
  {
      printf("hello docker\n");
  }
4 编译
  gcc -static hello.c -o hello  将编写的c程序编译在hello-docker根目录 静态方式
5 在hello-docker文件夹下新建Dockerfile文件
  vim Dockerfile
6 编写Dockerfile中的内容
FROM scatch
ADD hello /
CMD ["/hello"]
注： FROM:从哪构建镜像，是基础镜像的地址或者名称; scatch表示指从空白开始
     ADD: 添加文件到镜像执行位置，如上是根目录;
     RUN: 镜像的操作指令;
     CMD: 容器启动时执行指令
7 在hello-docker 根目录编译镜像
  docker build -t wjg:1 .                     # -t 增加标签
8 编译完成后，在命令行中查看镜像是否存在
  docker images
9 运行镜像
  docker run wjg:1



基本概念
https://www.freecodecamp.org/chinese/news/where-are-docker-images-stored-docker-container-paths-explained/

容器 Containers
  只是处于运行状态的镜像。使用镜像运行容器时，实际上是在先前的只读层之上创建了另一个临时可写层。
镜像 Images
  是分层的自包含文件，充当创建容器的模板。它们就像容器的冻结只读副本。镜像可以通过仓库进行共享。
仓库 Registry
  镜像仓库是一个集中式的位置，可以在其中上传镜像，也可以下载其他人创建的镜像。
dockerfile
  镜像的源代码，指定需要哪些程序、依赖什么样的配置；docker就是"编译器"，使用docker build命令，生成的可执行程序就是镜像。

docker是cs架构，docker client负责处理用户输入的各种命令，如docker build、docker run，真正工作是docker demon。
docker client   ------>   docker daemon         ------>   registry
  docker build            images    containers            image store
  docker run
  docker pull
  docker push



docker的底层实现是基于Linux内核提供这样几项功能
1 NameSpace
  Linux中的PID、IPC、网络等资源是全局的，而NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，
  而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰，这就使得每个NameSpace看上去就像一个独立的操作系统一样，
  但是只有NameSpace是不够。
2 Control groups
  虽然有了NameSpace技术可以实现资源隔离，但进程还是可以不受控的访问系统资源，比如CPU、内存、磁盘、网络等，
  为了控制容器中进程对资源的访问，Docker采用control groups技术(cgroup)，有了cgroup就可以控制容器中进程对系统资源的消耗了，
  比如你可以限制某个容器使用内存的上限、可以在哪些CPU上运行等等。
有了这两项技术，容器看起来就真的像是独立的操作系统了。


Docker 的配置信息
$ docker info 中
   Storage Driver: overlay2                  # 存储驱动
   Docker Root Dir: /var/lib/docker          # docker 根目录的信息

Docker 镜像和容器的存储路径
/var/lib/docker/              # Linux 保存着各种信息，如：容器数据、卷、构建文件、网络文件和集群数据。
/var/lib/docker/overlay2/     # 镜像目录 默认使用 overlay2 存储驱动  最大的文件通常是镜像
/var/lib/docker/image         # 镜像位置
/var/lib/docker/containers    # 容器位置
C:\ProgramData\DockerDesktop  # Windows系统
/Users/xxxxmyname/Library/Containers/com.docker.docker/Data  # MacOS 系统
/Users/xxxxmyname/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw

docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -i sh # 连接镜像
现在，可以进入指定路径：cd /var/lib/docker/overlay2/585...9eb/

docker image inspect nginx    # 查看常规镜像的信息  同 docker inspect nginx
  "GraphDriver": {
    "Data": {
      "LowerDir":"/var/lib/docker/overlay2/xx/diff:     # 包含镜像的只读层   没有表示为基础镜像
                  /var/lib/docker/overlay2/xx/diff",
      "MergedDir":"/var/lib/docker/overlay2/xx/merged", # 表示UpperDir和LowerDir合并的结果 docker用它来运行容器 系统中的路径
      "UpperDir":"/var/lib/docker/overlay2/xx/diff",    # 表示变更的读写层包含在 UpperDir 中
      "WorkDir": "/var/lib/docker/overlay2/xx/work"     # WorkDir 是 overlay2 的内部目录，应该是空的。
    }

Docker 卷(Volumes)
用来持久化容器内的数据，容器和宿主机之间、容器和容器之间也可以通过共享卷来共享数据。
docker run --name nginx_container -v /var/log nginx    # 启动容器时 -v 挂载卷
docker inspect nginx_container 中显示
"Mounts": [
          {
              "Source": "/var/lib/docker/volumes/1e4...d9c/_data",     # 挂载的外面的目录
              "Destination": "/var/log",                               # docker中的目录
          }
      ],

